
rpi_hat_pmon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00807000  00003dee  00003e82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ca  008070fa  008070fa  00003f7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00003fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a86  00000000  00000000  00004750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ba9  00000000  00000000  0000c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006e97  00000000  00000000  0000fd7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019a8  00000000  00000000  00016c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000199f2  00000000  00000000  000185c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033b1  00000000  00000000  00031fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  00035363  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008a96  00000000  00000000  0003595b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 95 11 	jmp	0x232a	; 0x232a <__vector_12>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__vector_19>
      50:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__vector_20>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__vector_24>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      74:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__vector_29>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      80:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      8c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      90:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      94:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      98:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      9c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      ac:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      b0:	92 07       	cpc	r25, r18
      b2:	9c 07       	cpc	r25, r28
      b4:	a6 07       	cpc	r26, r22
      b6:	b0 07       	cpc	r27, r16
      b8:	ba 07       	cpc	r27, r26
      ba:	c1 07       	cpc	r28, r17
      bc:	d8 07       	cpc	r29, r24
      be:	f5 07       	cpc	r31, r21
      c0:	91 0a       	sbc	r9, r17
      c2:	b7 09       	sbc	r27, r7
      c4:	b7 09       	sbc	r27, r7
      c6:	b7 09       	sbc	r27, r7
      c8:	e4 09       	sbc	r30, r4
      ca:	f3 09       	sbc	r31, r3
      cc:	27 0a       	sbc	r2, r23
      ce:	5b 0a       	sbc	r5, r27

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	df e7       	ldi	r29, 0x7F	; 127
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_copy_data>:
      dc:	10 e7       	ldi	r17, 0x70	; 112
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b0 e7       	ldi	r27, 0x70	; 112
      e2:	ee ee       	ldi	r30, 0xEE	; 238
      e4:	fd e3       	ldi	r31, 0x3D	; 61
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	aa 3f       	cpi	r26, 0xFA	; 250
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
      f2:	21 e7       	ldi	r18, 0x71	; 113
      f4:	aa ef       	ldi	r26, 0xFA	; 250
      f6:	b0 e7       	ldi	r27, 0x70	; 112
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a4 3c       	cpi	r26, 0xC4	; 196
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 fe 11 	call	0x23fc	; 0x23fc <main>
     106:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <analog_sense_adc_handler>:
//=========================================================================================
float analog_sense_read(analog_value_st* sens_point)
{
	if (sens_point) return sens_point->value;
	return -999999.0;
}
     10e:	cf 92       	push	r12
     110:	df 92       	push	r13
     112:	ef 92       	push	r14
     114:	ff 92       	push	r15
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	66 97       	sbiw	r28, 0x16	; 22
     124:	cd bf       	out	0x3d, r28	; 61
     126:	de bf       	out	0x3e, r29	; 62
     128:	20 91 44 70 	lds	r18, 0x7044	; 0x807044 <analog_sense_dev+0x2>
     12c:	30 91 45 70 	lds	r19, 0x7045	; 0x807045 <analog_sense_dev+0x3>
     130:	80 91 46 70 	lds	r24, 0x7046	; 0x807046 <analog_sense_dev+0x4>
     134:	48 2f       	mov	r20, r24
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	66 e1       	ldi	r22, 0x16	; 22
     13a:	64 9f       	mul	r22, r20
     13c:	c0 01       	movw	r24, r0
     13e:	65 9f       	mul	r22, r21
     140:	90 0d       	add	r25, r0
     142:	11 24       	eor	r1, r1
     144:	82 0f       	add	r24, r18
     146:	93 1f       	adc	r25, r19
     148:	8d 83       	std	Y+5, r24	; 0x05
     14a:	9e 83       	std	Y+6, r25	; 0x06
     14c:	19 82       	std	Y+1, r1	; 0x01
     14e:	1a 82       	std	Y+2, r1	; 0x02
     150:	1b 82       	std	Y+3, r1	; 0x03
     152:	1c 82       	std	Y+4, r1	; 0x04
     154:	0e 94 46 12 	call	0x248c	; 0x248c <ADC_0_get_conversion_result>
     158:	cc 01       	movw	r24, r24
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	bc 01       	movw	r22, r24
     160:	cd 01       	movw	r24, r26
     162:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__floatunsisf>
     166:	dc 01       	movw	r26, r24
     168:	cb 01       	movw	r24, r22
     16a:	8f 83       	std	Y+7, r24	; 0x07
     16c:	98 87       	std	Y+8, r25	; 0x08
     16e:	a9 87       	std	Y+9, r26	; 0x09
     170:	ba 87       	std	Y+10, r27	; 0x0a
     172:	8d 81       	ldd	r24, Y+5	; 0x05
     174:	9e 81       	ldd	r25, Y+6	; 0x06
     176:	fc 01       	movw	r30, r24
     178:	80 81       	ld	r24, Z
     17a:	88 2f       	mov	r24, r24
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	00 97       	sbiw	r24, 0x00	; 0
     180:	e9 f1       	breq	.+122    	; 0x1fc <analog_sense_adc_handler+0xee>
     182:	99 23       	and	r25, r25
     184:	0c f4       	brge	.+2      	; 0x188 <analog_sense_adc_handler+0x7a>
     186:	27 c1       	rjmp	.+590    	; 0x3d6 <__EEPROM_REGION_LENGTH__+0x1d6>
     188:	03 97       	sbiw	r24, 0x03	; 3
     18a:	0c f0       	brlt	.+2      	; 0x18e <analog_sense_adc_handler+0x80>
     18c:	24 c1       	rjmp	.+584    	; 0x3d6 <__EEPROM_REGION_LENGTH__+0x1d6>
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e4       	ldi	r19, 0x40	; 64
     192:	4c e1       	ldi	r20, 0x1C	; 28
     194:	5e e3       	ldi	r21, 0x3E	; 62
     196:	6f 81       	ldd	r22, Y+7	; 0x07
     198:	78 85       	ldd	r23, Y+8	; 0x08
     19a:	89 85       	ldd	r24, Y+9	; 0x09
     19c:	9a 85       	ldd	r25, Y+10	; 0x0a
     19e:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
     1a2:	dc 01       	movw	r26, r24
     1a4:	cb 01       	movw	r24, r22
     1a6:	8f 83       	std	Y+7, r24	; 0x07
     1a8:	98 87       	std	Y+8, r25	; 0x08
     1aa:	a9 87       	std	Y+9, r26	; 0x09
     1ac:	ba 87       	std	Y+10, r27	; 0x0a
     1ae:	8d 81       	ldd	r24, Y+5	; 0x05
     1b0:	9e 81       	ldd	r25, Y+6	; 0x06
     1b2:	fc 01       	movw	r30, r24
     1b4:	85 81       	ldd	r24, Z+5	; 0x05
     1b6:	96 81       	ldd	r25, Z+6	; 0x06
     1b8:	a7 81       	ldd	r26, Z+7	; 0x07
     1ba:	b0 85       	ldd	r27, Z+8	; 0x08
     1bc:	2f 81       	ldd	r18, Y+7	; 0x07
     1be:	38 85       	ldd	r19, Y+8	; 0x08
     1c0:	49 85       	ldd	r20, Y+9	; 0x09
     1c2:	5a 85       	ldd	r21, Y+10	; 0x0a
     1c4:	bc 01       	movw	r22, r24
     1c6:	cd 01       	movw	r24, r26
     1c8:	0e 94 47 1c 	call	0x388e	; 0x388e <__addsf3>
     1cc:	dc 01       	movw	r26, r24
     1ce:	cb 01       	movw	r24, r22
     1d0:	7c 01       	movw	r14, r24
     1d2:	8d 01       	movw	r16, r26
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	9e 81       	ldd	r25, Y+6	; 0x06
     1d8:	fc 01       	movw	r30, r24
     1da:	81 85       	ldd	r24, Z+9	; 0x09
     1dc:	92 85       	ldd	r25, Z+10	; 0x0a
     1de:	a3 85       	ldd	r26, Z+11	; 0x0b
     1e0:	b4 85       	ldd	r27, Z+12	; 0x0c
     1e2:	9c 01       	movw	r18, r24
     1e4:	ad 01       	movw	r20, r26
     1e6:	c8 01       	movw	r24, r16
     1e8:	b7 01       	movw	r22, r14
     1ea:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
     1ee:	dc 01       	movw	r26, r24
     1f0:	cb 01       	movw	r24, r22
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	9a 83       	std	Y+2, r25	; 0x02
     1f6:	ab 83       	std	Y+3, r26	; 0x03
     1f8:	bc 83       	std	Y+4, r27	; 0x04
     1fa:	75 c0       	rjmp	.+234    	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	91 e1       	ldi	r25, 0x11	; 17
     200:	fc 01       	movw	r30, r24
     202:	86 81       	ldd	r24, Z+6	; 0x06
     204:	97 81       	ldd	r25, Z+7	; 0x07
     206:	8b 87       	std	Y+11, r24	; 0x0b
     208:	9c 87       	std	Y+12, r25	; 0x0c
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	91 e1       	ldi	r25, 0x11	; 17
     20e:	fc 01       	movw	r30, r24
     210:	84 81       	ldd	r24, Z+4	; 0x04
     212:	95 81       	ldd	r25, Z+5	; 0x05
     214:	8d 87       	std	Y+13, r24	; 0x0d
     216:	9e 87       	std	Y+14, r25	; 0x0e
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	96 e0       	ldi	r25, 0x06	; 6
     21c:	fc 01       	movw	r30, r24
     21e:	80 89       	ldd	r24, Z+16	; 0x10
     220:	91 89       	ldd	r25, Z+17	; 0x11
     222:	96 95       	lsr	r25
     224:	87 95       	ror	r24
     226:	96 95       	lsr	r25
     228:	87 95       	ror	r24
     22a:	8f 87       	std	Y+15, r24	; 0x0f
     22c:	98 8b       	std	Y+16, r25	; 0x10
     22e:	2b 85       	ldd	r18, Y+11	; 0x0b
     230:	3c 85       	ldd	r19, Y+12	; 0x0c
     232:	8f 85       	ldd	r24, Y+15	; 0x0f
     234:	98 89       	ldd	r25, Y+16	; 0x10
     236:	a9 01       	movw	r20, r18
     238:	48 1b       	sub	r20, r24
     23a:	59 0b       	sbc	r21, r25
     23c:	ca 01       	movw	r24, r20
     23e:	cc 01       	movw	r24, r24
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	89 8b       	std	Y+17, r24	; 0x11
     246:	9a 8b       	std	Y+18, r25	; 0x12
     248:	ab 8b       	std	Y+19, r26	; 0x13
     24a:	bc 8b       	std	Y+20, r27	; 0x14
     24c:	8d 85       	ldd	r24, Y+13	; 0x0d
     24e:	9e 85       	ldd	r25, Y+14	; 0x0e
     250:	cc 01       	movw	r24, r24
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	29 89       	ldd	r18, Y+17	; 0x11
     258:	3a 89       	ldd	r19, Y+18	; 0x12
     25a:	4b 89       	ldd	r20, Y+19	; 0x13
     25c:	5c 89       	ldd	r21, Y+20	; 0x14
     25e:	bc 01       	movw	r22, r24
     260:	cd 01       	movw	r24, r26
     262:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsi3>
     266:	dc 01       	movw	r26, r24
     268:	cb 01       	movw	r24, r22
     26a:	89 8b       	std	Y+17, r24	; 0x11
     26c:	9a 8b       	std	Y+18, r25	; 0x12
     26e:	ab 8b       	std	Y+19, r26	; 0x13
     270:	bc 8b       	std	Y+20, r27	; 0x14
     272:	89 89       	ldd	r24, Y+17	; 0x11
     274:	9a 89       	ldd	r25, Y+18	; 0x12
     276:	ab 89       	ldd	r26, Y+19	; 0x13
     278:	bc 89       	ldd	r27, Y+20	; 0x14
     27a:	98 5f       	subi	r25, 0xF8	; 248
     27c:	af 4f       	sbci	r26, 0xFF	; 255
     27e:	bf 4f       	sbci	r27, 0xFF	; 255
     280:	89 8b       	std	Y+17, r24	; 0x11
     282:	9a 8b       	std	Y+18, r25	; 0x12
     284:	ab 8b       	std	Y+19, r26	; 0x13
     286:	bc 8b       	std	Y+20, r27	; 0x14
     288:	89 89       	ldd	r24, Y+17	; 0x11
     28a:	9a 89       	ldd	r25, Y+18	; 0x12
     28c:	ab 89       	ldd	r26, Y+19	; 0x13
     28e:	bc 89       	ldd	r27, Y+20	; 0x14
     290:	07 2e       	mov	r0, r23
     292:	7c e0       	ldi	r23, 0x0C	; 12
     294:	b6 95       	lsr	r27
     296:	a7 95       	ror	r26
     298:	97 95       	ror	r25
     29a:	87 95       	ror	r24
     29c:	7a 95       	dec	r23
     29e:	d1 f7       	brne	.-12     	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
     2a0:	70 2d       	mov	r23, r0
     2a2:	89 8b       	std	Y+17, r24	; 0x11
     2a4:	9a 8b       	std	Y+18, r25	; 0x12
     2a6:	ab 8b       	std	Y+19, r26	; 0x13
     2a8:	bc 8b       	std	Y+20, r27	; 0x14
     2aa:	89 89       	ldd	r24, Y+17	; 0x11
     2ac:	9a 89       	ldd	r25, Y+18	; 0x12
     2ae:	8d 8b       	std	Y+21, r24	; 0x15
     2b0:	9e 8b       	std	Y+22, r25	; 0x16
     2b2:	8d 89       	ldd	r24, Y+21	; 0x15
     2b4:	9e 89       	ldd	r25, Y+22	; 0x16
     2b6:	cc 01       	movw	r24, r24
     2b8:	a0 e0       	ldi	r26, 0x00	; 0
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	bc 01       	movw	r22, r24
     2be:	cd 01       	movw	r24, r26
     2c0:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__floatunsisf>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	23 e3       	ldi	r18, 0x33	; 51
     2ca:	33 e9       	ldi	r19, 0x93	; 147
     2cc:	48 e8       	ldi	r20, 0x88	; 136
     2ce:	53 e4       	ldi	r21, 0x43	; 67
     2d0:	bc 01       	movw	r22, r24
     2d2:	cd 01       	movw	r24, r26
     2d4:	0e 94 46 1c 	call	0x388c	; 0x388c <__subsf3>
     2d8:	dc 01       	movw	r26, r24
     2da:	cb 01       	movw	r24, r22
     2dc:	89 83       	std	Y+1, r24	; 0x01
     2de:	9a 83       	std	Y+2, r25	; 0x02
     2e0:	ab 83       	std	Y+3, r26	; 0x03
     2e2:	bc 83       	std	Y+4, r27	; 0x04
     2e4:	00 00       	nop
     2e6:	8d 81       	ldd	r24, Y+5	; 0x05
     2e8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ea:	fc 01       	movw	r30, r24
     2ec:	c1 80       	ldd	r12, Z+1	; 0x01
     2ee:	d2 80       	ldd	r13, Z+2	; 0x02
     2f0:	e3 80       	ldd	r14, Z+3	; 0x03
     2f2:	f4 80       	ldd	r15, Z+4	; 0x04
     2f4:	8d 81       	ldd	r24, Y+5	; 0x05
     2f6:	9e 81       	ldd	r25, Y+6	; 0x06
     2f8:	fc 01       	movw	r30, r24
     2fa:	85 85       	ldd	r24, Z+13	; 0x0d
     2fc:	96 85       	ldd	r25, Z+14	; 0x0e
     2fe:	a7 85       	ldd	r26, Z+15	; 0x0f
     300:	b0 89       	ldd	r27, Z+16	; 0x10
     302:	9c 01       	movw	r18, r24
     304:	ad 01       	movw	r20, r26
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	80 e8       	ldi	r24, 0x80	; 128
     30c:	9f e3       	ldi	r25, 0x3F	; 63
     30e:	0e 94 46 1c 	call	0x388c	; 0x388c <__subsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	9c 01       	movw	r18, r24
     318:	ad 01       	movw	r20, r26
     31a:	c7 01       	movw	r24, r14
     31c:	b6 01       	movw	r22, r12
     31e:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	6c 01       	movw	r12, r24
     328:	7d 01       	movw	r14, r26
     32a:	8d 81       	ldd	r24, Y+5	; 0x05
     32c:	9e 81       	ldd	r25, Y+6	; 0x06
     32e:	fc 01       	movw	r30, r24
     330:	85 85       	ldd	r24, Z+13	; 0x0d
     332:	96 85       	ldd	r25, Z+14	; 0x0e
     334:	a7 85       	ldd	r26, Z+15	; 0x0f
     336:	b0 89       	ldd	r27, Z+16	; 0x10
     338:	29 81       	ldd	r18, Y+1	; 0x01
     33a:	3a 81       	ldd	r19, Y+2	; 0x02
     33c:	4b 81       	ldd	r20, Y+3	; 0x03
     33e:	5c 81       	ldd	r21, Y+4	; 0x04
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
     348:	dc 01       	movw	r26, r24
     34a:	cb 01       	movw	r24, r22
     34c:	9c 01       	movw	r18, r24
     34e:	ad 01       	movw	r20, r26
     350:	c7 01       	movw	r24, r14
     352:	b6 01       	movw	r22, r12
     354:	0e 94 47 1c 	call	0x388e	; 0x388e <__addsf3>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	2d 81       	ldd	r18, Y+5	; 0x05
     35e:	3e 81       	ldd	r19, Y+6	; 0x06
     360:	f9 01       	movw	r30, r18
     362:	81 83       	std	Z+1, r24	; 0x01
     364:	92 83       	std	Z+2, r25	; 0x02
     366:	a3 83       	std	Z+3, r26	; 0x03
     368:	b4 83       	std	Z+4, r27	; 0x04
     36a:	80 91 46 70 	lds	r24, 0x7046	; 0x807046 <analog_sense_dev+0x4>
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	80 93 46 70 	sts	0x7046, r24	; 0x807046 <analog_sense_dev+0x4>
     374:	80 91 46 70 	lds	r24, 0x7046	; 0x807046 <analog_sense_dev+0x4>
     378:	83 30       	cpi	r24, 0x03	; 3
     37a:	10 f0       	brcs	.+4      	; 0x380 <__EEPROM_REGION_LENGTH__+0x180>
     37c:	10 92 46 70 	sts	0x7046, r1	; 0x807046 <analog_sense_dev+0x4>
     380:	20 91 44 70 	lds	r18, 0x7044	; 0x807044 <analog_sense_dev+0x2>
     384:	30 91 45 70 	lds	r19, 0x7045	; 0x807045 <analog_sense_dev+0x3>
     388:	80 91 46 70 	lds	r24, 0x7046	; 0x807046 <analog_sense_dev+0x4>
     38c:	48 2f       	mov	r20, r24
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	66 e1       	ldi	r22, 0x16	; 22
     392:	64 9f       	mul	r22, r20
     394:	c0 01       	movw	r24, r0
     396:	65 9f       	mul	r22, r21
     398:	90 0d       	add	r25, r0
     39a:	11 24       	eor	r1, r1
     39c:	82 0f       	add	r24, r18
     39e:	93 1f       	adc	r25, r19
     3a0:	fc 01       	movw	r30, r24
     3a2:	85 89       	ldd	r24, Z+21	; 0x15
     3a4:	0e 94 28 12 	call	0x2450	; 0x2450 <ADC_0_start_conversion>
     3a8:	8d 81       	ldd	r24, Y+5	; 0x05
     3aa:	9e 81       	ldd	r25, Y+6	; 0x06
     3ac:	fc 01       	movw	r30, r24
     3ae:	81 89       	ldd	r24, Z+17	; 0x11
     3b0:	92 89       	ldd	r25, Z+18	; 0x12
     3b2:	89 2b       	or	r24, r25
     3b4:	89 f0       	breq	.+34     	; 0x3d8 <__EEPROM_REGION_LENGTH__+0x1d8>
     3b6:	8d 81       	ldd	r24, Y+5	; 0x05
     3b8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ba:	fc 01       	movw	r30, r24
     3bc:	21 89       	ldd	r18, Z+17	; 0x11
     3be:	32 89       	ldd	r19, Z+18	; 0x12
     3c0:	8d 81       	ldd	r24, Y+5	; 0x05
     3c2:	9e 81       	ldd	r25, Y+6	; 0x06
     3c4:	fc 01       	movw	r30, r24
     3c6:	43 89       	ldd	r20, Z+19	; 0x13
     3c8:	54 89       	ldd	r21, Z+20	; 0x14
     3ca:	8d 81       	ldd	r24, Y+5	; 0x05
     3cc:	9e 81       	ldd	r25, Y+6	; 0x06
     3ce:	ba 01       	movw	r22, r20
     3d0:	f9 01       	movw	r30, r18
     3d2:	09 95       	icall
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <__EEPROM_REGION_LENGTH__+0x1d8>
     3d6:	00 00       	nop
     3d8:	66 96       	adiw	r28, 0x16	; 22
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	08 95       	ret

000003f0 <analog_sense_init>:
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	87 e8       	ldi	r24, 0x87	; 135
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 52 12 	call	0x24a4	; 0x24a4 <ADC_0_register_callback>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e7       	ldi	r25, 0x70	; 112
     404:	80 93 42 70 	sts	0x7042, r24	; 0x807042 <analog_sense_dev>
     408:	90 93 43 70 	sts	0x7043, r25	; 0x807043 <analog_sense_dev+0x1>
     40c:	10 92 46 70 	sts	0x7046, r1	; 0x807046 <analog_sense_dev+0x4>
     410:	80 ea       	ldi	r24, 0xA0	; 160
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	23 e0       	ldi	r18, 0x03	; 3
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
     41a:	20 91 44 70 	lds	r18, 0x7044	; 0x807044 <analog_sense_dev+0x2>
     41e:	30 91 45 70 	lds	r19, 0x7045	; 0x807045 <analog_sense_dev+0x3>
     422:	80 91 46 70 	lds	r24, 0x7046	; 0x807046 <analog_sense_dev+0x4>
     426:	48 2f       	mov	r20, r24
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	66 e1       	ldi	r22, 0x16	; 22
     42c:	64 9f       	mul	r22, r20
     42e:	c0 01       	movw	r24, r0
     430:	65 9f       	mul	r22, r21
     432:	90 0d       	add	r25, r0
     434:	11 24       	eor	r1, r1
     436:	82 0f       	add	r24, r18
     438:	93 1f       	adc	r25, r19
     43a:	fc 01       	movw	r30, r24
     43c:	85 89       	ldd	r24, Z+21	; 0x15
     43e:	0e 94 28 12 	call	0x2450	; 0x2450 <ADC_0_start_conversion>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <analog_read_register>:
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	26 97       	sbiw	r28, 0x06	; 6
     456:	cd bf       	out	0x3d, r28	; 61
     458:	de bf       	out	0x3e, r29	; 62
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	9a 83       	std	Y+2, r25	; 0x02
     45e:	6b 83       	std	Y+3, r22	; 0x03
     460:	7c 83       	std	Y+4, r23	; 0x04
     462:	4d 83       	std	Y+5, r20	; 0x05
     464:	5e 83       	std	Y+6, r21	; 0x06
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	9a 81       	ldd	r25, Y+2	; 0x02
     46a:	89 2b       	or	r24, r25
     46c:	71 f0       	breq	.+28     	; 0x48a <analog_read_register+0x3e>
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	2b 81       	ldd	r18, Y+3	; 0x03
     474:	3c 81       	ldd	r19, Y+4	; 0x04
     476:	fc 01       	movw	r30, r24
     478:	21 8b       	std	Z+17, r18	; 0x11
     47a:	32 8b       	std	Z+18, r19	; 0x12
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	2d 81       	ldd	r18, Y+5	; 0x05
     482:	3e 81       	ldd	r19, Y+6	; 0x06
     484:	fc 01       	movw	r30, r24
     486:	23 8b       	std	Z+19, r18	; 0x13
     488:	34 8b       	std	Z+20, r19	; 0x14
     48a:	00 00       	nop
     48c:	26 96       	adiw	r28, 0x06	; 6
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	de bf       	out	0x3e, r29	; 62
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <analog_sense_get_points>:

//=========================================================================================
analog_sense_points_st* analog_sense_get_points(void)
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
	return &analog_sensors;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e7       	ldi	r25, 0x70	; 112
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <PORTC_set_pin_level+0x6>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     4b8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ba:	88 23       	and	r24, r24
     4bc:	a9 f0       	breq	.+42     	; 0x4e8 <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
     4be:	88 e0       	ldi	r24, 0x08	; 8
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	28 e0       	ldi	r18, 0x08	; 8
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	f9 01       	movw	r30, r18
     4c8:	21 81       	ldd	r18, Z+1	; 0x01
     4ca:	62 2f       	mov	r22, r18
     4cc:	29 81       	ldd	r18, Y+1	; 0x01
     4ce:	42 2f       	mov	r20, r18
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <PORTC_set_pin_level+0x32>
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	4a 95       	dec	r20
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <PORTC_set_pin_level+0x2e>
     4e0:	26 2b       	or	r18, r22
     4e2:	fc 01       	movw	r30, r24
     4e4:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
     4e6:	15 c0       	rjmp	.+42     	; 0x512 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     4e8:	88 e0       	ldi	r24, 0x08	; 8
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	28 e0       	ldi	r18, 0x08	; 8
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	f9 01       	movw	r30, r18
     4f2:	21 81       	ldd	r18, Z+1	; 0x01
     4f4:	62 2f       	mov	r22, r18
     4f6:	29 81       	ldd	r18, Y+1	; 0x01
     4f8:	42 2f       	mov	r20, r18
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	02 c0       	rjmp	.+4      	; 0x506 <PORTC_set_pin_level+0x5c>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	4a 95       	dec	r20
     508:	e2 f7       	brpl	.-8      	; 0x502 <PORTC_set_pin_level+0x58>
     50a:	20 95       	com	r18
     50c:	26 23       	and	r18, r22
     50e:	fc 01       	movw	r30, r24
     510:	21 83       	std	Z+1, r18	; 0x01
	}
}
     512:	00 00       	nop
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <PORTC_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	1f 92       	push	r1
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	89 83       	std	Y+1, r24	; 0x01
	return VPORTC.IN & (1 << pin);
     52a:	88 e0       	ldi	r24, 0x08	; 8
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	28 2f       	mov	r18, r24
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	48 2f       	mov	r20, r24
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <PORTC_get_pin_level+0x28>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	4a 95       	dec	r20
     548:	e2 f7       	brpl	.-8      	; 0x542 <PORTC_get_pin_level+0x24>
     54a:	82 23       	and	r24, r18
     54c:	93 23       	and	r25, r19
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	89 2b       	or	r24, r25
     552:	09 f4       	brne	.+2      	; 0x556 <PORTC_get_pin_level+0x38>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	82 2f       	mov	r24, r18
}
     558:	0f 90       	pop	r0
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <LOAD_SWITCH_EN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LOAD_SWITCH_EN_set_level(const bool level)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	1f 92       	push	r1
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(0, level);
     56c:	69 81       	ldd	r22, Y+1	; 0x01
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 55 02 	call	0x4aa	; 0x4aa <PORTC_set_pin_level>
}
     574:	00 00       	nop
     576:	0f 90       	pop	r0
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <LOAD_SWITCH_EN_get_level>:
 * \brief Get level on LOAD_SWITCH_EN
 *
 * Reads the level on a pin
 */
static inline bool LOAD_SWITCH_EN_get_level()
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
	return PORTC_get_pin_level(0);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 8f 02 	call	0x51e	; 0x51e <PORTC_get_pin_level>
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <register_timed_task>:
	.versions = {.version = SOFTWARE_VERSION, .subversion = SOFTWARE_SUBVERSION,},
};	

//=========================================================================================
void register_timed_task(system_timed_task_st* task, uint32_t period, timed_task_callback_t cb, void* context)
{
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	2a 97       	sbiw	r28, 0x0a	; 10
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	9a 83       	std	Y+2, r25	; 0x02
     5a8:	4b 83       	std	Y+3, r20	; 0x03
     5aa:	5c 83       	std	Y+4, r21	; 0x04
     5ac:	6d 83       	std	Y+5, r22	; 0x05
     5ae:	7e 83       	std	Y+6, r23	; 0x06
     5b0:	2f 83       	std	Y+7, r18	; 0x07
     5b2:	38 87       	std	Y+8, r19	; 0x08
     5b4:	09 87       	std	Y+9, r16	; 0x09
     5b6:	1a 87       	std	Y+10, r17	; 0x0a
	task->cb = cb;
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	2f 81       	ldd	r18, Y+7	; 0x07
     5be:	38 85       	ldd	r19, Y+8	; 0x08
     5c0:	fc 01       	movw	r30, r24
     5c2:	21 87       	std	Z+9, r18	; 0x09
     5c4:	32 87       	std	Z+10, r19	; 0x0a
	task->context = context;
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	29 85       	ldd	r18, Y+9	; 0x09
     5cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     5ce:	fc 01       	movw	r30, r24
     5d0:	23 87       	std	Z+11, r18	; 0x0b
     5d2:	34 87       	std	Z+12, r19	; 0x0c
	task->trigger = false;
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	fc 01       	movw	r30, r24
     5da:	10 86       	std	Z+8, r1	; 0x08
	task->cur_counter = 0;
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	fc 01       	movw	r30, r24
     5e2:	14 82       	std	Z+4, r1	; 0x04
     5e4:	15 82       	std	Z+5, r1	; 0x05
     5e6:	16 82       	std	Z+6, r1	; 0x06
     5e8:	17 82       	std	Z+7, r1	; 0x07
	task->period = period;
     5ea:	29 81       	ldd	r18, Y+1	; 0x01
     5ec:	3a 81       	ldd	r19, Y+2	; 0x02
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	ad 81       	ldd	r26, Y+5	; 0x05
     5f4:	be 81       	ldd	r27, Y+6	; 0x06
     5f6:	f9 01       	movw	r30, r18
     5f8:	80 83       	st	Z, r24
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	a2 83       	std	Z+2, r26	; 0x02
     5fe:	b3 83       	std	Z+3, r27	; 0x03
}
     600:	00 00       	nop
     602:	2a 96       	adiw	r28, 0x0a	; 10
     604:	cd bf       	out	0x3d, r28	; 61
     606:	de bf       	out	0x3e, r29	; 62
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	08 95       	ret

00000612 <timed_task_tick>:

//=========================================================================================
void timed_task_tick(system_timed_task_st* task)
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <timed_task_tick+0x6>
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	89 83       	std	Y+1, r24	; 0x01
     61e:	9a 83       	std	Y+2, r25	; 0x02
	task->cur_counter ++;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	fc 01       	movw	r30, r24
     626:	84 81       	ldd	r24, Z+4	; 0x04
     628:	95 81       	ldd	r25, Z+5	; 0x05
     62a:	a6 81       	ldd	r26, Z+6	; 0x06
     62c:	b7 81       	ldd	r27, Z+7	; 0x07
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	a1 1d       	adc	r26, r1
     632:	b1 1d       	adc	r27, r1
     634:	29 81       	ldd	r18, Y+1	; 0x01
     636:	3a 81       	ldd	r19, Y+2	; 0x02
     638:	f9 01       	movw	r30, r18
     63a:	84 83       	std	Z+4, r24	; 0x04
     63c:	95 83       	std	Z+5, r25	; 0x05
     63e:	a6 83       	std	Z+6, r26	; 0x06
     640:	b7 83       	std	Z+7, r27	; 0x07
	if (task->cur_counter >= task->period)
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	fc 01       	movw	r30, r24
     648:	24 81       	ldd	r18, Z+4	; 0x04
     64a:	35 81       	ldd	r19, Z+5	; 0x05
     64c:	46 81       	ldd	r20, Z+6	; 0x06
     64e:	57 81       	ldd	r21, Z+7	; 0x07
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	fc 01       	movw	r30, r24
     656:	80 81       	ld	r24, Z
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	a2 81       	ldd	r26, Z+2	; 0x02
     65c:	b3 81       	ldd	r27, Z+3	; 0x03
     65e:	28 17       	cp	r18, r24
     660:	39 07       	cpc	r19, r25
     662:	4a 07       	cpc	r20, r26
     664:	5b 07       	cpc	r21, r27
     666:	60 f0       	brcs	.+24     	; 0x680 <timed_task_tick+0x6e>
	{
		task->cur_counter = 0;
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	fc 01       	movw	r30, r24
     66e:	14 82       	std	Z+4, r1	; 0x04
     670:	15 82       	std	Z+5, r1	; 0x05
     672:	16 82       	std	Z+6, r1	; 0x06
     674:	17 82       	std	Z+7, r1	; 0x07
		task->trigger = true;
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	fc 01       	movw	r30, r24
     67e:	20 87       	std	Z+8, r18	; 0x08
	}
}
     680:	00 00       	nop
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <timed_task_fetch>:

//=========================================================================================
void timed_task_fetch(system_timed_task_st* task)
{
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <timed_task_fetch+0x6>
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	89 83       	std	Y+1, r24	; 0x01
     698:	9a 83       	std	Y+2, r25	; 0x02
	if (task->trigger)
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	fc 01       	movw	r30, r24
     6a0:	80 85       	ldd	r24, Z+8	; 0x08
     6a2:	88 23       	and	r24, r24
     6a4:	b9 f0       	breq	.+46     	; 0x6d4 <timed_task_fetch+0x48>
	{
		task->trigger = false;
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	9a 81       	ldd	r25, Y+2	; 0x02
     6aa:	fc 01       	movw	r30, r24
     6ac:	10 86       	std	Z+8, r1	; 0x08
		if (task->cb) task->cb(task->context);
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	fc 01       	movw	r30, r24
     6b4:	81 85       	ldd	r24, Z+9	; 0x09
     6b6:	92 85       	ldd	r25, Z+10	; 0x0a
     6b8:	89 2b       	or	r24, r25
     6ba:	61 f0       	breq	.+24     	; 0x6d4 <timed_task_fetch+0x48>
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	fc 01       	movw	r30, r24
     6c2:	21 85       	ldd	r18, Z+9	; 0x09
     6c4:	32 85       	ldd	r19, Z+10	; 0x0a
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	fc 01       	movw	r30, r24
     6cc:	83 85       	ldd	r24, Z+11	; 0x0b
     6ce:	94 85       	ldd	r25, Z+12	; 0x0c
     6d0:	f9 01       	movw	r30, r18
     6d2:	09 95       	icall
	}
}
     6d4:	00 00       	nop
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <debug_if_callback>:

//=========================================================================================
void debug_if_callback(OPCODE_en opcode, void* data, uint32_t len, void* context)
{
     6e0:	af 92       	push	r10
     6e2:	bf 92       	push	r11
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	2d 97       	sbiw	r28, 0x0d	; 13
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	8d 83       	std	Y+5, r24	; 0x05
     700:	6e 83       	std	Y+6, r22	; 0x06
     702:	7f 83       	std	Y+7, r23	; 0x07
     704:	28 87       	std	Y+8, r18	; 0x08
     706:	39 87       	std	Y+9, r19	; 0x09
     708:	4a 87       	std	Y+10, r20	; 0x0a
     70a:	5b 87       	std	Y+11, r21	; 0x0b
     70c:	0c 87       	std	Y+12, r16	; 0x0c
     70e:	1d 87       	std	Y+13, r17	; 0x0d
	app_st* s = (app_st*)context;
     710:	8c 85       	ldd	r24, Y+12	; 0x0c
     712:	9d 85       	ldd	r25, Y+13	; 0x0d
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	9a 83       	std	Y+2, r25	; 0x02
	
	switch(opcode)
     718:	8d 81       	ldd	r24, Y+5	; 0x05
     71a:	88 2f       	mov	r24, r24
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	8b 30       	cpi	r24, 0x0B	; 11
     720:	91 05       	cpc	r25, r1
     722:	19 f0       	breq	.+6      	; 0x72a <debug_if_callback+0x4a>
     724:	0d 97       	sbiw	r24, 0x0d	; 13
     726:	61 f0       	breq	.+24     	; 0x740 <debug_if_callback+0x60>
			LOAD_SWITCH_EN_set_level(!s->load_switch_on);
		}
		break;

		//---------------------------------------------------------------------
		default: break;
     728:	85 c0       	rjmp	.+266    	; 0x834 <debug_if_callback+0x154>
	switch(opcode)
	{
		//---------------------------------------------------------------------
		case OPCODE_VERSION:
		{
			debug_if_send_message(OPCODE_VERSION, (uint8_t*)&s->versions, sizeof(versions_st));
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	9a 81       	ldd	r25, Y+2	; 0x02
     72e:	26 e1       	ldi	r18, 0x16	; 22
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	bc 01       	movw	r22, r24
     738:	8b e0       	ldi	r24, 0x0B	; 11
     73a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debug_if_send_message>
		}
		break;
     73e:	7a c0       	rjmp	.+244    	; 0x834 <debug_if_callback+0x154>
		
		// commands
		//---------------------------------------------------------------------
		case OPCODE_COMMAND:
		{
			command_st *msg = (command_st*)data;
     740:	8e 81       	ldd	r24, Y+6	; 0x06
     742:	9f 81       	ldd	r25, Y+7	; 0x07
     744:	8b 83       	std	Y+3, r24	; 0x03
     746:	9c 83       	std	Y+4, r25	; 0x04
			
			// led states	
			if (msg->led0_state != 255) leds_set_blink(&s->leds, led0, msg->led0_state*10, 1, 0);
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	fc 01       	movw	r30, r24
     74e:	81 81       	ldd	r24, Z+1	; 0x01
     750:	8f 3f       	cpi	r24, 0xFF	; 255
     752:	21 f1       	breq	.+72     	; 0x79c <debug_if_callback+0xbc>
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	fc 01       	movw	r30, r24
     75a:	81 81       	ldd	r24, Z+1	; 0x01
     75c:	88 2f       	mov	r24, r24
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	9c 01       	movw	r18, r24
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	22 0f       	add	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	82 0f       	add	r24, r18
     770:	93 1f       	adc	r25, r19
     772:	09 2e       	mov	r0, r25
     774:	00 0c       	add	r0, r0
     776:	aa 0b       	sbc	r26, r26
     778:	bb 0b       	sbc	r27, r27
     77a:	29 81       	ldd	r18, Y+1	; 0x01
     77c:	3a 81       	ldd	r19, Y+2	; 0x02
     77e:	f9 01       	movw	r30, r18
     780:	7b 96       	adiw	r30, 0x1b	; 27
     782:	a1 2c       	mov	r10, r1
     784:	b1 2c       	mov	r11, r1
     786:	65 01       	movw	r12, r10
     788:	e1 2c       	mov	r14, r1
     78a:	f1 2c       	mov	r15, r1
     78c:	87 01       	movw	r16, r14
     78e:	e3 94       	inc	r14
     790:	9c 01       	movw	r18, r24
     792:	ad 01       	movw	r20, r26
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	cf 01       	movw	r24, r30
     798:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <leds_set_blink>
			if (msg->led1_state != 255) leds_set_blink(&s->leds, led0, msg->led1_state*10, 1, 0);
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	fc 01       	movw	r30, r24
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	8f 3f       	cpi	r24, 0xFF	; 255
     7a6:	21 f1       	breq	.+72     	; 0x7f0 <debug_if_callback+0x110>
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	9c 81       	ldd	r25, Y+4	; 0x04
     7ac:	fc 01       	movw	r30, r24
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	88 2f       	mov	r24, r24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	9c 01       	movw	r18, r24
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	82 0f       	add	r24, r18
     7c4:	93 1f       	adc	r25, r19
     7c6:	09 2e       	mov	r0, r25
     7c8:	00 0c       	add	r0, r0
     7ca:	aa 0b       	sbc	r26, r26
     7cc:	bb 0b       	sbc	r27, r27
     7ce:	29 81       	ldd	r18, Y+1	; 0x01
     7d0:	3a 81       	ldd	r19, Y+2	; 0x02
     7d2:	f9 01       	movw	r30, r18
     7d4:	7b 96       	adiw	r30, 0x1b	; 27
     7d6:	a1 2c       	mov	r10, r1
     7d8:	b1 2c       	mov	r11, r1
     7da:	65 01       	movw	r12, r10
     7dc:	e1 2c       	mov	r14, r1
     7de:	f1 2c       	mov	r15, r1
     7e0:	87 01       	movw	r16, r14
     7e2:	e3 94       	inc	r14
     7e4:	9c 01       	movw	r18, r24
     7e6:	ad 01       	movw	r20, r26
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	cf 01       	movw	r24, r30
     7ec:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <leds_set_blink>
			
			// load switch with negative logic
			s->load_switch_on = (bool)(msg->load_switch_state == 1);
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	09 f0       	breq	.+2      	; 0x800 <debug_if_callback+0x120>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	81 5a       	subi	r24, 0xA1	; 161
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	fc 01       	movw	r30, r24
     80a:	20 83       	st	Z, r18
			LOAD_SWITCH_EN_set_level(!s->load_switch_on);
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	81 5a       	subi	r24, 0xA1	; 161
     812:	9f 4f       	sbci	r25, 0xFF	; 255
     814:	fc 01       	movw	r30, r24
     816:	80 81       	ld	r24, Z
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	89 2b       	or	r24, r25
     820:	09 f4       	brne	.+2      	; 0x824 <debug_if_callback+0x144>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	82 27       	eor	r24, r18
     828:	88 2f       	mov	r24, r24
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	81 70       	andi	r24, 0x01	; 1
     82e:	0e 94 b0 02 	call	0x560	; 0x560 <LOAD_SWITCH_EN_set_level>
		}
		break;
     832:	00 00       	nop

		//---------------------------------------------------------------------
		default: break;
	}
}
     834:	00 00       	nop
     836:	2d 96       	adiw	r28, 0x0d	; 13
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	08 95       	ret

00000852 <load_switch_fault_event>:

//=========================================================================================
void load_switch_fault_event(void *pin, bool new_val, uint8_t details, void* context)
{
     852:	0f 93       	push	r16
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	29 97       	sbiw	r28, 0x09	; 9
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	de bf       	out	0x3e, r29	; 62
     862:	8c 83       	std	Y+4, r24	; 0x04
     864:	9d 83       	std	Y+5, r25	; 0x05
     866:	6e 83       	std	Y+6, r22	; 0x06
     868:	4f 83       	std	Y+7, r20	; 0x07
     86a:	28 87       	std	Y+8, r18	; 0x08
     86c:	39 87       	std	Y+9, r19	; 0x09
	app_st* s = (app_st*)context;
     86e:	88 85       	ldd	r24, Y+8	; 0x08
     870:	99 85       	ldd	r25, Y+9	; 0x09
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	9a 83       	std	Y+2, r25	; 0x02
	// negative logic on fault
	bool fault_state = (new_val == 0);
     876:	8e 81       	ldd	r24, Y+6	; 0x06
     878:	88 2f       	mov	r24, r24
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	21 e0       	ldi	r18, 0x01	; 1
     87e:	89 2b       	or	r24, r25
     880:	09 f4       	brne	.+2      	; 0x884 <load_switch_fault_event+0x32>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	82 27       	eor	r24, r18
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	8b 83       	std	Y+3, r24	; 0x03
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	81 70       	andi	r24, 0x01	; 1
     892:	8b 83       	std	Y+3, r24	; 0x03
	
	s->state_data.load_sw_fault_state = fault_state;
     894:	2b 81       	ldd	r18, Y+3	; 0x03
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	8f 58       	subi	r24, 0x8F	; 143
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
	if (fault_state)
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	88 23       	and	r24, r24
     8a6:	19 f0       	breq	.+6      	; 0x8ae <load_switch_fault_event+0x5c>
	{
		// turn off
		LOAD_SWITCH_EN_set_level(true);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 b0 02 	call	0x560	; 0x560 <LOAD_SWITCH_EN_set_level>
	}
	i2c_if_update_reg(&s->i2c, I2C_REG_FAULT_STATE, (int32_t)(s->state_data.load_sw_fault_state), I2C_IF_UPDATE_SRC_APP);
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
     8b2:	8f 58       	subi	r24, 0x8F	; 143
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	88 2f       	mov	r24, r24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a0 e0       	ldi	r26, 0x00	; 0
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	29 81       	ldd	r18, Y+1	; 0x01
     8c4:	3a 81       	ldd	r19, Y+2	; 0x02
     8c6:	f9 01       	movw	r30, r18
     8c8:	f8 96       	adiw	r30, 0x38	; 56
     8ca:	00 e0       	ldi	r16, 0x00	; 0
     8cc:	9c 01       	movw	r18, r24
     8ce:	ad 01       	movw	r20, r26
     8d0:	64 e0       	ldi	r22, 0x04	; 4
     8d2:	cf 01       	movw	r24, r30
     8d4:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
}
     8d8:	00 00       	nop
     8da:	29 96       	adiw	r28, 0x09	; 9
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <send_sensor_report_handler>:

//=========================================================================================
void send_sensor_report_handler(void* context)
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <send_sensor_report_handler+0x6>
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <send_sensor_report_handler+0x8>
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
	app_st* s = (app_st*)context;
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	9a 83       	std	Y+2, r25	; 0x02

	// send the report
	debug_if_send_message(OPCODE_STATE_REPORT, (uint8_t*)&s->state_data, sizeof(state_st));
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	80 5a       	subi	r24, 0xA0	; 160
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	22 e1       	ldi	r18, 0x12	; 18
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	bc 01       	movw	r22, r24
     912:	8c e0       	ldi	r24, 0x0C	; 12
     914:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debug_if_send_message>
}
     918:	00 00       	nop
     91a:	24 96       	adiw	r28, 0x04	; 4
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	de bf       	out	0x3e, r29	; 62
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <timer_callback>:

//=========================================================================================
void timer_callback(uint32_t time, void* context)
{
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	28 97       	sbiw	r28, 0x08	; 8
     930:	cd bf       	out	0x3d, r28	; 61
     932:	de bf       	out	0x3e, r29	; 62
     934:	6b 83       	std	Y+3, r22	; 0x03
     936:	7c 83       	std	Y+4, r23	; 0x04
     938:	8d 83       	std	Y+5, r24	; 0x05
     93a:	9e 83       	std	Y+6, r25	; 0x06
     93c:	4f 83       	std	Y+7, r20	; 0x07
     93e:	58 87       	std	Y+8, r21	; 0x08
	app_st* s = (app_st*)context;
     940:	8f 81       	ldd	r24, Y+7	; 0x07
     942:	98 85       	ldd	r25, Y+8	; 0x08
     944:	89 83       	std	Y+1, r24	; 0x01
     946:	9a 83       	std	Y+2, r25	; 0x02
	
	// tick the leds
	leds_tick(&s->leds);
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	4b 96       	adiw	r24, 0x1b	; 27
     94e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <leds_tick>
	
	// scheduling
	timed_task_tick(&s->send_report_task);
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	8e 58       	subi	r24, 0x8E	; 142
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	0e 94 09 03 	call	0x612	; 0x612 <timed_task_tick>
	
	//WDT_0_init();
}
     95e:	00 00       	nop
     960:	28 96       	adiw	r28, 0x08	; 8
     962:	cd bf       	out	0x3d, r28	; 61
     964:	de bf       	out	0x3e, r29	; 62
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <temperature_callback>:

//=========================================================================================
void temperature_callback(void* p, void* context)
{
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	28 97       	sbiw	r28, 0x08	; 8
     976:	cd bf       	out	0x3d, r28	; 61
     978:	de bf       	out	0x3e, r29	; 62
     97a:	8d 83       	std	Y+5, r24	; 0x05
     97c:	9e 83       	std	Y+6, r25	; 0x06
     97e:	6f 83       	std	Y+7, r22	; 0x07
     980:	78 87       	std	Y+8, r23	; 0x08
	analog_value_st* point = (analog_value_st*)p;
     982:	8d 81       	ldd	r24, Y+5	; 0x05
     984:	9e 81       	ldd	r25, Y+6	; 0x06
     986:	89 83       	std	Y+1, r24	; 0x01
     988:	9a 83       	std	Y+2, r25	; 0x02
	app_st* s = (app_st*)context;
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	8b 83       	std	Y+3, r24	; 0x03
     990:	9c 83       	std	Y+4, r25	; 0x04
	s->state_data.sys_temp = point->value;
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	fc 01       	movw	r30, r24
     998:	81 81       	ldd	r24, Z+1	; 0x01
     99a:	92 81       	ldd	r25, Z+2	; 0x02
     99c:	a3 81       	ldd	r26, Z+3	; 0x03
     99e:	b4 81       	ldd	r27, Z+4	; 0x04
     9a0:	2b 81       	ldd	r18, Y+3	; 0x03
     9a2:	3c 81       	ldd	r19, Y+4	; 0x04
     9a4:	20 5a       	subi	r18, 0xA0	; 160
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	f9 01       	movw	r30, r18
     9aa:	80 83       	st	Z, r24
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	a2 83       	std	Z+2, r26	; 0x02
     9b0:	b3 83       	std	Z+3, r27	; 0x03
}
     9b2:	00 00       	nop
     9b4:	28 96       	adiw	r28, 0x08	; 8
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <voltage_callback>:

//=========================================================================================
void voltage_callback(void* p, void* context)
{
     9c0:	0f 93       	push	r16
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	28 97       	sbiw	r28, 0x08	; 8
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	8d 83       	std	Y+5, r24	; 0x05
     9d2:	9e 83       	std	Y+6, r25	; 0x06
     9d4:	6f 83       	std	Y+7, r22	; 0x07
     9d6:	78 87       	std	Y+8, r23	; 0x08
	analog_value_st* point = (analog_value_st*)p;
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	9e 81       	ldd	r25, Y+6	; 0x06
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	9a 83       	std	Y+2, r25	; 0x02
	app_st* s = (app_st*)context;
     9e0:	8f 81       	ldd	r24, Y+7	; 0x07
     9e2:	98 85       	ldd	r25, Y+8	; 0x08
     9e4:	8b 83       	std	Y+3, r24	; 0x03
     9e6:	9c 83       	std	Y+4, r25	; 0x04
	s->state_data.voltage = point->value;
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	9a 81       	ldd	r25, Y+2	; 0x02
     9ec:	fc 01       	movw	r30, r24
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	92 81       	ldd	r25, Z+2	; 0x02
     9f2:	a3 81       	ldd	r26, Z+3	; 0x03
     9f4:	b4 81       	ldd	r27, Z+4	; 0x04
     9f6:	2b 81       	ldd	r18, Y+3	; 0x03
     9f8:	3c 81       	ldd	r19, Y+4	; 0x04
     9fa:	2c 59       	subi	r18, 0x9C	; 156
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	f9 01       	movw	r30, r18
     a00:	80 83       	st	Z, r24
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	a2 83       	std	Z+2, r26	; 0x02
     a06:	b3 83       	std	Z+3, r27	; 0x03
	s->state_data.power = s->state_data.voltage * s->state_data.current;
     a08:	8b 81       	ldd	r24, Y+3	; 0x03
     a0a:	9c 81       	ldd	r25, Y+4	; 0x04
     a0c:	8c 59       	subi	r24, 0x9C	; 156
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	a2 81       	ldd	r26, Z+2	; 0x02
     a18:	b3 81       	ldd	r27, Z+3	; 0x03
     a1a:	2b 81       	ldd	r18, Y+3	; 0x03
     a1c:	3c 81       	ldd	r19, Y+4	; 0x04
     a1e:	28 59       	subi	r18, 0x98	; 152
     a20:	3f 4f       	sbci	r19, 0xFF	; 255
     a22:	f9 01       	movw	r30, r18
     a24:	20 81       	ld	r18, Z
     a26:	31 81       	ldd	r19, Z+1	; 0x01
     a28:	42 81       	ldd	r20, Z+2	; 0x02
     a2a:	53 81       	ldd	r21, Z+3	; 0x03
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	2b 81       	ldd	r18, Y+3	; 0x03
     a3a:	3c 81       	ldd	r19, Y+4	; 0x04
     a3c:	24 59       	subi	r18, 0x94	; 148
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	f9 01       	movw	r30, r18
     a42:	80 83       	st	Z, r24
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	a2 83       	std	Z+2, r26	; 0x02
     a48:	b3 83       	std	Z+3, r27	; 0x03
	i2c_if_update_reg(&s->i2c, I2C_REG_VOLTAGE, (int32_t)(s->state_data.voltage), I2C_IF_UPDATE_SRC_APP);
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	9c 81       	ldd	r25, Y+4	; 0x04
     a4e:	8c 59       	subi	r24, 0x9C	; 156
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	fc 01       	movw	r30, r24
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	a2 81       	ldd	r26, Z+2	; 0x02
     a5a:	b3 81       	ldd	r27, Z+3	; 0x03
     a5c:	bc 01       	movw	r22, r24
     a5e:	cd 01       	movw	r24, r26
     a60:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	c8 96       	adiw	r24, 0x38	; 56
     a6e:	00 e0       	ldi	r16, 0x00	; 0
     a70:	66 e0       	ldi	r22, 0x06	; 6
     a72:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
	i2c_if_update_reg(&s->i2c, I2C_REG_POWER, (int32_t)(s->state_data.power), I2C_IF_UPDATE_SRC_APP);
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	9c 81       	ldd	r25, Y+4	; 0x04
     a7a:	84 59       	subi	r24, 0x94	; 148
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	fc 01       	movw	r30, r24
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	a2 81       	ldd	r26, Z+2	; 0x02
     a86:	b3 81       	ldd	r27, Z+3	; 0x03
     a88:	bc 01       	movw	r22, r24
     a8a:	cd 01       	movw	r24, r26
     a8c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	c8 96       	adiw	r24, 0x38	; 56
     a9a:	00 e0       	ldi	r16, 0x00	; 0
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
	
	// if trying to push 5V but under-voltage
	if (s->state_data.voltage < 3400.0f && s->state_data.load_sw_state)
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	8c 59       	subi	r24, 0x9C	; 156
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	a2 81       	ldd	r26, Z+2	; 0x02
     ab2:	b3 81       	ldd	r27, Z+3	; 0x03
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e8       	ldi	r19, 0x80	; 128
     ab8:	44 e5       	ldi	r20, 0x54	; 84
     aba:	55 e4       	ldi	r21, 0x45	; 69
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__cmpsf2>
		// turn off
		LOAD_SWITCH_EN_set_level(true);
		i2c_if_update_reg(&s->i2c, I2C_REG_LOAD_SW_STATE, (int32_t)(s->state_data.load_sw_state), I2C_IF_UPDATE_SRC_APP);
		i2c_if_update_reg(&s->i2c, I2C_REG_FAULT_STATE, (int32_t)(s->state_data.load_sw_fault_state), I2C_IF_UPDATE_SRC_APP);*/
	}
}
     ac4:	00 00       	nop
     ac6:	28 96       	adiw	r28, 0x08	; 8
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <current_callback>:

//=========================================================================================
void current_callback(void* p, void* context)
{
     ad4:	0f 93       	push	r16
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	28 97       	sbiw	r28, 0x08	; 8
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	8d 83       	std	Y+5, r24	; 0x05
     ae6:	9e 83       	std	Y+6, r25	; 0x06
     ae8:	6f 83       	std	Y+7, r22	; 0x07
     aea:	78 87       	std	Y+8, r23	; 0x08
	analog_value_st* point = (analog_value_st*)p;
     aec:	8d 81       	ldd	r24, Y+5	; 0x05
     aee:	9e 81       	ldd	r25, Y+6	; 0x06
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	9a 83       	std	Y+2, r25	; 0x02
	app_st* s = (app_st*)context;
     af4:	8f 81       	ldd	r24, Y+7	; 0x07
     af6:	98 85       	ldd	r25, Y+8	; 0x08
     af8:	8b 83       	std	Y+3, r24	; 0x03
     afa:	9c 83       	std	Y+4, r25	; 0x04
	s->state_data.current = point->value;
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	fc 01       	movw	r30, r24
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	92 81       	ldd	r25, Z+2	; 0x02
     b06:	a3 81       	ldd	r26, Z+3	; 0x03
     b08:	b4 81       	ldd	r27, Z+4	; 0x04
     b0a:	2b 81       	ldd	r18, Y+3	; 0x03
     b0c:	3c 81       	ldd	r19, Y+4	; 0x04
     b0e:	28 59       	subi	r18, 0x98	; 152
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	f9 01       	movw	r30, r18
     b14:	80 83       	st	Z, r24
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	a2 83       	std	Z+2, r26	; 0x02
     b1a:	b3 83       	std	Z+3, r27	; 0x03
	s->state_data.power = s->state_data.voltage * s->state_data.current;
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	8c 59       	subi	r24, 0x9C	; 156
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	a2 81       	ldd	r26, Z+2	; 0x02
     b2c:	b3 81       	ldd	r27, Z+3	; 0x03
     b2e:	2b 81       	ldd	r18, Y+3	; 0x03
     b30:	3c 81       	ldd	r19, Y+4	; 0x04
     b32:	28 59       	subi	r18, 0x98	; 152
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	31 81       	ldd	r19, Z+1	; 0x01
     b3c:	42 81       	ldd	r20, Z+2	; 0x02
     b3e:	53 81       	ldd	r21, Z+3	; 0x03
     b40:	bc 01       	movw	r22, r24
     b42:	cd 01       	movw	r24, r26
     b44:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	2b 81       	ldd	r18, Y+3	; 0x03
     b4e:	3c 81       	ldd	r19, Y+4	; 0x04
     b50:	24 59       	subi	r18, 0x94	; 148
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	f9 01       	movw	r30, r18
     b56:	80 83       	st	Z, r24
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	a2 83       	std	Z+2, r26	; 0x02
     b5c:	b3 83       	std	Z+3, r27	; 0x03
	i2c_if_update_reg(&s->i2c, I2C_REG_CURRENT, (int32_t)(s->state_data.current), I2C_IF_UPDATE_SRC_APP);
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	88 59       	subi	r24, 0x98	; 152
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	fc 01       	movw	r30, r24
     b68:	80 81       	ld	r24, Z
     b6a:	91 81       	ldd	r25, Z+1	; 0x01
     b6c:	a2 81       	ldd	r26, Z+2	; 0x02
     b6e:	b3 81       	ldd	r27, Z+3	; 0x03
     b70:	bc 01       	movw	r22, r24
     b72:	cd 01       	movw	r24, r26
     b74:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	c8 96       	adiw	r24, 0x38	; 56
     b82:	00 e0       	ldi	r16, 0x00	; 0
     b84:	65 e0       	ldi	r22, 0x05	; 5
     b86:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
	i2c_if_update_reg(&s->i2c, I2C_REG_POWER, (int32_t)(s->state_data.power), I2C_IF_UPDATE_SRC_APP);
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	84 59       	subi	r24, 0x94	; 148
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	fc 01       	movw	r30, r24
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	a2 81       	ldd	r26, Z+2	; 0x02
     b9a:	b3 81       	ldd	r27, Z+3	; 0x03
     b9c:	bc 01       	movw	r22, r24
     b9e:	cd 01       	movw	r24, r26
     ba0:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__fixsfsi>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	c8 96       	adiw	r24, 0x38	; 56
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
	
	// if there is a short
	if (s->state_data.current > 500.0f)
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	88 59       	subi	r24, 0x98	; 152
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	a2 81       	ldd	r26, Z+2	; 0x02
     bc6:	b3 81       	ldd	r27, Z+3	; 0x03
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4a ef       	ldi	r20, 0xFA	; 250
     bce:	53 e4       	ldi	r21, 0x43	; 67
     bd0:	bc 01       	movw	r22, r24
     bd2:	cd 01       	movw	r24, r26
     bd4:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__gesf2>
     bd8:	18 16       	cp	r1, r24
     bda:	0c f0       	brlt	.+2      	; 0xbde <current_callback+0x10a>
		// turn off
		LOAD_SWITCH_EN_set_level(true);
		i2c_if_update_reg(&s->i2c, I2C_REG_LOAD_SW_STATE, (int32_t)(s->state_data.load_sw_state), I2C_IF_UPDATE_SRC_APP);
		i2c_if_update_reg(&s->i2c, I2C_REG_FAULT_STATE, (int32_t)(s->state_data.load_sw_fault_state), I2C_IF_UPDATE_SRC_APP);
	}
}
     bdc:	3a c0       	rjmp	.+116    	; 0xc52 <current_callback+0x17e>
	i2c_if_update_reg(&s->i2c, I2C_REG_POWER, (int32_t)(s->state_data.power), I2C_IF_UPDATE_SRC_APP);
	
	// if there is a short
	if (s->state_data.current > 500.0f)
	{
		s->state_data.load_sw_state = false;
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	80 59       	subi	r24, 0x90	; 144
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	fc 01       	movw	r30, r24
     be8:	10 82       	st	Z, r1
		s->state_data.load_sw_fault_state = true;
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	8f 58       	subi	r24, 0x8F	; 143
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	fc 01       	movw	r30, r24
     bf6:	20 83       	st	Z, r18
		// turn off
		LOAD_SWITCH_EN_set_level(true);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 b0 02 	call	0x560	; 0x560 <LOAD_SWITCH_EN_set_level>
		i2c_if_update_reg(&s->i2c, I2C_REG_LOAD_SW_STATE, (int32_t)(s->state_data.load_sw_state), I2C_IF_UPDATE_SRC_APP);
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	80 59       	subi	r24, 0x90	; 144
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	80 81       	ld	r24, Z
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	2b 81       	ldd	r18, Y+3	; 0x03
     c14:	3c 81       	ldd	r19, Y+4	; 0x04
     c16:	f9 01       	movw	r30, r18
     c18:	f8 96       	adiw	r30, 0x38	; 56
     c1a:	00 e0       	ldi	r16, 0x00	; 0
     c1c:	9c 01       	movw	r18, r24
     c1e:	ad 01       	movw	r20, r26
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	cf 01       	movw	r24, r30
     c24:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
		i2c_if_update_reg(&s->i2c, I2C_REG_FAULT_STATE, (int32_t)(s->state_data.load_sw_fault_state), I2C_IF_UPDATE_SRC_APP);
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	8f 58       	subi	r24, 0x8F	; 143
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	2b 81       	ldd	r18, Y+3	; 0x03
     c3e:	3c 81       	ldd	r19, Y+4	; 0x04
     c40:	f9 01       	movw	r30, r18
     c42:	f8 96       	adiw	r30, 0x38	; 56
     c44:	00 e0       	ldi	r16, 0x00	; 0
     c46:	9c 01       	movw	r18, r24
     c48:	ad 01       	movw	r20, r26
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	cf 01       	movw	r24, r30
     c4e:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
	}
}
     c52:	00 00       	nop
     c54:	28 96       	adiw	r28, 0x08	; 8
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <i2c_if_error_callback>:

//=========================================================================================
void i2c_if_error_callback(I2C_IF_ERROR_en err, void* context)
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	00 d0       	rcall	.+0      	; 0xc68 <i2c_if_error_callback+0x6>
     c68:	1f 92       	push	r1
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	6a 83       	std	Y+2, r22	; 0x02
     c72:	7b 83       	std	Y+3, r23	; 0x03
	//app_st* s = (app_st*)context;
}
     c74:	00 00       	nop
     c76:	23 96       	adiw	r28, 0x03	; 3
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <i2c_if_data_callback>:

//=========================================================================================
void i2c_if_data_callback(I2C_IF_REG_en reg, uint8_t val, void* context)
{
     c82:	0f 93       	push	r16
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	26 97       	sbiw	r28, 0x06	; 6
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	8b 83       	std	Y+3, r24	; 0x03
     c94:	6c 83       	std	Y+4, r22	; 0x04
     c96:	4d 83       	std	Y+5, r20	; 0x05
     c98:	5e 83       	std	Y+6, r21	; 0x06
	app_st* s = (app_st*)context;
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	9a 83       	std	Y+2, r25	; 0x02
	switch(reg)
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	91 05       	cpc	r25, r1
     cac:	79 f1       	breq	.+94     	; 0xd0c <i2c_if_data_callback+0x8a>
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	91 05       	cpc	r25, r1
     cb2:	c9 f1       	breq	.+114    	; 0xd26 <i2c_if_data_callback+0xa4>
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	09 f0       	breq	.+2      	; 0xcba <i2c_if_data_callback+0x38>
		
		case I2C_REG_LED2_STATE:
			leds_set_state(&s->leds, led1, val != 0);
		break;
		
		default: break;
     cb8:	44 c0       	rjmp	.+136    	; 0xd42 <i2c_if_data_callback+0xc0>
	app_st* s = (app_st*)context;
	switch(reg)
	{
		case I2C_REG_LOAD_SW_STATE:
			// negative logic
			LOAD_SWITCH_EN_set_level(val == 0);
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	99 23       	and	r25, r25
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <i2c_if_data_callback+0x42>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0e 94 b0 02 	call	0x560	; 0x560 <LOAD_SWITCH_EN_set_level>
			sys.state_data.load_sw_state = val;
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	80 93 b7 70 	sts	0x70B7, r24	; 0x8070b7 <sys+0x70>
			if (val == 0)
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	88 23       	and	r24, r24
     cd2:	b1 f5       	brne	.+108    	; 0xd40 <i2c_if_data_callback+0xbe>
			{
				s->state_data.load_sw_fault_state = false;
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	8f 58       	subi	r24, 0x8F	; 143
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	10 82       	st	Z, r1
				i2c_if_update_reg(&s->i2c, I2C_REG_FAULT_STATE, (int32_t)(s->state_data.load_sw_fault_state), I2C_IF_UPDATE_SRC_APP);
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	8f 58       	subi	r24, 0x8F	; 143
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	fc 01       	movw	r30, r24
     cea:	80 81       	ld	r24, Z
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	a0 e0       	ldi	r26, 0x00	; 0
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	29 81       	ldd	r18, Y+1	; 0x01
     cf6:	3a 81       	ldd	r19, Y+2	; 0x02
     cf8:	f9 01       	movw	r30, r18
     cfa:	f8 96       	adiw	r30, 0x38	; 56
     cfc:	00 e0       	ldi	r16, 0x00	; 0
     cfe:	9c 01       	movw	r18, r24
     d00:	ad 01       	movw	r20, r26
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	cf 01       	movw	r24, r30
     d06:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
			}
			break;
     d0a:	1a c0       	rjmp	.+52     	; 0xd40 <i2c_if_data_callback+0xbe>
		
		case I2C_REG_LED1_STATE:
			leds_set_state(&s->leds, led0, val != 0);
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <i2c_if_data_callback+0x94>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	4b 96       	adiw	r24, 0x1b	; 27
     d1c:	42 2f       	mov	r20, r18
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <leds_set_state>
			break;
     d24:	0e c0       	rjmp	.+28     	; 0xd42 <i2c_if_data_callback+0xc0>
		
		case I2C_REG_LED2_STATE:
			leds_set_state(&s->leds, led1, val != 0);
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <i2c_if_data_callback+0xae>
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	4b 96       	adiw	r24, 0x1b	; 27
     d36:	42 2f       	mov	r20, r18
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <leds_set_state>
		break;
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <i2c_if_data_callback+0xc0>
			if (val == 0)
			{
				s->state_data.load_sw_fault_state = false;
				i2c_if_update_reg(&s->i2c, I2C_REG_FAULT_STATE, (int32_t)(s->state_data.load_sw_fault_state), I2C_IF_UPDATE_SRC_APP);
			}
			break;
     d40:	00 00       	nop
			leds_set_state(&s->leds, led1, val != 0);
		break;
		
		default: break;
	}
}
     d42:	00 00       	nop
     d44:	26 96       	adiw	r28, 0x06	; 6
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	0f 91       	pop	r16
     d50:	08 95       	ret

00000d52 <app>:

//=========================================================================================
void app(void)
{
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <app+0xa>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	// Get Sigrow
	init_system_data(&sys.versions.mcu_type, sys.versions.uuid);
     d60:	6d e4       	ldi	r22, 0x4D	; 77
     d62:	70 e7       	ldi	r23, 0x70	; 112
     d64:	89 e4       	ldi	r24, 0x49	; 73
     d66:	90 e7       	ldi	r25, 0x70	; 112
     d68:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <init_system_data>
	
	// initialize the LEDs
	leds_init(&sys.leds, true);
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	82 e6       	ldi	r24, 0x62	; 98
     d70:	90 e7       	ldi	r25, 0x70	; 112
     d72:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <leds_init>

	// debug interface
	debug_if_init(debug_if_callback, &sys);
     d76:	67 e4       	ldi	r22, 0x47	; 71
     d78:	70 e7       	ldi	r23, 0x70	; 112
     d7a:	80 e7       	ldi	r24, 0x70	; 112
     d7c:	93 e0       	ldi	r25, 0x03	; 3
     d7e:	0e 94 39 08 	call	0x1072	; 0x1072 <debug_if_init>
	debug_if_send_ping;
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	a9 01       	movw	r20, r18
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debug_if_send_message>

	// initialize the periodic timer
	timer_init(10, timer_callback, &sys);
     d92:	27 e4       	ldi	r18, 0x47	; 71
     d94:	30 e7       	ldi	r19, 0x70	; 112
     d96:	43 e9       	ldi	r20, 0x93	; 147
     d98:	54 e0       	ldi	r21, 0x04	; 4
     d9a:	6a e0       	ldi	r22, 0x0A	; 10
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <timer_init>
	
	// external interrupt low level events
	extint_register(extint_pin_load_sw_fault, load_switch_fault_event, &sys);
     da6:	47 e4       	ldi	r20, 0x47	; 71
     da8:	50 e7       	ldi	r21, 0x70	; 112
     daa:	69 e2       	ldi	r22, 0x29	; 41
     dac:	74 e0       	ldi	r23, 0x04	; 4
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 5d 09 	call	0x12ba	; 0x12ba <extint_register>

	// initialize analog sensors
	analog_sense_init();
     db4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <analog_sense_init>
	analog_sense_points_st* sens_points = analog_sense_get_points();
     db8:	0e 94 4c 02 	call	0x498	; 0x498 <analog_sense_get_points>
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	9a 83       	std	Y+2, r25	; 0x02
	analog_read_register(&sens_points->temperature, temperature_callback, &sys);
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	47 e4       	ldi	r20, 0x47	; 71
     dc6:	50 e7       	ldi	r21, 0x70	; 112
     dc8:	66 eb       	ldi	r22, 0xB6	; 182
     dca:	74 e0       	ldi	r23, 0x04	; 4
     dcc:	0e 94 26 02 	call	0x44c	; 0x44c <analog_read_register>
	analog_read_register(&sens_points->voltage, voltage_callback, &sys);
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	46 96       	adiw	r24, 0x16	; 22
     dd6:	47 e4       	ldi	r20, 0x47	; 71
     dd8:	50 e7       	ldi	r21, 0x70	; 112
     dda:	60 ee       	ldi	r22, 0xE0	; 224
     ddc:	74 e0       	ldi	r23, 0x04	; 4
     dde:	0e 94 26 02 	call	0x44c	; 0x44c <analog_read_register>
	analog_read_register(&sens_points->current, current_callback, &sys);
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	8c 96       	adiw	r24, 0x2c	; 44
     de8:	47 e4       	ldi	r20, 0x47	; 71
     dea:	50 e7       	ldi	r21, 0x70	; 112
     dec:	6a e6       	ldi	r22, 0x6A	; 106
     dee:	75 e0       	ldi	r23, 0x05	; 5
     df0:	0e 94 26 02 	call	0x44c	; 0x44c <analog_read_register>
	
	// timed tasks registration
	register_timed_task(&sys.send_report_task, timer_get_ticks_from_millisec(250), send_sensor_report_handler, &sys);
     df4:	6a ef       	ldi	r22, 0xFA	; 250
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 94 10 	call	0x2128	; 0x2128 <timer_get_ticks_from_millisec>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	07 e4       	ldi	r16, 0x47	; 71
     e06:	10 e7       	ldi	r17, 0x70	; 112
     e08:	24 e7       	ldi	r18, 0x74	; 116
     e0a:	34 e0       	ldi	r19, 0x04	; 4
     e0c:	ac 01       	movw	r20, r24
     e0e:	bd 01       	movw	r22, r26
     e10:	89 eb       	ldi	r24, 0xB9	; 185
     e12:	90 e7       	ldi	r25, 0x70	; 112
     e14:	0e 94 c9 02 	call	0x592	; 0x592 <register_timed_task>
	
	// i2c slave
	i2c_if_init(&sys.i2c, APP_I2C_ADDRESS, i2c_if_error_callback, &sys);
     e18:	27 e4       	ldi	r18, 0x47	; 71
     e1a:	30 e7       	ldi	r19, 0x70	; 112
     e1c:	41 e3       	ldi	r20, 0x31	; 49
     e1e:	56 e0       	ldi	r21, 0x06	; 6
     e20:	65 e2       	ldi	r22, 0x25	; 37
     e22:	8f e7       	ldi	r24, 0x7F	; 127
     e24:	90 e7       	ldi	r25, 0x70	; 112
     e26:	0e 94 9c 0a 	call	0x1538	; 0x1538 <i2c_if_init>
	i2c_if_set_reg_cb(&sys.i2c, I2C_REG_LOAD_SW_STATE, i2c_if_data_callback);
     e2a:	41 e4       	ldi	r20, 0x41	; 65
     e2c:	56 e0       	ldi	r21, 0x06	; 6
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	8f e7       	ldi	r24, 0x7F	; 127
     e32:	90 e7       	ldi	r25, 0x70	; 112
     e34:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <i2c_if_set_reg_cb>
	i2c_if_set_reg_cb(&sys.i2c, I2C_REG_LED1_STATE, i2c_if_data_callback);
     e38:	41 e4       	ldi	r20, 0x41	; 65
     e3a:	56 e0       	ldi	r21, 0x06	; 6
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	8f e7       	ldi	r24, 0x7F	; 127
     e40:	90 e7       	ldi	r25, 0x70	; 112
     e42:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <i2c_if_set_reg_cb>
	i2c_if_set_reg_cb(&sys.i2c, I2C_REG_LED2_STATE, i2c_if_data_callback);
     e46:	41 e4       	ldi	r20, 0x41	; 65
     e48:	56 e0       	ldi	r21, 0x06	; 6
     e4a:	63 e0       	ldi	r22, 0x03	; 3
     e4c:	8f e7       	ldi	r24, 0x7F	; 127
     e4e:	90 e7       	ldi	r25, 0x70	; 112
     e50:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <i2c_if_set_reg_cb>
	
	// initial states of IOs
	LOAD_SWITCH_EN_set_level(false);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 b0 02 	call	0x560	; 0x560 <LOAD_SWITCH_EN_set_level>
	sys.state_data.load_sw_state = !LOAD_SWITCH_EN_get_level();
     e5a:	0e 94 bf 02 	call	0x57e	; 0x57e <LOAD_SWITCH_EN_get_level>
     e5e:	98 2f       	mov	r25, r24
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 27       	eor	r24, r25
     e64:	80 93 b7 70 	sts	0x70B7, r24	; 0x8070b7 <sys+0x70>
	i2c_if_update_reg(&sys.i2c, I2C_REG_LOAD_SW_STATE, (int32_t)(sys.state_data.load_sw_state), I2C_IF_UPDATE_SRC_APP);
     e68:	80 91 b7 70 	lds	r24, 0x70B7	; 0x8070b7 <sys+0x70>
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	00 e0       	ldi	r16, 0x00	; 0
     e76:	9c 01       	movw	r18, r24
     e78:	ad 01       	movw	r20, r26
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	8f e7       	ldi	r24, 0x7F	; 127
     e7e:	90 e7       	ldi	r25, 0x70	; 112
     e80:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
	sys.state_data.load_sw_fault_state = 0;
     e84:	10 92 b8 70 	sts	0x70B8, r1	; 0x8070b8 <sys+0x71>
	
	// main loop
	sys_main_loop();
     e88:	0e 94 4e 07 	call	0xe9c	; 0xe9c <sys_main_loop>
}
     e8c:	00 00       	nop
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <sys_main_loop>:

//=========================================================================================
void sys_main_loop(void)
{
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	while (true)
	{
		timed_task_fetch(&sys.send_report_task);
     ea4:	89 eb       	ldi	r24, 0xB9	; 185
     ea6:	90 e7       	ldi	r25, 0x70	; 112
     ea8:	0e 94 46 03 	call	0x68c	; 0x68c <timed_task_fetch>
		__asm__("wdr");
     eac:	a8 95       	wdr
	}
     eae:	fa cf       	rjmp	.-12     	; 0xea4 <sys_main_loop+0x8>

00000eb0 <debug_if_internal_handler>:
	.rx_state = debug_if_msg_state_header_s1,
};

//=========================================================================================
void debug_if_internal_handler(void)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	switch (debug_if.rx_hdr.opcode)
     eb8:	80 91 02 71 	lds	r24, 0x7102	; 0x807102 <__data_end+0x8>
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f0       	breq	.+2      	; 0xec6 <debug_if_internal_handler+0x16>
	{
		case OPCODE_PING: 
			debug_if_send_ping;
			break;
				
		default: break;
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <debug_if_internal_handler+0x28>
void debug_if_internal_handler(void)
{
	switch (debug_if.rx_hdr.opcode)
	{
		case OPCODE_PING: 
			debug_if_send_ping;
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	a9 01       	movw	r20, r18
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <debug_if_send_message>
			break;
     ed6:	00 00       	nop
				
		default: break;
	}
}
     ed8:	00 00       	nop
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <debug_if_rx_isr_cb>:

//=========================================================================================
void debug_if_rx_isr_cb(void)
{
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	1f 92       	push	r1
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = USART_0_get_data();
     ef0:	0e 94 18 1c 	call	0x3830	; 0x3830 <USART_0_get_data>
     ef4:	89 83       	std	Y+1, r24	; 0x01

	switch(debug_if.rx_state)
     ef6:	80 91 26 71 	lds	r24, 0x7126	; 0x807126 <__data_end+0x2c>
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	09 2e       	mov	r0, r25
     f00:	00 0c       	add	r0, r0
     f02:	aa 0b       	sbc	r26, r26
     f04:	bb 0b       	sbc	r27, r27
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	27 e0       	ldi	r18, 0x07	; 7
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	84 1b       	sub	r24, r20
     f10:	95 0b       	sbc	r25, r21
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	08 f4       	brcc	.+2      	; 0xf1a <debug_if_rx_isr_cb+0x3a>
     f18:	94 c0       	rjmp	.+296    	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
     f1a:	88 5a       	subi	r24, 0xA8	; 168
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	fc 01       	movw	r30, r24
     f20:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__tablejump2__>
	{
		case debug_if_msg_state_header_s1:
			if (data == DEBUG_IF_SYNCWORD_B0 ) debug_if.rx_state = debug_if_msg_state_header_s2; 
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	8e 3d       	cpi	r24, 0xDE	; 222
     f28:	21 f4       	brne	.+8      	; 0xf32 <debug_if_rx_isr_cb+0x52>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
			else debug_if.rx_state = debug_if_msg_state_header_s1; 
			break;
     f30:	8b c0       	rjmp	.+278    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>

	switch(debug_if.rx_state)
	{
		case debug_if_msg_state_header_s1:
			if (data == DEBUG_IF_SYNCWORD_B0 ) debug_if.rx_state = debug_if_msg_state_header_s2; 
			else debug_if.rx_state = debug_if_msg_state_header_s1; 
     f32:	10 92 26 71 	sts	0x7126, r1	; 0x807126 <__data_end+0x2c>
			break;
     f36:	88 c0       	rjmp	.+272    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
		case debug_if_msg_state_header_s2:
			if (data == DEBUG_IF_SYNCWORD_B1 ) debug_if.rx_state = debug_if_msg_state_header_s3;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	8d 3a       	cpi	r24, 0xAD	; 173
     f3c:	21 f4       	brne	.+8      	; 0xf46 <debug_if_rx_isr_cb+0x66>
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
			else debug_if.rx_state = debug_if_msg_state_header_s1;
			break;
     f44:	81 c0       	rjmp	.+258    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
			if (data == DEBUG_IF_SYNCWORD_B0 ) debug_if.rx_state = debug_if_msg_state_header_s2; 
			else debug_if.rx_state = debug_if_msg_state_header_s1; 
			break;
		case debug_if_msg_state_header_s2:
			if (data == DEBUG_IF_SYNCWORD_B1 ) debug_if.rx_state = debug_if_msg_state_header_s3;
			else debug_if.rx_state = debug_if_msg_state_header_s1;
     f46:	10 92 26 71 	sts	0x7126, r1	; 0x807126 <__data_end+0x2c>
			break;
     f4a:	7e c0       	rjmp	.+252    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
		case debug_if_msg_state_header_s3:
			if (data == DEBUG_IF_SYNCWORD_B2 ) debug_if.rx_state = debug_if_msg_state_header_s4;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	8e 3b       	cpi	r24, 0xBE	; 190
     f50:	21 f4       	brne	.+8      	; 0xf5a <debug_if_rx_isr_cb+0x7a>
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
			else debug_if.rx_state = debug_if_msg_state_header_s1;
			break;
     f58:	77 c0       	rjmp	.+238    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
			if (data == DEBUG_IF_SYNCWORD_B1 ) debug_if.rx_state = debug_if_msg_state_header_s3;
			else debug_if.rx_state = debug_if_msg_state_header_s1;
			break;
		case debug_if_msg_state_header_s3:
			if (data == DEBUG_IF_SYNCWORD_B2 ) debug_if.rx_state = debug_if_msg_state_header_s4;
			else debug_if.rx_state = debug_if_msg_state_header_s1;
     f5a:	10 92 26 71 	sts	0x7126, r1	; 0x807126 <__data_end+0x2c>
			break;
     f5e:	74 c0       	rjmp	.+232    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
		case debug_if_msg_state_header_s4:
			if (data == DEBUG_IF_SYNCWORD_B3 ) debug_if.rx_state = debug_if_msg_state_header_oc;
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	8f 3e       	cpi	r24, 0xEF	; 239
     f64:	21 f4       	brne	.+8      	; 0xf6e <debug_if_rx_isr_cb+0x8e>
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
			else debug_if.rx_state = debug_if_msg_state_header_s1;
			break;
     f6c:	6d c0       	rjmp	.+218    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
			if (data == DEBUG_IF_SYNCWORD_B2 ) debug_if.rx_state = debug_if_msg_state_header_s4;
			else debug_if.rx_state = debug_if_msg_state_header_s1;
			break;
		case debug_if_msg_state_header_s4:
			if (data == DEBUG_IF_SYNCWORD_B3 ) debug_if.rx_state = debug_if_msg_state_header_oc;
			else debug_if.rx_state = debug_if_msg_state_header_s1;
     f6e:	10 92 26 71 	sts	0x7126, r1	; 0x807126 <__data_end+0x2c>
			break;
     f72:	6a c0       	rjmp	.+212    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
		case debug_if_msg_state_header_oc: 
			debug_if.rx_hdr.opcode = data;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	80 93 02 71 	sts	0x7102, r24	; 0x807102 <__data_end+0x8>
			debug_if.rx_state = debug_if_msg_state_header_len;
     f7a:	85 e0       	ldi	r24, 0x05	; 5
     f7c:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
			break;
     f80:	63 c0       	rjmp	.+198    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
		case debug_if_msg_state_header_len:
			if (data > DEBUG_IF_MAX_PAYLOAD_LEN)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	81 32       	cpi	r24, 0x21	; 33
     f86:	18 f0       	brcs	.+6      	; 0xf8e <debug_if_rx_isr_cb+0xae>
			{
				debug_if.rx_state = debug_if_msg_state_header_s1;
     f88:	10 92 26 71 	sts	0x7126, r1	; 0x807126 <__data_end+0x2c>
				{
					debug_if.rx_state = debug_if_msg_state_checksum;
				}
				else debug_if.rx_state = debug_if_msg_state_payload;	
			}
			break;
     f8c:	5d c0       	rjmp	.+186    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
			{
				debug_if.rx_state = debug_if_msg_state_header_s1;
			}
			else
			{
				debug_if.rx_hdr.length = data;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	80 93 03 71 	sts	0x7103, r24	; 0x807103 <__data_end+0x9>
				debug_if.rx_payload_cnt = 0;
     f94:	10 92 24 71 	sts	0x7124, r1	; 0x807124 <__data_end+0x2a>
				if (debug_if.rx_hdr.length == 0)
     f98:	80 91 03 71 	lds	r24, 0x7103	; 0x807103 <__data_end+0x9>
     f9c:	88 23       	and	r24, r24
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <debug_if_rx_isr_cb+0xc8>
				{
					debug_if.rx_state = debug_if_msg_state_checksum;
     fa0:	87 e0       	ldi	r24, 0x07	; 7
     fa2:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
				}
				else debug_if.rx_state = debug_if_msg_state_payload;	
			}
			break;
     fa6:	50 c0       	rjmp	.+160    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
				debug_if.rx_payload_cnt = 0;
				if (debug_if.rx_hdr.length == 0)
				{
					debug_if.rx_state = debug_if_msg_state_checksum;
				}
				else debug_if.rx_state = debug_if_msg_state_payload;	
     fa8:	86 e0       	ldi	r24, 0x06	; 6
     faa:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
			}
			break;
     fae:	4c c0       	rjmp	.+152    	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
		
		case debug_if_msg_state_payload:
			if (debug_if.rx_payload_cnt >= (debug_if.rx_hdr.length-1))
     fb0:	80 91 24 71 	lds	r24, 0x7124	; 0x807124 <__data_end+0x2a>
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	80 91 03 71 	lds	r24, 0x7103	; 0x807103 <__data_end+0x9>
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	1c f0       	brlt	.+6      	; 0xfce <debug_if_rx_isr_cb+0xee>
			{
				debug_if.rx_state = debug_if_msg_state_checksum;	
     fc8:	87 e0       	ldi	r24, 0x07	; 7
     fca:	80 93 26 71 	sts	0x7126, r24	; 0x807126 <__data_end+0x2c>
			}
			debug_if.rx_payload[debug_if.rx_payload_cnt++] = data;
     fce:	80 91 24 71 	lds	r24, 0x7124	; 0x807124 <__data_end+0x2a>
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	98 0f       	add	r25, r24
     fd6:	90 93 24 71 	sts	0x7124, r25	; 0x807124 <__data_end+0x2a>
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	8c 5f       	subi	r24, 0xFC	; 252
     fe0:	9e 48       	sbci	r25, 0x8E	; 142
     fe2:	29 81       	ldd	r18, Y+1	; 0x01
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
			
			break;
     fe8:	2f c0       	rjmp	.+94     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
			
		case debug_if_msg_state_checksum:
			debug_if.rx_state = debug_if_msg_state_header_s1;
     fea:	10 92 26 71 	sts	0x7126, r1	; 0x807126 <__data_end+0x2c>
			
			if (debug_if.rx_chs != data)
     fee:	90 91 25 71 	lds	r25, 0x7125	; 0x807125 <__data_end+0x2b>
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	98 17       	cp	r25, r24
     ff6:	39 f5       	brne	.+78     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
			{
			}
			else
			{
				if (debug_if.rx_hdr.opcode < OPCODE_RESERVED_CODES_MAX)
     ff8:	80 91 02 71 	lds	r24, 0x7102	; 0x807102 <__data_end+0x8>
     ffc:	8a 30       	cpi	r24, 0x0A	; 10
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
				{
					debug_if_internal_handler();
    1000:	0e 94 58 07 	call	0xeb0	; 0xeb0 <debug_if_internal_handler>
				{
					debug_if.cb(debug_if.rx_hdr.opcode, debug_if.rx_payload, debug_if.rx_payload_cnt, debug_if.context);
				}
			}
			
			break;
    1004:	20 c0       	rjmp	.+64     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
			{
				if (debug_if.rx_hdr.opcode < OPCODE_RESERVED_CODES_MAX)
				{
					debug_if_internal_handler();
				}
				else if (debug_if.cb != NULL)
    1006:	80 91 fa 70 	lds	r24, 0x70FA	; 0x8070fa <__data_end>
    100a:	90 91 fb 70 	lds	r25, 0x70FB	; 0x8070fb <__data_end+0x1>
    100e:	89 2b       	or	r24, r25
    1010:	d1 f0       	breq	.+52     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
				{
					debug_if.cb(debug_if.rx_hdr.opcode, debug_if.rx_payload, debug_if.rx_payload_cnt, debug_if.context);
    1012:	e0 91 fa 70 	lds	r30, 0x70FA	; 0x8070fa <__data_end>
    1016:	f0 91 fb 70 	lds	r31, 0x70FB	; 0x8070fb <__data_end+0x1>
    101a:	20 91 fc 70 	lds	r18, 0x70FC	; 0x8070fc <__data_end+0x2>
    101e:	30 91 fd 70 	lds	r19, 0x70FD	; 0x8070fd <__data_end+0x3>
    1022:	80 91 24 71 	lds	r24, 0x7124	; 0x807124 <__data_end+0x2a>
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	f0 90 02 71 	lds	r15, 0x7102	; 0x807102 <__data_end+0x8>
    1032:	89 01       	movw	r16, r18
    1034:	9c 01       	movw	r18, r24
    1036:	ad 01       	movw	r20, r26
    1038:	64 e0       	ldi	r22, 0x04	; 4
    103a:	71 e7       	ldi	r23, 0x71	; 113
    103c:	8f 2d       	mov	r24, r15
    103e:	09 95       	icall
				}
			}
			
			break;
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
			
		default: break;
    1042:	00 00       	nop
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
				{
					debug_if.cb(debug_if.rx_hdr.opcode, debug_if.rx_payload, debug_if.rx_payload_cnt, debug_if.context);
				}
			}
			
			break;
    1046:	00 00       	nop
			
		default: break;
	}
	
	if (debug_if.rx_state == debug_if_msg_state_header_s1) debug_if.rx_chs = 0;
    1048:	80 91 26 71 	lds	r24, 0x7126	; 0x807126 <__data_end+0x2c>
    104c:	88 23       	and	r24, r24
    104e:	19 f4       	brne	.+6      	; 0x1056 <__DATA_REGION_LENGTH__+0x56>
    1050:	10 92 25 71 	sts	0x7125, r1	; 0x807125 <__data_end+0x2b>
	else debug_if.rx_chs += data;
}
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
			
		default: break;
	}
	
	if (debug_if.rx_state == debug_if_msg_state_header_s1) debug_if.rx_chs = 0;
	else debug_if.rx_chs += data;
    1056:	90 91 25 71 	lds	r25, 0x7125	; 0x807125 <__data_end+0x2b>
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	89 0f       	add	r24, r25
    105e:	80 93 25 71 	sts	0x7125, r24	; 0x807125 <__data_end+0x2b>
}
    1062:	00 00       	nop
    1064:	0f 90       	pop	r0
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	08 95       	ret

00001072 <debug_if_init>:

//=========================================================================================
void debug_if_init(debug_if_callback_t cb_func, void* context)
{
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	00 d0       	rcall	.+0      	; 0x1078 <debug_if_init+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <debug_if_init+0x8>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	6b 83       	std	Y+3, r22	; 0x03
    1084:	7c 83       	std	Y+4, r23	; 0x04
	debug_if.cb = cb_func;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	80 93 fa 70 	sts	0x70FA, r24	; 0x8070fa <__data_end>
    108e:	90 93 fb 70 	sts	0x70FB, r25	; 0x8070fb <__data_end+0x1>
	debug_if.context = context;
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	80 93 fc 70 	sts	0x70FC, r24	; 0x8070fc <__data_end+0x2>
    109a:	90 93 fd 70 	sts	0x70FD, r25	; 0x8070fd <__data_end+0x3>
	USART_0_set_ISR_cb(debug_if_rx_isr_cb, RX_CB);
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	80 e7       	ldi	r24, 0x70	; 112
    10a2:	97 e0       	ldi	r25, 0x07	; 7
    10a4:	0e 94 1b 1b 	call	0x3636	; 0x3636 <USART_0_set_ISR_cb>
	debug_if.initialized = true;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 27 71 	sts	0x7127, r24	; 0x807127 <__data_end+0x2d>
}
    10ae:	00 00       	nop
    10b0:	24 96       	adiw	r28, 0x04	; 4
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <debug_if_send_message>:

//=========================================================================================
void debug_if_send_message(uint8_t opcode, uint8_t* buff, uint32_t len)
{
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	64 97       	sbiw	r28, 0x14	; 20
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	8e 87       	std	Y+14, r24	; 0x0e
    10cc:	6f 87       	std	Y+15, r22	; 0x0f
    10ce:	78 8b       	std	Y+16, r23	; 0x10
    10d0:	29 8b       	std	Y+17, r18	; 0x11
    10d2:	3a 8b       	std	Y+18, r19	; 0x12
    10d4:	4b 8b       	std	Y+19, r20	; 0x13
    10d6:	5c 8b       	std	Y+20, r21	; 0x14
	debug_if_message_st hdr = 
    10d8:	8e ed       	ldi	r24, 0xDE	; 222
    10da:	9d ea       	ldi	r25, 0xAD	; 173
    10dc:	ae eb       	ldi	r26, 0xBE	; 190
    10de:	bf ee       	ldi	r27, 0xEF	; 239
    10e0:	88 87       	std	Y+8, r24	; 0x08
    10e2:	99 87       	std	Y+9, r25	; 0x09
    10e4:	aa 87       	std	Y+10, r26	; 0x0a
    10e6:	bb 87       	std	Y+11, r27	; 0x0b
    10e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ea:	8c 87       	std	Y+12, r24	; 0x0c
    10ec:	89 89       	ldd	r24, Y+17	; 0x11
    10ee:	8d 87       	std	Y+13, r24	; 0x0d
	{
		.sync_word = DEBUG_IF_SYNCWORD,
		.opcode = opcode,
		.length = len,
	};
	uint8_t chs = 0;
    10f0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t *hdr_buf = (uint8_t*)&hdr;
    10f2:	ce 01       	movw	r24, r28
    10f4:	08 96       	adiw	r24, 0x08	; 8
    10f6:	8e 83       	std	Y+6, r24	; 0x06
    10f8:	9f 83       	std	Y+7, r25	; 0x07
	
	// header
	for (int i = 0; i < (int)sizeof(hdr); i++)
    10fa:	1a 82       	std	Y+2, r1	; 0x02
    10fc:	1b 82       	std	Y+3, r1	; 0x03
    10fe:	1a c0       	rjmp	.+52     	; 0x1134 <debug_if_send_message+0x78>
	{
		chs += hdr_buf[i];
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	9b 81       	ldd	r25, Y+3	; 0x03
    1104:	2e 81       	ldd	r18, Y+6	; 0x06
    1106:	3f 81       	ldd	r19, Y+7	; 0x07
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	fc 01       	movw	r30, r24
    110e:	80 81       	ld	r24, Z
    1110:	99 81       	ldd	r25, Y+1	; 0x01
    1112:	89 0f       	add	r24, r25
    1114:	89 83       	std	Y+1, r24	; 0x01
		USART_0_write(hdr_buf[i]);
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	9b 81       	ldd	r25, Y+3	; 0x03
    111a:	2e 81       	ldd	r18, Y+6	; 0x06
    111c:	3f 81       	ldd	r19, Y+7	; 0x07
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	fc 01       	movw	r30, r24
    1124:	80 81       	ld	r24, Z
    1126:	0e 94 b0 1b 	call	0x3760	; 0x3760 <USART_0_write>
	};
	uint8_t chs = 0;
	uint8_t *hdr_buf = (uint8_t*)&hdr;
	
	// header
	for (int i = 0; i < (int)sizeof(hdr); i++)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	8a 83       	std	Y+2, r24	; 0x02
    1132:	9b 83       	std	Y+3, r25	; 0x03
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	9b 81       	ldd	r25, Y+3	; 0x03
    1138:	06 97       	sbiw	r24, 0x06	; 6
    113a:	14 f3       	brlt	.-60     	; 0x1100 <debug_if_send_message+0x44>
		chs += hdr_buf[i];
		USART_0_write(hdr_buf[i]);
	}
	
	// payload
	for (int i = 0; i < (int)len; i++)
    113c:	1c 82       	std	Y+4, r1	; 0x04
    113e:	1d 82       	std	Y+5, r1	; 0x05
    1140:	1a c0       	rjmp	.+52     	; 0x1176 <debug_if_send_message+0xba>
	{
		chs += buff[i];
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	2f 85       	ldd	r18, Y+15	; 0x0f
    1148:	38 89       	ldd	r19, Y+16	; 0x10
    114a:	82 0f       	add	r24, r18
    114c:	93 1f       	adc	r25, r19
    114e:	fc 01       	movw	r30, r24
    1150:	80 81       	ld	r24, Z
    1152:	99 81       	ldd	r25, Y+1	; 0x01
    1154:	89 0f       	add	r24, r25
    1156:	89 83       	std	Y+1, r24	; 0x01
		USART_0_write(buff[i]);
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	2f 85       	ldd	r18, Y+15	; 0x0f
    115e:	38 89       	ldd	r19, Y+16	; 0x10
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	fc 01       	movw	r30, r24
    1166:	80 81       	ld	r24, Z
    1168:	0e 94 b0 1b 	call	0x3760	; 0x3760 <USART_0_write>
		chs += hdr_buf[i];
		USART_0_write(hdr_buf[i]);
	}
	
	// payload
	for (int i = 0; i < (int)len; i++)
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	8c 83       	std	Y+4, r24	; 0x04
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	29 89       	ldd	r18, Y+17	; 0x11
    1178:	3a 89       	ldd	r19, Y+18	; 0x12
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	fc f2       	brlt	.-66     	; 0x1142 <debug_if_send_message+0x86>
		chs += buff[i];
		USART_0_write(buff[i]);
	}
	
	// checksum
	USART_0_write(chs);
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	0e 94 b0 1b 	call	0x3760	; 0x3760 <USART_0_write>
}
    118a:	00 00       	nop
    118c:	64 96       	adiw	r28, 0x14	; 20
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <PORTC_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
	return VPORTC.IN & (1 << pin);
    11a4:	88 e0       	ldi	r24, 0x08	; 8
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	48 2f       	mov	r20, r24
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <PORTC_get_pin_level+0x28>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	4a 95       	dec	r20
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <PORTC_get_pin_level+0x24>
    11c4:	82 23       	and	r24, r18
    11c6:	93 23       	and	r25, r19
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	89 2b       	or	r24, r25
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <PORTC_get_pin_level+0x38>
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	82 2f       	mov	r24, r18
}
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <LOAD_SWITCH_FAULT_get_level>:
 * \brief Get level on LOAD_SWITCH_FAULT
 *
 * Reads the level on a pin
 */
static inline bool LOAD_SWITCH_FAULT_get_level()
{
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	return PORTC_get_pin_level(1);
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	0e 94 cc 08 	call	0x1198	; 0x1198 <PORTC_get_pin_level>
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <extint_event_port_c>:
									}


//=========================================================================================
void extint_event_port_c(void)
{
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	26 97       	sbiw	r28, 0x06	; 6
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	de bf       	out	0x3e, r29	; 62
	uint32_t event_tick = timer_get_time_short();
    11fc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <timer_get_time_short>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	ab 83       	std	Y+3, r26	; 0x03
    120a:	bc 83       	std	Y+4, r27	; 0x04

	EXTINT_CHECK_PIN(extint.load_sw_fault,LOAD_SWITCH_FAULT_get_level(),0,event_tick);
    120c:	80 91 c8 70 	lds	r24, 0x70C8	; 0x8070c8 <extint+0x2>
    1210:	88 23       	and	r24, r24
    1212:	09 f4       	brne	.+2      	; 0x1216 <extint_event_port_c+0x28>
    1214:	4b c0       	rjmp	.+150    	; 0x12ac <extint_event_port_c+0xbe>
    1216:	80 91 c7 70 	lds	r24, 0x70C7	; 0x8070c7 <extint+0x1>
    121a:	8d 83       	std	Y+5, r24	; 0x05
    121c:	0e 94 ed 08 	call	0x11da	; 0x11da <LOAD_SWITCH_FAULT_get_level>
    1220:	8e 83       	std	Y+6, r24	; 0x06
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	ab 81       	ldd	r26, Y+3	; 0x03
    1228:	bc 81       	ldd	r27, Y+4	; 0x04
    122a:	80 93 cd 70 	sts	0x70CD, r24	; 0x8070cd <extint+0x7>
    122e:	90 93 ce 70 	sts	0x70CE, r25	; 0x8070ce <extint+0x8>
    1232:	a0 93 cf 70 	sts	0x70CF, r26	; 0x8070cf <extint+0x9>
    1236:	b0 93 d0 70 	sts	0x70D0, r27	; 0x8070d0 <extint+0xa>
    123a:	80 91 c8 70 	lds	r24, 0x70C8	; 0x8070c8 <extint+0x2>
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	21 f4       	brne	.+8      	; 0x124a <extint_event_port_c+0x5c>
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	8e 81       	ldd	r24, Y+6	; 0x06
    1246:	98 17       	cp	r25, r24
    1248:	d1 f4       	brne	.+52     	; 0x127e <extint_event_port_c+0x90>
    124a:	80 91 c8 70 	lds	r24, 0x70C8	; 0x8070c8 <extint+0x2>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	49 f4       	brne	.+18     	; 0x1264 <extint_event_port_c+0x76>
    1252:	8e 81       	ldd	r24, Y+6	; 0x06
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	82 17       	cp	r24, r18
    1260:	93 07       	cpc	r25, r19
    1262:	6c f0       	brlt	.+26     	; 0x127e <extint_event_port_c+0x90>
    1264:	80 91 c8 70 	lds	r24, 0x70C8	; 0x8070c8 <extint+0x2>
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	e9 f4       	brne	.+58     	; 0x12a6 <extint_event_port_c+0xb8>
    126c:	8e 81       	ldd	r24, Y+6	; 0x06
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8d 81       	ldd	r24, Y+5	; 0x05
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	28 17       	cp	r18, r24
    127a:	39 07       	cpc	r19, r25
    127c:	a4 f4       	brge	.+40     	; 0x12a6 <extint_event_port_c+0xb8>
    127e:	80 91 c9 70 	lds	r24, 0x70C9	; 0x8070c9 <extint+0x3>
    1282:	90 91 ca 70 	lds	r25, 0x70CA	; 0x8070ca <extint+0x4>
    1286:	89 2b       	or	r24, r25
    1288:	71 f0       	breq	.+28     	; 0x12a6 <extint_event_port_c+0xb8>
    128a:	e0 91 c9 70 	lds	r30, 0x70C9	; 0x8070c9 <extint+0x3>
    128e:	f0 91 ca 70 	lds	r31, 0x70CA	; 0x8070ca <extint+0x4>
    1292:	80 91 cb 70 	lds	r24, 0x70CB	; 0x8070cb <extint+0x5>
    1296:	90 91 cc 70 	lds	r25, 0x70CC	; 0x8070cc <extint+0x6>
    129a:	9c 01       	movw	r18, r24
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	6e 81       	ldd	r22, Y+6	; 0x06
    12a0:	86 ec       	ldi	r24, 0xC6	; 198
    12a2:	90 e7       	ldi	r25, 0x70	; 112
    12a4:	09 95       	icall
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	80 93 c7 70 	sts	0x70C7, r24	; 0x8070c7 <extint+0x1>
}
    12ac:	00 00       	nop
    12ae:	26 96       	adiw	r28, 0x06	; 6
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <extint_register>:

//=========================================================================================
void extint_register(extint_pin_en pin_type, extint_callback_t cb, void* context)
{
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	25 97       	sbiw	r28, 0x05	; 5
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	6a 83       	std	Y+2, r22	; 0x02
    12cc:	7b 83       	std	Y+3, r23	; 0x03
    12ce:	4c 83       	std	Y+4, r20	; 0x04
    12d0:	5d 83       	std	Y+5, r21	; 0x05
	switch(pin_type)
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	89 2b       	or	r24, r25
    12da:	09 f0       	breq	.+2      	; 0x12de <extint_register+0x24>
	{
		case extint_pin_load_sw_fault:
			extint.load_sw_fault.cb = cb;
			extint.load_sw_fault.context = context;	
			break;
		default: break;
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <extint_register+0x3e>
void extint_register(extint_pin_en pin_type, extint_callback_t cb, void* context)
{
	switch(pin_type)
	{
		case extint_pin_load_sw_fault:
			extint.load_sw_fault.cb = cb;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	80 93 c9 70 	sts	0x70C9, r24	; 0x8070c9 <extint+0x3>
    12e6:	90 93 ca 70 	sts	0x70CA, r25	; 0x8070ca <extint+0x4>
			extint.load_sw_fault.context = context;	
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	80 93 cb 70 	sts	0x70CB, r24	; 0x8070cb <extint+0x5>
    12f2:	90 93 cc 70 	sts	0x70CC, r25	; 0x8070cc <extint+0x6>
			break;
    12f6:	00 00       	nop
		default: break;
	}
}
    12f8:	00 00       	nop
    12fa:	25 96       	adiw	r28, 0x05	; 5
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <i2c_if_update_reg>:
void i2c_if_collision_error_handler();
void i2c_if_bus_error_handler();

//==============================================================================================
void i2c_if_update_reg(i2c_if_st* i2c, I2C_IF_REG_en reg, int32_t val, I2C_IF_UPDATE_SRC_en src)
{
    1306:	0f 93       	push	r16
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	2a 97       	sbiw	r28, 0x0a	; 10
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	8b 83       	std	Y+3, r24	; 0x03
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	6d 83       	std	Y+5, r22	; 0x05
    131c:	2e 83       	std	Y+6, r18	; 0x06
    131e:	3f 83       	std	Y+7, r19	; 0x07
    1320:	48 87       	std	Y+8, r20	; 0x08
    1322:	59 87       	std	Y+9, r21	; 0x09
    1324:	0a 87       	std	Y+10, r16	; 0x0a
	i2c_if_reg_st *reg_s = &i2c->registers[reg];
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
	switch (reg)
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	09 2e       	mov	r0, r25
    134a:	00 0c       	add	r0, r0
    134c:	aa 0b       	sbc	r26, r26
    134e:	bb 0b       	sbc	r27, r27
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	27 e0       	ldi	r18, 0x07	; 7
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	84 1b       	sub	r24, r20
    135a:	95 0b       	sbc	r25, r21
    135c:	28 17       	cp	r18, r24
    135e:	39 07       	cpc	r19, r25
    1360:	08 f4       	brcc	.+2      	; 0x1364 <i2c_if_update_reg+0x5e>
    1362:	dd c0       	rjmp	.+442    	; 0x151e <i2c_if_update_reg+0x218>
    1364:	80 5a       	subi	r24, 0xA0	; 160
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	fc 01       	movw	r30, r24
    136a:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__tablejump2__>
		
		// --------------------------------------------
		case I2C_REG_LOAD_SW_STATE:
		case I2C_REG_LED1_STATE:
		case I2C_REG_LED2_STATE:
			reg_s->val = (val == 0?0:1);
    136e:	21 e0       	ldi	r18, 0x01	; 1
    1370:	8e 81       	ldd	r24, Y+6	; 0x06
    1372:	9f 81       	ldd	r25, Y+7	; 0x07
    1374:	a8 85       	ldd	r26, Y+8	; 0x08
    1376:	b9 85       	ldd	r27, Y+9	; 0x09
    1378:	89 2b       	or	r24, r25
    137a:	8a 2b       	or	r24, r26
    137c:	8b 2b       	or	r24, r27
    137e:	09 f4       	brne	.+2      	; 0x1382 <i2c_if_update_reg+0x7c>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
			
			if (src == I2C_IF_UPDATE_SRC_NET && reg_s->cb != NULL)
    138a:	8a 85       	ldd	r24, Y+10	; 0x0a
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	09 f0       	breq	.+2      	; 0x1392 <i2c_if_update_reg+0x8c>
    1390:	ca c0       	rjmp	.+404    	; 0x1526 <i2c_if_update_reg+0x220>
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	fc 01       	movw	r30, r24
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	89 2b       	or	r24, r25
    139e:	09 f4       	brne	.+2      	; 0x13a2 <i2c_if_update_reg+0x9c>
    13a0:	c2 c0       	rjmp	.+388    	; 0x1526 <i2c_if_update_reg+0x220>
			{
				reg_s->cb(reg, reg_s->val, i2c->context);
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	fc 01       	movw	r30, r24
    13a8:	22 81       	ldd	r18, Z+2	; 0x02
    13aa:	33 81       	ldd	r19, Z+3	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	fc 01       	movw	r30, r24
    13b2:	43 a1       	ldd	r20, Z+35	; 0x23
    13b4:	54 a1       	ldd	r21, Z+36	; 0x24
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	fc 01       	movw	r30, r24
    13bc:	80 81       	ld	r24, Z
    13be:	68 2f       	mov	r22, r24
    13c0:	8d 81       	ldd	r24, Y+5	; 0x05
    13c2:	f9 01       	movw	r30, r18
    13c4:	09 95       	icall
			}
			break;
    13c6:	af c0       	rjmp	.+350    	; 0x1526 <i2c_if_update_reg+0x220>

		// --------------------------------------------
		case I2C_REG_FAULT_STATE:
			reg_s->val = (val == 0?0:1);
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	8e 81       	ldd	r24, Y+6	; 0x06
    13cc:	9f 81       	ldd	r25, Y+7	; 0x07
    13ce:	a8 85       	ldd	r26, Y+8	; 0x08
    13d0:	b9 85       	ldd	r27, Y+9	; 0x09
    13d2:	89 2b       	or	r24, r25
    13d4:	8a 2b       	or	r24, r26
    13d6:	8b 2b       	or	r24, r27
    13d8:	09 f4       	brne	.+2      	; 0x13dc <i2c_if_update_reg+0xd6>
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
			break;
    13e4:	a1 c0       	rjmp	.+322    	; 0x1528 <i2c_if_update_reg+0x222>
		
		// --------------------------------------------
		case I2C_REG_CURRENT:
			{
				I2C_IF_SHORT_SCALING(val,5);
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
    13e8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ea:	a8 85       	ldd	r26, Y+8	; 0x08
    13ec:	b9 85       	ldd	r27, Y+9	; 0x09
    13ee:	25 e0       	ldi	r18, 0x05	; 5
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__divmodsi4>
    13fe:	da 01       	movw	r26, r20
    1400:	c9 01       	movw	r24, r18
    1402:	8e 83       	std	Y+6, r24	; 0x06
    1404:	9f 83       	std	Y+7, r25	; 0x07
    1406:	a8 87       	std	Y+8, r26	; 0x08
    1408:	b9 87       	std	Y+9, r27	; 0x09
    140a:	8e 81       	ldd	r24, Y+6	; 0x06
    140c:	9f 81       	ldd	r25, Y+7	; 0x07
    140e:	a8 85       	ldd	r26, Y+8	; 0x08
    1410:	b9 85       	ldd	r27, Y+9	; 0x09
    1412:	bb 23       	and	r27, r27
    1414:	24 f4       	brge	.+8      	; 0x141e <i2c_if_update_reg+0x118>
    1416:	1e 82       	std	Y+6, r1	; 0x06
    1418:	1f 82       	std	Y+7, r1	; 0x07
    141a:	18 86       	std	Y+8, r1	; 0x08
    141c:	19 86       	std	Y+9, r1	; 0x09
    141e:	8e 81       	ldd	r24, Y+6	; 0x06
    1420:	9f 81       	ldd	r25, Y+7	; 0x07
    1422:	a8 85       	ldd	r26, Y+8	; 0x08
    1424:	b9 85       	ldd	r27, Y+9	; 0x09
    1426:	8f 3f       	cpi	r24, 0xFF	; 255
    1428:	91 05       	cpc	r25, r1
    142a:	a1 05       	cpc	r26, r1
    142c:	b1 05       	cpc	r27, r1
    142e:	49 f0       	breq	.+18     	; 0x1442 <i2c_if_update_reg+0x13c>
    1430:	44 f0       	brlt	.+16     	; 0x1442 <i2c_if_update_reg+0x13c>
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	8e 83       	std	Y+6, r24	; 0x06
    143c:	9f 83       	std	Y+7, r25	; 0x07
    143e:	a8 87       	std	Y+8, r26	; 0x08
    1440:	b9 87       	std	Y+9, r27	; 0x09
				reg_s->val = val;
    1442:	2e 81       	ldd	r18, Y+6	; 0x06
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	fc 01       	movw	r30, r24
    144a:	20 83       	st	Z, r18
			}			
			break;
    144c:	6d c0       	rjmp	.+218    	; 0x1528 <i2c_if_update_reg+0x222>
		
		// --------------------------------------------
		case I2C_REG_VOLTAGE: 
			{
				I2C_IF_SHORT_SCALING(val,25);
    144e:	8e 81       	ldd	r24, Y+6	; 0x06
    1450:	9f 81       	ldd	r25, Y+7	; 0x07
    1452:	a8 85       	ldd	r26, Y+8	; 0x08
    1454:	b9 85       	ldd	r27, Y+9	; 0x09
    1456:	29 e1       	ldi	r18, 0x19	; 25
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__divmodsi4>
    1466:	da 01       	movw	r26, r20
    1468:	c9 01       	movw	r24, r18
    146a:	8e 83       	std	Y+6, r24	; 0x06
    146c:	9f 83       	std	Y+7, r25	; 0x07
    146e:	a8 87       	std	Y+8, r26	; 0x08
    1470:	b9 87       	std	Y+9, r27	; 0x09
    1472:	8e 81       	ldd	r24, Y+6	; 0x06
    1474:	9f 81       	ldd	r25, Y+7	; 0x07
    1476:	a8 85       	ldd	r26, Y+8	; 0x08
    1478:	b9 85       	ldd	r27, Y+9	; 0x09
    147a:	bb 23       	and	r27, r27
    147c:	24 f4       	brge	.+8      	; 0x1486 <i2c_if_update_reg+0x180>
    147e:	1e 82       	std	Y+6, r1	; 0x06
    1480:	1f 82       	std	Y+7, r1	; 0x07
    1482:	18 86       	std	Y+8, r1	; 0x08
    1484:	19 86       	std	Y+9, r1	; 0x09
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	a8 85       	ldd	r26, Y+8	; 0x08
    148c:	b9 85       	ldd	r27, Y+9	; 0x09
    148e:	8f 3f       	cpi	r24, 0xFF	; 255
    1490:	91 05       	cpc	r25, r1
    1492:	a1 05       	cpc	r26, r1
    1494:	b1 05       	cpc	r27, r1
    1496:	49 f0       	breq	.+18     	; 0x14aa <i2c_if_update_reg+0x1a4>
    1498:	44 f0       	brlt	.+16     	; 0x14aa <i2c_if_update_reg+0x1a4>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	8e 83       	std	Y+6, r24	; 0x06
    14a4:	9f 83       	std	Y+7, r25	; 0x07
    14a6:	a8 87       	std	Y+8, r26	; 0x08
    14a8:	b9 87       	std	Y+9, r27	; 0x09
				reg_s->val = val;
    14aa:	2e 81       	ldd	r18, Y+6	; 0x06
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
			}
			break;
    14b4:	39 c0       	rjmp	.+114    	; 0x1528 <i2c_if_update_reg+0x222>
		
		// --------------------------------------------
		case I2C_REG_POWER: 
			{
				I2C_IF_SHORT_SCALING(val,125000);
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ba:	a8 85       	ldd	r26, Y+8	; 0x08
    14bc:	b9 85       	ldd	r27, Y+9	; 0x09
    14be:	28 e4       	ldi	r18, 0x48	; 72
    14c0:	38 ee       	ldi	r19, 0xE8	; 232
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__divmodsi4>
    14ce:	da 01       	movw	r26, r20
    14d0:	c9 01       	movw	r24, r18
    14d2:	8e 83       	std	Y+6, r24	; 0x06
    14d4:	9f 83       	std	Y+7, r25	; 0x07
    14d6:	a8 87       	std	Y+8, r26	; 0x08
    14d8:	b9 87       	std	Y+9, r27	; 0x09
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	a8 85       	ldd	r26, Y+8	; 0x08
    14e0:	b9 85       	ldd	r27, Y+9	; 0x09
    14e2:	bb 23       	and	r27, r27
    14e4:	24 f4       	brge	.+8      	; 0x14ee <i2c_if_update_reg+0x1e8>
    14e6:	1e 82       	std	Y+6, r1	; 0x06
    14e8:	1f 82       	std	Y+7, r1	; 0x07
    14ea:	18 86       	std	Y+8, r1	; 0x08
    14ec:	19 86       	std	Y+9, r1	; 0x09
    14ee:	8e 81       	ldd	r24, Y+6	; 0x06
    14f0:	9f 81       	ldd	r25, Y+7	; 0x07
    14f2:	a8 85       	ldd	r26, Y+8	; 0x08
    14f4:	b9 85       	ldd	r27, Y+9	; 0x09
    14f6:	8f 3f       	cpi	r24, 0xFF	; 255
    14f8:	91 05       	cpc	r25, r1
    14fa:	a1 05       	cpc	r26, r1
    14fc:	b1 05       	cpc	r27, r1
    14fe:	49 f0       	breq	.+18     	; 0x1512 <i2c_if_update_reg+0x20c>
    1500:	44 f0       	brlt	.+16     	; 0x1512 <i2c_if_update_reg+0x20c>
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	8e 83       	std	Y+6, r24	; 0x06
    150c:	9f 83       	std	Y+7, r25	; 0x07
    150e:	a8 87       	std	Y+8, r26	; 0x08
    1510:	b9 87       	std	Y+9, r27	; 0x09
				reg_s->val = val;
    1512:	2e 81       	ldd	r18, Y+6	; 0x06
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	fc 01       	movw	r30, r24
    151a:	20 83       	st	Z, r18
			}
			break;
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <i2c_if_update_reg+0x222>
			
		// --------------------------------------------	
		default: break;
    151e:	00 00       	nop
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <i2c_if_update_reg+0x222>
{
	i2c_if_reg_st *reg_s = &i2c->registers[reg];
	switch (reg)
	{
		// --------------------------------------------
		case I2C_REG_VERSION: break;
    1522:	00 00       	nop
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <i2c_if_update_reg+0x222>
			
			if (src == I2C_IF_UPDATE_SRC_NET && reg_s->cb != NULL)
			{
				reg_s->cb(reg, reg_s->val, i2c->context);
			}
			break;
    1526:	00 00       	nop
			
		// --------------------------------------------	
		default: break;
	}
	
}
    1528:	00 00       	nop
    152a:	2a 96       	adiw	r28, 0x0a	; 10
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <i2c_if_init>:

//==============================================================================================
void i2c_if_init(i2c_if_st* i2c, uint8_t addr, i2c_if_error_callback_t err_cb, void* context)
{
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	27 97       	sbiw	r28, 0x07	; 7
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	6b 83       	std	Y+3, r22	; 0x03
    154c:	4c 83       	std	Y+4, r20	; 0x04
    154e:	5d 83       	std	Y+5, r21	; 0x05
    1550:	2e 83       	std	Y+6, r18	; 0x06
    1552:	3f 83       	std	Y+7, r19	; 0x07
	this_i2c = i2c;
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	80 93 28 71 	sts	0x7128, r24	; 0x807128 <this_i2c>
    155c:	90 93 29 71 	sts	0x7129, r25	; 0x807129 <this_i2c+0x1>
	i2c->addr = addr & 0x7f;
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	2f 77       	andi	r18, 0x7F	; 127
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18
	
	// adapt the address
	TWI0.SADDR = (i2c->addr) << TWI_ADDRMASK_gp	| 0 << TWI_ADDREN_bp;	// Slave Address: addr
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	99 e0       	ldi	r25, 0x09	; 9
    1572:	29 81       	ldd	r18, Y+1	; 0x01
    1574:	3a 81       	ldd	r19, Y+2	; 0x02
    1576:	f9 01       	movw	r30, r18
    1578:	20 81       	ld	r18, Z
    157a:	22 0f       	add	r18, r18
    157c:	fc 01       	movw	r30, r24
    157e:	24 87       	std	Z+12, r18	; 0x0c
				 														// General Call Recognition Enable: disabled
	
	i2c->err_cb = err_cb;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	2c 81       	ldd	r18, Y+4	; 0x04
    1586:	3d 81       	ldd	r19, Y+5	; 0x05
    1588:	fc 01       	movw	r30, r24
    158a:	21 a3       	std	Z+33, r18	; 0x21
    158c:	32 a3       	std	Z+34, r19	; 0x22
	i2c->context = context;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	2e 81       	ldd	r18, Y+6	; 0x06
    1594:	3f 81       	ldd	r19, Y+7	; 0x07
    1596:	fc 01       	movw	r30, r24
    1598:	23 a3       	std	Z+35, r18	; 0x23
    159a:	34 a3       	std	Z+36, r19	; 0x24
	
	// create the register file
	i2c->registers[I2C_REG_VERSION].val =		I2C_IF_VERSION_SHORT;		i2c->registers[I2C_REG_VERSION].access = I2C_IF_ACCESS_READ_ONLY;			i2c->registers[I2C_REG_VERSION].cb = NULL;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	20 e1       	ldi	r18, 0x10	; 16
    15a2:	fc 01       	movw	r30, r24
    15a4:	21 83       	std	Z+1, r18	; 0x01
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	fc 01       	movw	r30, r24
    15ac:	12 82       	std	Z+2, r1	; 0x02
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	fc 01       	movw	r30, r24
    15b4:	13 82       	std	Z+3, r1	; 0x03
    15b6:	14 82       	std	Z+4, r1	; 0x04
	i2c->registers[I2C_REG_LOAD_SW_STATE].val = 0x00;						i2c->registers[I2C_REG_LOAD_SW_STATE].access = I2C_IF_ACCESS_READ_WRITE;	i2c->registers[I2C_REG_LOAD_SW_STATE].cb = NULL;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	fc 01       	movw	r30, r24
    15be:	15 82       	std	Z+5, r1	; 0x05
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	22 e0       	ldi	r18, 0x02	; 2
    15c6:	fc 01       	movw	r30, r24
    15c8:	26 83       	std	Z+6, r18	; 0x06
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	fc 01       	movw	r30, r24
    15d0:	17 82       	std	Z+7, r1	; 0x07
    15d2:	10 86       	std	Z+8, r1	; 0x08
	i2c->registers[I2C_REG_LED1_STATE].val =	0x00;						i2c->registers[I2C_REG_LED1_STATE].access = I2C_IF_ACCESS_READ_WRITE;		i2c->registers[I2C_REG_LED1_STATE].cb = NULL;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	fc 01       	movw	r30, r24
    15da:	11 86       	std	Z+9, r1	; 0x09
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	22 e0       	ldi	r18, 0x02	; 2
    15e2:	fc 01       	movw	r30, r24
    15e4:	22 87       	std	Z+10, r18	; 0x0a
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	fc 01       	movw	r30, r24
    15ec:	13 86       	std	Z+11, r1	; 0x0b
    15ee:	14 86       	std	Z+12, r1	; 0x0c
	i2c->registers[I2C_REG_LED2_STATE].val =	0x00;						i2c->registers[I2C_REG_LED2_STATE].access = I2C_IF_ACCESS_READ_WRITE;		i2c->registers[I2C_REG_LED2_STATE].cb = NULL;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	fc 01       	movw	r30, r24
    15f6:	15 86       	std	Z+13, r1	; 0x0d
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	22 e0       	ldi	r18, 0x02	; 2
    15fe:	fc 01       	movw	r30, r24
    1600:	26 87       	std	Z+14, r18	; 0x0e
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	fc 01       	movw	r30, r24
    1608:	17 86       	std	Z+15, r1	; 0x0f
    160a:	10 8a       	std	Z+16, r1	; 0x10
	i2c->registers[I2C_REG_FAULT_STATE].val =	0x00;						i2c->registers[I2C_REG_FAULT_STATE].access = I2C_IF_ACCESS_READ_ONLY;		i2c->registers[I2C_REG_FAULT_STATE].cb = NULL;
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	fc 01       	movw	r30, r24
    1612:	11 8a       	std	Z+17, r1	; 0x11
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	fc 01       	movw	r30, r24
    161a:	12 8a       	std	Z+18, r1	; 0x12
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	fc 01       	movw	r30, r24
    1622:	13 8a       	std	Z+19, r1	; 0x13
    1624:	14 8a       	std	Z+20, r1	; 0x14
	i2c->registers[I2C_REG_CURRENT].val =		0x00;						i2c->registers[I2C_REG_CURRENT].access = I2C_IF_ACCESS_READ_ONLY;			i2c->registers[I2C_REG_CURRENT].cb = NULL;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	fc 01       	movw	r30, r24
    162c:	15 8a       	std	Z+21, r1	; 0x15
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	fc 01       	movw	r30, r24
    1634:	16 8a       	std	Z+22, r1	; 0x16
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	fc 01       	movw	r30, r24
    163c:	17 8a       	std	Z+23, r1	; 0x17
    163e:	10 8e       	std	Z+24, r1	; 0x18
	i2c->registers[I2C_REG_VOLTAGE].val =		0x00;						i2c->registers[I2C_REG_VOLTAGE].access = I2C_IF_ACCESS_READ_ONLY;			i2c->registers[I2C_REG_VOLTAGE].cb = NULL;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	fc 01       	movw	r30, r24
    1646:	11 8e       	std	Z+25, r1	; 0x19
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	fc 01       	movw	r30, r24
    164e:	12 8e       	std	Z+26, r1	; 0x1a
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	fc 01       	movw	r30, r24
    1656:	13 8e       	std	Z+27, r1	; 0x1b
    1658:	14 8e       	std	Z+28, r1	; 0x1c
	i2c->registers[I2C_REG_POWER].val =			0x00;						i2c->registers[I2C_REG_POWER].access = I2C_IF_ACCESS_READ_ONLY;				i2c->registers[I2C_REG_POWER].cb = NULL;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	fc 01       	movw	r30, r24
    1660:	15 8e       	std	Z+29, r1	; 0x1d
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	fc 01       	movw	r30, r24
    1668:	16 8e       	std	Z+30, r1	; 0x1e
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	fc 01       	movw	r30, r24
    1670:	17 8e       	std	Z+31, r1	; 0x1f
    1672:	10 a2       	std	Z+32, r1	; 0x20

	i2c->bus_state = I2C_STATE_IDLE;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	fc 01       	movw	r30, r24
    167a:	15 a2       	std	Z+37, r1	; 0x25
	i2c->reg_addr = I2C_REG_VERSION;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	fc 01       	movw	r30, r24
    1682:	16 a2       	std	Z+38, r1	; 0x26
	
	// setup I2C
	I2C_0_set_address_callback(i2c_if_address_handler);
    1684:	8b e8       	ldi	r24, 0x8B	; 139
    1686:	9b e0       	ldi	r25, 0x0B	; 11
    1688:	0e 94 ff 19 	call	0x33fe	; 0x33fe <I2C_0_set_address_callback>
	I2C_0_set_read_callback(i2c_if_read_handler);
    168c:	81 ea       	ldi	r24, 0xA1	; 161
    168e:	9b e0       	ldi	r25, 0x0B	; 11
    1690:	0e 94 b1 19 	call	0x3362	; 0x3362 <I2C_0_set_read_callback>
	I2C_0_set_write_callback(i2c_if_write_handler);
    1694:	8f ed       	ldi	r24, 0xDF	; 223
    1696:	9b e0       	ldi	r25, 0x0B	; 11
    1698:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <I2C_0_set_write_callback>
	I2C_0_set_stop_callback(i2c_if_stop_handler);
    169c:	88 e4       	ldi	r24, 0x48	; 72
    169e:	9c e0       	ldi	r25, 0x0C	; 12
    16a0:	0e 94 26 1a 	call	0x344c	; 0x344c <I2C_0_set_stop_callback>
	I2C_0_set_collision_callback(i2c_if_collision_error_handler);
    16a4:	86 e5       	ldi	r24, 0x56	; 86
    16a6:	9c e0       	ldi	r25, 0x0C	; 12
    16a8:	0e 94 4d 1a 	call	0x349a	; 0x349a <I2C_0_set_collision_callback>
	I2C_0_set_bus_error_callback(i2c_if_bus_error_handler);
    16ac:	8f e7       	ldi	r24, 0x7F	; 127
    16ae:	9c e0       	ldi	r25, 0x0C	; 12
    16b0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <I2C_0_set_bus_error_callback>
	I2C_0_open();
    16b4:	0e 94 86 18 	call	0x310c	; 0x310c <I2C_0_open>
}
    16b8:	00 00       	nop
    16ba:	27 96       	adiw	r28, 0x07	; 7
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <i2c_if_set_reg_cb>:

//==============================================================================================
void i2c_if_set_reg_cb(i2c_if_st* i2c, I2C_IF_REG_en reg, i2c_if_command_callback_t cb)
{
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	27 97       	sbiw	r28, 0x07	; 7
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	6d 83       	std	Y+5, r22	; 0x05
    16da:	4e 83       	std	Y+6, r20	; 0x06
    16dc:	5f 83       	std	Y+7, r21	; 0x07
	i2c_if_reg_st *reg_s = &i2c->registers[reg];
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	2b 81       	ldd	r18, Y+3	; 0x03
    16f0:	3c 81       	ldd	r19, Y+4	; 0x04
    16f2:	82 0f       	add	r24, r18
    16f4:	93 1f       	adc	r25, r19
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	9a 83       	std	Y+2, r25	; 0x02
	reg_s->cb = cb;
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1700:	3f 81       	ldd	r19, Y+7	; 0x07
    1702:	fc 01       	movw	r30, r24
    1704:	22 83       	std	Z+2, r18	; 0x02
    1706:	33 83       	std	Z+3, r19	; 0x03
}
    1708:	00 00       	nop
    170a:	27 96       	adiw	r28, 0x07	; 7
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <i2c_if_address_handler>:

//==============================================================================================
void i2c_if_address_handler()
{
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	1f 92       	push	r1
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
	uint8_t slave_addr = I2C_0_read();
    1720:	0e 94 49 19 	call	0x3292	; 0x3292 <I2C_0_read>
    1724:	89 83       	std	Y+1, r24	; 0x01
	I2C_0_send_ack();
    1726:	0e 94 6d 19 	call	0x32da	; 0x32da <I2C_0_send_ack>
	this_i2c->bus_state = I2C_STATE_SLAVE_ADDR;
    172a:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    172e:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	fc 01       	movw	r30, r24
    1736:	25 a3       	std	Z+37, r18	; 0x25
}
    1738:	00 00       	nop
    173a:	0f 90       	pop	r0
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <i2c_if_read_handler>:

//==============================================================================================
void i2c_if_read_handler()
{	
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
	if (this_i2c->reg_addr < I2C_REGS_MAX)
    174a:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    174e:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1752:	fc 01       	movw	r30, r24
    1754:	86 a1       	ldd	r24, Z+38	; 0x26
    1756:	88 30       	cpi	r24, 0x08	; 8
    1758:	70 f5       	brcc	.+92     	; 0x17b6 <i2c_if_read_handler+0x74>
	{
		I2C_0_write(this_i2c->registers[this_i2c->reg_addr].val);
    175a:	20 91 28 71 	lds	r18, 0x7128	; 0x807128 <this_i2c>
    175e:	30 91 29 71 	lds	r19, 0x7129	; 0x807129 <this_i2c+0x1>
    1762:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    1766:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    176a:	fc 01       	movw	r30, r24
    176c:	86 a1       	ldd	r24, Z+38	; 0x26
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	82 0f       	add	r24, r18
    177c:	93 1f       	adc	r25, r19
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	fc 01       	movw	r30, r24
    1782:	80 81       	ld	r24, Z
    1784:	0e 94 54 19 	call	0x32a8	; 0x32a8 <I2C_0_write>
		this_i2c->reg_addr ++;
    1788:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    178c:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1790:	fc 01       	movw	r30, r24
    1792:	26 a1       	ldd	r18, Z+38	; 0x26
    1794:	2f 5f       	subi	r18, 0xFF	; 255
    1796:	fc 01       	movw	r30, r24
    1798:	26 a3       	std	Z+38, r18	; 0x26
		if (this_i2c->reg_addr >= I2C_REGS_MAX)
    179a:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    179e:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    17a2:	fc 01       	movw	r30, r24
    17a4:	86 a1       	ldd	r24, Z+38	; 0x26
    17a6:	88 30       	cpi	r24, 0x08	; 8
    17a8:	30 f0       	brcs	.+12     	; 0x17b6 <i2c_if_read_handler+0x74>
		{
			this_i2c->reg_addr = 0;
    17aa:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    17ae:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    17b2:	fc 01       	movw	r30, r24
    17b4:	16 a2       	std	Z+38, r1	; 0x26
		}
	}
}
    17b6:	00 00       	nop
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <i2c_if_write_handler>:

//==============================================================================================
void i2c_if_write_handler()
{
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	if (this_i2c->bus_state == I2C_STATE_SLAVE_ADDR)
    17ca:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    17ce:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    17d2:	fc 01       	movw	r30, r24
    17d4:	85 a1       	ldd	r24, Z+37	; 0x25
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	99 f4       	brne	.+38     	; 0x1800 <i2c_if_write_handler+0x42>
	{
		this_i2c->reg_addr = I2C_0_read() % I2C_REGS_MAX;
    17da:	00 91 28 71 	lds	r16, 0x7128	; 0x807128 <this_i2c>
    17de:	10 91 29 71 	lds	r17, 0x7129	; 0x807129 <this_i2c+0x1>
    17e2:	0e 94 49 19 	call	0x3292	; 0x3292 <I2C_0_read>
    17e6:	87 70       	andi	r24, 0x07	; 7
    17e8:	f8 01       	movw	r30, r16
    17ea:	86 a3       	std	Z+38, r24	; 0x26
		I2C_0_send_ack();
    17ec:	0e 94 6d 19 	call	0x32da	; 0x32da <I2C_0_send_ack>
		this_i2c->bus_state = I2C_STATE_DATA_WRITE;
    17f0:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    17f4:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    17f8:	23 e0       	ldi	r18, 0x03	; 3
    17fa:	fc 01       	movw	r30, r24
    17fc:	25 a3       	std	Z+37, r18	; 0x25
				I2C_0_send_nack();
			}
			else I2C_0_send_ack();
		}
	}
}
    17fe:	42 c0       	rjmp	.+132    	; 0x1884 <i2c_if_write_handler+0xc6>
	{
		this_i2c->reg_addr = I2C_0_read() % I2C_REGS_MAX;
		I2C_0_send_ack();
		this_i2c->bus_state = I2C_STATE_DATA_WRITE;
	}
	else if (this_i2c->bus_state == I2C_STATE_DATA_WRITE)
    1800:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    1804:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1808:	fc 01       	movw	r30, r24
    180a:	85 a1       	ldd	r24, Z+37	; 0x25
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	d1 f5       	brne	.+116    	; 0x1884 <i2c_if_write_handler+0xc6>
	{
		if (this_i2c->reg_addr < I2C_REGS_MAX)
    1810:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    1814:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1818:	fc 01       	movw	r30, r24
    181a:	86 a1       	ldd	r24, Z+38	; 0x26
    181c:	88 30       	cpi	r24, 0x08	; 8
    181e:	90 f5       	brcc	.+100    	; 0x1884 <i2c_if_write_handler+0xc6>
		{			
			i2c_if_update_reg(this_i2c, this_i2c->reg_addr, I2C_0_read(), I2C_IF_UPDATE_SRC_NET);
    1820:	0e 94 49 19 	call	0x3292	; 0x3292 <I2C_0_read>
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	20 91 28 71 	lds	r18, 0x7128	; 0x807128 <this_i2c>
    1830:	30 91 29 71 	lds	r19, 0x7129	; 0x807129 <this_i2c+0x1>
    1834:	f9 01       	movw	r30, r18
    1836:	66 a1       	ldd	r22, Z+38	; 0x26
    1838:	e0 91 28 71 	lds	r30, 0x7128	; 0x807128 <this_i2c>
    183c:	f0 91 29 71 	lds	r31, 0x7129	; 0x807129 <this_i2c+0x1>
    1840:	01 e0       	ldi	r16, 0x01	; 1
    1842:	9c 01       	movw	r18, r24
    1844:	ad 01       	movw	r20, r26
    1846:	cf 01       	movw	r24, r30
    1848:	0e 94 83 09 	call	0x1306	; 0x1306 <i2c_if_update_reg>
			
			this_i2c->reg_addr ++;
    184c:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    1850:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1854:	fc 01       	movw	r30, r24
    1856:	26 a1       	ldd	r18, Z+38	; 0x26
    1858:	2f 5f       	subi	r18, 0xFF	; 255
    185a:	fc 01       	movw	r30, r24
    185c:	26 a3       	std	Z+38, r18	; 0x26
			if (this_i2c->reg_addr == I2C_REGS_MAX)
    185e:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    1862:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1866:	fc 01       	movw	r30, r24
    1868:	86 a1       	ldd	r24, Z+38	; 0x26
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	49 f4       	brne	.+18     	; 0x1880 <i2c_if_write_handler+0xc2>
			{
				this_i2c->reg_addr = 0;
    186e:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    1872:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1876:	fc 01       	movw	r30, r24
    1878:	16 a2       	std	Z+38, r1	; 0x26
				I2C_0_send_nack();
    187a:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <I2C_0_send_nack>
			}
			else I2C_0_send_ack();
		}
	}
}
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <i2c_if_write_handler+0xc6>
			if (this_i2c->reg_addr == I2C_REGS_MAX)
			{
				this_i2c->reg_addr = 0;
				I2C_0_send_nack();
			}
			else I2C_0_send_ack();
    1880:	0e 94 6d 19 	call	0x32da	; 0x32da <I2C_0_send_ack>
		}
	}
}
    1884:	00 00       	nop
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <i2c_if_stop_handler>:

//==============================================================================================
void i2c_if_stop_handler()
{
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
	this_i2c->bus_state = I2C_STATE_IDLE;
    1898:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    189c:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    18a0:	fc 01       	movw	r30, r24
    18a2:	15 a2       	std	Z+37, r1	; 0x25
}
    18a4:	00 00       	nop
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <i2c_if_collision_error_handler>:

//==============================================================================================
void i2c_if_collision_error_handler()
{
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
	if (this_i2c->err_cb)
    18b4:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    18b8:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    18bc:	fc 01       	movw	r30, r24
    18be:	81 a1       	ldd	r24, Z+33	; 0x21
    18c0:	92 a1       	ldd	r25, Z+34	; 0x22
    18c2:	89 2b       	or	r24, r25
    18c4:	91 f0       	breq	.+36     	; 0x18ea <i2c_if_collision_error_handler+0x3e>
	{
		this_i2c->err_cb(I2C_ERROR_COLLISION, this_i2c->context);		
    18c6:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    18ca:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    18ce:	fc 01       	movw	r30, r24
    18d0:	21 a1       	ldd	r18, Z+33	; 0x21
    18d2:	32 a1       	ldd	r19, Z+34	; 0x22
    18d4:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    18d8:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    18dc:	fc 01       	movw	r30, r24
    18de:	83 a1       	ldd	r24, Z+35	; 0x23
    18e0:	94 a1       	ldd	r25, Z+36	; 0x24
    18e2:	bc 01       	movw	r22, r24
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	f9 01       	movw	r30, r18
    18e8:	09 95       	icall
	}
	this_i2c->bus_state = I2C_STATE_IDLE;
    18ea:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    18ee:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    18f2:	fc 01       	movw	r30, r24
    18f4:	15 a2       	std	Z+37, r1	; 0x25
}
    18f6:	00 00       	nop
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <i2c_if_bus_error_handler>:

//==============================================================================================
void i2c_if_bus_error_handler()
{
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	if (this_i2c->err_cb)
    1906:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    190a:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    190e:	fc 01       	movw	r30, r24
    1910:	81 a1       	ldd	r24, Z+33	; 0x21
    1912:	92 a1       	ldd	r25, Z+34	; 0x22
    1914:	89 2b       	or	r24, r25
    1916:	91 f0       	breq	.+36     	; 0x193c <i2c_if_bus_error_handler+0x3e>
	{
		this_i2c->err_cb(I2C_ERROR_BUS, this_i2c->context);
    1918:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    191c:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1920:	fc 01       	movw	r30, r24
    1922:	21 a1       	ldd	r18, Z+33	; 0x21
    1924:	32 a1       	ldd	r19, Z+34	; 0x22
    1926:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    192a:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    192e:	fc 01       	movw	r30, r24
    1930:	83 a1       	ldd	r24, Z+35	; 0x23
    1932:	94 a1       	ldd	r25, Z+36	; 0x24
    1934:	bc 01       	movw	r22, r24
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	f9 01       	movw	r30, r18
    193a:	09 95       	icall
	}
	this_i2c->bus_state = I2C_STATE_IDLE;
    193c:	80 91 28 71 	lds	r24, 0x7128	; 0x807128 <this_i2c>
    1940:	90 91 29 71 	lds	r25, 0x7129	; 0x807129 <this_i2c+0x1>
    1944:	fc 01       	movw	r30, r24
    1946:	15 a2       	std	Z+37, r1	; 0x25
    1948:	00 00       	nop
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	00 d0       	rcall	.+0      	; 0x1956 <PORTD_set_pin_dir+0x6>
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	91 05       	cpc	r25, r1
    1968:	e1 f0       	breq	.+56     	; 0x19a2 <PORTD_set_pin_dir+0x52>
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	91 05       	cpc	r25, r1
    196e:	71 f1       	breq	.+92     	; 0x19cc <PORTD_set_pin_dir+0x7c>
    1970:	89 2b       	or	r24, r25
    1972:	09 f0       	breq	.+2      	; 0x1976 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    1974:	3b c0       	rjmp	.+118    	; 0x19ec <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    1976:	8c e0       	ldi	r24, 0x0C	; 12
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	2c e0       	ldi	r18, 0x0C	; 12
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	f9 01       	movw	r30, r18
    1980:	20 81       	ld	r18, Z
    1982:	62 2f       	mov	r22, r18
    1984:	29 81       	ldd	r18, Y+1	; 0x01
    1986:	42 2f       	mov	r20, r18
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	21 e0       	ldi	r18, 0x01	; 1
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <PORTD_set_pin_dir+0x44>
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	4a 95       	dec	r20
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <PORTD_set_pin_dir+0x40>
    1998:	20 95       	com	r18
    199a:	26 23       	and	r18, r22
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
		break;
    19a0:	25 c0       	rjmp	.+74     	; 0x19ec <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    19a2:	8c e0       	ldi	r24, 0x0C	; 12
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	2c e0       	ldi	r18, 0x0C	; 12
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	f9 01       	movw	r30, r18
    19ac:	20 81       	ld	r18, Z
    19ae:	62 2f       	mov	r22, r18
    19b0:	29 81       	ldd	r18, Y+1	; 0x01
    19b2:	42 2f       	mov	r20, r18
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	21 e0       	ldi	r18, 0x01	; 1
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <PORTD_set_pin_dir+0x70>
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	4a 95       	dec	r20
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <PORTD_set_pin_dir+0x6c>
    19c4:	26 2b       	or	r18, r22
    19c6:	fc 01       	movw	r30, r24
    19c8:	20 83       	st	Z, r18
		break;
    19ca:	10 c0       	rjmp	.+32     	; 0x19ec <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	80 59       	subi	r24, 0x90	; 144
    19d4:	9b 4f       	sbci	r25, 0xFB	; 251
    19d6:	29 81       	ldd	r18, Y+1	; 0x01
    19d8:	22 2f       	mov	r18, r18
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	20 59       	subi	r18, 0x90	; 144
    19de:	3b 4f       	sbci	r19, 0xFB	; 251
    19e0:	f9 01       	movw	r30, r18
    19e2:	20 81       	ld	r18, Z
    19e4:	28 60       	ori	r18, 0x08	; 8
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18
		break;
    19ea:	00 00       	nop
	default:
		break;
	}
}
    19ec:	00 00       	nop
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <PORTD_set_pin_level+0x6>
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	88 23       	and	r24, r24
    1a0a:	a9 f0       	breq	.+42     	; 0x1a36 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
    1a0c:	8c e0       	ldi	r24, 0x0C	; 12
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	2c e0       	ldi	r18, 0x0C	; 12
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	f9 01       	movw	r30, r18
    1a16:	21 81       	ldd	r18, Z+1	; 0x01
    1a18:	62 2f       	mov	r22, r18
    1a1a:	29 81       	ldd	r18, Y+1	; 0x01
    1a1c:	42 2f       	mov	r20, r18
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	21 e0       	ldi	r18, 0x01	; 1
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <PORTD_set_pin_level+0x32>
    1a26:	22 0f       	add	r18, r18
    1a28:	33 1f       	adc	r19, r19
    1a2a:	4a 95       	dec	r20
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <PORTD_set_pin_level+0x2e>
    1a2e:	26 2b       	or	r18, r22
    1a30:	fc 01       	movw	r30, r24
    1a32:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
    1a34:	15 c0       	rjmp	.+42     	; 0x1a60 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
    1a36:	8c e0       	ldi	r24, 0x0C	; 12
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	2c e0       	ldi	r18, 0x0C	; 12
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	f9 01       	movw	r30, r18
    1a40:	21 81       	ldd	r18, Z+1	; 0x01
    1a42:	62 2f       	mov	r22, r18
    1a44:	29 81       	ldd	r18, Y+1	; 0x01
    1a46:	42 2f       	mov	r20, r18
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	21 e0       	ldi	r18, 0x01	; 1
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <PORTD_set_pin_level+0x5c>
    1a50:	22 0f       	add	r18, r18
    1a52:	33 1f       	adc	r19, r19
    1a54:	4a 95       	dec	r20
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <PORTD_set_pin_level+0x58>
    1a58:	20 95       	com	r18
    1a5a:	26 23       	and	r18, r22
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	21 83       	std	Z+1, r18	; 0x01
	}
}
    1a60:	00 00       	nop
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <LED1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED1_set_dir(const enum port_dir dir)
{
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	1f 92       	push	r1
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(5, dir);
    1a78:	69 81       	ldd	r22, Y+1	; 0x01
    1a7a:	85 e0       	ldi	r24, 0x05	; 5
    1a7c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <PORTD_set_pin_dir>
}
    1a80:	00 00       	nop
    1a82:	0f 90       	pop	r0
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	1f 92       	push	r1
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(5, level);
    1a96:	69 81       	ldd	r22, Y+1	; 0x01
    1a98:	85 e0       	ldi	r24, 0x05	; 5
    1a9a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PORTD_set_pin_level>
}
    1a9e:	00 00       	nop
    1aa0:	0f 90       	pop	r0
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <LED2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED2_set_dir(const enum port_dir dir)
{
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	1f 92       	push	r1
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(6, dir);
    1ab4:	69 81       	ldd	r22, Y+1	; 0x01
    1ab6:	86 e0       	ldi	r24, 0x06	; 6
    1ab8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <PORTD_set_pin_dir>
}
    1abc:	00 00       	nop
    1abe:	0f 90       	pop	r0
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <LED2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED2_set_level(const bool level)
{
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	1f 92       	push	r1
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(6, level);
    1ad2:	69 81       	ldd	r22, Y+1	; 0x01
    1ad4:	86 e0       	ldi	r24, 0x06	; 6
    1ad6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PORTD_set_pin_level>
}
    1ada:	00 00       	nop
    1adc:	0f 90       	pop	r0
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <leds_init>:

//==============================================================================================
// init_lo_power: the low power leds are connected to the DBG_SS1_SCL and DBG_SCK_SDA so they may
// be used as communication rather than LEDs (and then not initialized)
int leds_init(leds_st* dev, bool init_lo_power)
{
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <leds_init+0x6>
    1aea:	1f 92       	push	r1
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	6b 83       	std	Y+3, r22	; 0x03
	LED1_set_dir(PORT_DIR_OUT);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <LED1_set_dir>
	leds_set_state(dev, led0, false);
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <leds_set_state>
	LED2_set_dir(PORT_DIR_OUT);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <LED2_set_dir>
	leds_set_state(dev, led1, false);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <leds_set_state>
	
	dev->initialized = true;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	21 e0       	ldi	r18, 0x01	; 1
    1b20:	fc 01       	movw	r30, r24
    1b22:	24 8f       	std	Z+28, r18	; 0x1c
	return 0;
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
}
    1b28:	23 96       	adiw	r28, 0x03	; 3
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <leds_set_state>:

//==============================================================================================
void leds_set_state(leds_st* dev, leds_en led, bool state)
{
    1b34:	af 92       	push	r10
    1b36:	bf 92       	push	r11
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <leds_set_state+0x16>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <leds_set_state+0x18>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	6b 83       	std	Y+3, r22	; 0x03
    1b56:	4c 83       	std	Y+4, r20	; 0x04
	leds_set_blink(dev, led, state, 0, 0);
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e0       	ldi	r26, 0x00	; 0
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e9 81       	ldd	r30, Y+1	; 0x01
    1b64:	fa 81       	ldd	r31, Y+2	; 0x02
    1b66:	a1 2c       	mov	r10, r1
    1b68:	b1 2c       	mov	r11, r1
    1b6a:	65 01       	movw	r12, r10
    1b6c:	e1 2c       	mov	r14, r1
    1b6e:	f1 2c       	mov	r15, r1
    1b70:	87 01       	movw	r16, r14
    1b72:	9c 01       	movw	r18, r24
    1b74:	ad 01       	movw	r20, r26
    1b76:	6b 81       	ldd	r22, Y+3	; 0x03
    1b78:	cf 01       	movw	r24, r30
    1b7a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <leds_set_blink>
}
    1b7e:	00 00       	nop
    1b80:	24 96       	adiw	r28, 0x04	; 4
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	bf 90       	pop	r11
    1b98:	af 90       	pop	r10
    1b9a:	08 95       	ret

00001b9c <leds_set_blink>:

//==============================================================================================
void leds_set_blink(leds_st* dev, leds_en led, uint32_t on_time, uint32_t off_time, uint32_t offs)
{
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	65 97       	sbiw	r28, 0x15	; 21
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	8f 83       	std	Y+7, r24	; 0x07
    1bbc:	98 87       	std	Y+8, r25	; 0x08
    1bbe:	69 87       	std	Y+9, r22	; 0x09
    1bc0:	2a 87       	std	Y+10, r18	; 0x0a
    1bc2:	3b 87       	std	Y+11, r19	; 0x0b
    1bc4:	4c 87       	std	Y+12, r20	; 0x0c
    1bc6:	5d 87       	std	Y+13, r21	; 0x0d
    1bc8:	ee 86       	std	Y+14, r14	; 0x0e
    1bca:	ff 86       	std	Y+15, r15	; 0x0f
    1bcc:	08 8b       	std	Y+16, r16	; 0x10
    1bce:	19 8b       	std	Y+17, r17	; 0x11
    1bd0:	aa 8a       	std	Y+18, r10	; 0x12
    1bd2:	bb 8a       	std	Y+19, r11	; 0x13
    1bd4:	cc 8a       	std	Y+20, r12	; 0x14
    1bd6:	dd 8a       	std	Y+21, r13	; 0x15
	leds_state_st* l_state = (led == led0) ? (&dev->led0_state) : (&dev->led1_state);
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	88 23       	and	r24, r24
    1bdc:	19 f4       	brne	.+6      	; 0x1be4 <leds_set_blink+0x48>
    1bde:	8f 81       	ldd	r24, Y+7	; 0x07
    1be0:	98 85       	ldd	r25, Y+8	; 0x08
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <leds_set_blink+0x4e>
    1be4:	8f 81       	ldd	r24, Y+7	; 0x07
    1be6:	98 85       	ldd	r25, Y+8	; 0x08
    1be8:	0c 96       	adiw	r24, 0x0c	; 12
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	9a 83       	std	Y+2, r25	; 0x02
	uint32_t total_time = on_time + off_time;
    1bee:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bf0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bf2:	4c 85       	ldd	r20, Y+12	; 0x0c
    1bf4:	5d 85       	ldd	r21, Y+13	; 0x0d
    1bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bfa:	a8 89       	ldd	r26, Y+16	; 0x10
    1bfc:	b9 89       	ldd	r27, Y+17	; 0x11
    1bfe:	82 0f       	add	r24, r18
    1c00:	93 1f       	adc	r25, r19
    1c02:	a4 1f       	adc	r26, r20
    1c04:	b5 1f       	adc	r27, r21
    1c06:	8b 83       	std	Y+3, r24	; 0x03
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	ad 83       	std	Y+5, r26	; 0x05
    1c0c:	be 83       	std	Y+6, r27	; 0x06
	
	if (l_state->cur_tick > total_time)
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 85       	ldd	r18, Z+8	; 0x08
    1c16:	31 85       	ldd	r19, Z+9	; 0x09
    1c18:	42 85       	ldd	r20, Z+10	; 0x0a
    1c1a:	53 85       	ldd	r21, Z+11	; 0x0b
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	ad 81       	ldd	r26, Y+5	; 0x05
    1c22:	be 81       	ldd	r27, Y+6	; 0x06
    1c24:	82 17       	cp	r24, r18
    1c26:	93 07       	cpc	r25, r19
    1c28:	a4 07       	cpc	r26, r20
    1c2a:	b5 07       	cpc	r27, r21
    1c2c:	38 f4       	brcc	.+14     	; 0x1c3c <leds_set_blink+0xa0>
	{
		l_state->cur_tick = 0;
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	fc 01       	movw	r30, r24
    1c34:	10 86       	std	Z+8, r1	; 0x08
    1c36:	11 86       	std	Z+9, r1	; 0x09
    1c38:	12 86       	std	Z+10, r1	; 0x0a
    1c3a:	13 86       	std	Z+11, r1	; 0x0b
	}
	l_state->on_time = on_time;
    1c3c:	29 81       	ldd	r18, Y+1	; 0x01
    1c3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c44:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c46:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c48:	f9 01       	movw	r30, r18
    1c4a:	80 83       	st	Z, r24
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	a2 83       	std	Z+2, r26	; 0x02
    1c50:	b3 83       	std	Z+3, r27	; 0x03
	l_state->total_time = total_time;
    1c52:	29 81       	ldd	r18, Y+1	; 0x01
    1c54:	3a 81       	ldd	r19, Y+2	; 0x02
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	ad 81       	ldd	r26, Y+5	; 0x05
    1c5c:	be 81       	ldd	r27, Y+6	; 0x06
    1c5e:	f9 01       	movw	r30, r18
    1c60:	84 83       	std	Z+4, r24	; 0x04
    1c62:	95 83       	std	Z+5, r25	; 0x05
    1c64:	a6 83       	std	Z+6, r26	; 0x06
    1c66:	b7 83       	std	Z+7, r27	; 0x07
	
	//if (led == led0) LED1_set_level(current_state);
	//else if (led == led1) LED2_set_level(current_state);
}
    1c68:	00 00       	nop
    1c6a:	65 96       	adiw	r28, 0x15	; 21
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	bf 90       	pop	r11
    1c82:	af 90       	pop	r10
    1c84:	08 95       	ret

00001c86 <leds_tick>:

//==============================================================================================
void leds_tick(leds_st* dev)
{
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <leds_tick+0x6>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	9a 83       	std	Y+2, r25	; 0x02
	dev->global_tick ++;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	fc 01       	movw	r30, r24
    1c9a:	80 8d       	ldd	r24, Z+24	; 0x18
    1c9c:	91 8d       	ldd	r25, Z+25	; 0x19
    1c9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ca0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	b1 1d       	adc	r27, r1
    1ca8:	29 81       	ldd	r18, Y+1	; 0x01
    1caa:	3a 81       	ldd	r19, Y+2	; 0x02
    1cac:	f9 01       	movw	r30, r18
    1cae:	80 8f       	std	Z+24, r24	; 0x18
    1cb0:	91 8f       	std	Z+25, r25	; 0x19
    1cb2:	a2 8f       	std	Z+26, r26	; 0x1a
    1cb4:	b3 8f       	std	Z+27, r27	; 0x1b
	
	dev->led0_state.cur_tick ++;
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	fc 01       	movw	r30, r24
    1cbc:	80 85       	ldd	r24, Z+8	; 0x08
    1cbe:	91 85       	ldd	r25, Z+9	; 0x09
    1cc0:	a2 85       	ldd	r26, Z+10	; 0x0a
    1cc2:	b3 85       	ldd	r27, Z+11	; 0x0b
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	a1 1d       	adc	r26, r1
    1cc8:	b1 1d       	adc	r27, r1
    1cca:	29 81       	ldd	r18, Y+1	; 0x01
    1ccc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cce:	f9 01       	movw	r30, r18
    1cd0:	80 87       	std	Z+8, r24	; 0x08
    1cd2:	91 87       	std	Z+9, r25	; 0x09
    1cd4:	a2 87       	std	Z+10, r26	; 0x0a
    1cd6:	b3 87       	std	Z+11, r27	; 0x0b
	if (dev->led0_state.cur_tick >= dev->led0_state.total_time)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	fc 01       	movw	r30, r24
    1cde:	20 85       	ldd	r18, Z+8	; 0x08
    1ce0:	31 85       	ldd	r19, Z+9	; 0x09
    1ce2:	42 85       	ldd	r20, Z+10	; 0x0a
    1ce4:	53 85       	ldd	r21, Z+11	; 0x0b
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	fc 01       	movw	r30, r24
    1cec:	84 81       	ldd	r24, Z+4	; 0x04
    1cee:	95 81       	ldd	r25, Z+5	; 0x05
    1cf0:	a6 81       	ldd	r26, Z+6	; 0x06
    1cf2:	b7 81       	ldd	r27, Z+7	; 0x07
    1cf4:	28 17       	cp	r18, r24
    1cf6:	39 07       	cpc	r19, r25
    1cf8:	4a 07       	cpc	r20, r26
    1cfa:	5b 07       	cpc	r21, r27
    1cfc:	38 f0       	brcs	.+14     	; 0x1d0c <leds_tick+0x86>
	{
		dev->led0_state.cur_tick = 0;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	fc 01       	movw	r30, r24
    1d04:	10 86       	std	Z+8, r1	; 0x08
    1d06:	11 86       	std	Z+9, r1	; 0x09
    1d08:	12 86       	std	Z+10, r1	; 0x0a
    1d0a:	13 86       	std	Z+11, r1	; 0x0b
	}
	
	dev->led1_state.cur_tick ++;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	fc 01       	movw	r30, r24
    1d12:	84 89       	ldd	r24, Z+20	; 0x14
    1d14:	95 89       	ldd	r25, Z+21	; 0x15
    1d16:	a6 89       	ldd	r26, Z+22	; 0x16
    1d18:	b7 89       	ldd	r27, Z+23	; 0x17
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	b1 1d       	adc	r27, r1
    1d20:	29 81       	ldd	r18, Y+1	; 0x01
    1d22:	3a 81       	ldd	r19, Y+2	; 0x02
    1d24:	f9 01       	movw	r30, r18
    1d26:	84 8b       	std	Z+20, r24	; 0x14
    1d28:	95 8b       	std	Z+21, r25	; 0x15
    1d2a:	a6 8b       	std	Z+22, r26	; 0x16
    1d2c:	b7 8b       	std	Z+23, r27	; 0x17
	if (dev->led1_state.cur_tick >= dev->led1_state.total_time)
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	fc 01       	movw	r30, r24
    1d34:	24 89       	ldd	r18, Z+20	; 0x14
    1d36:	35 89       	ldd	r19, Z+21	; 0x15
    1d38:	46 89       	ldd	r20, Z+22	; 0x16
    1d3a:	57 89       	ldd	r21, Z+23	; 0x17
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	fc 01       	movw	r30, r24
    1d42:	80 89       	ldd	r24, Z+16	; 0x10
    1d44:	91 89       	ldd	r25, Z+17	; 0x11
    1d46:	a2 89       	ldd	r26, Z+18	; 0x12
    1d48:	b3 89       	ldd	r27, Z+19	; 0x13
    1d4a:	28 17       	cp	r18, r24
    1d4c:	39 07       	cpc	r19, r25
    1d4e:	4a 07       	cpc	r20, r26
    1d50:	5b 07       	cpc	r21, r27
    1d52:	38 f0       	brcs	.+14     	; 0x1d62 <leds_tick+0xdc>
	{
		dev->led1_state.cur_tick = 0;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	fc 01       	movw	r30, r24
    1d5a:	14 8a       	std	Z+20, r1	; 0x14
    1d5c:	15 8a       	std	Z+21, r1	; 0x15
    1d5e:	16 8a       	std	Z+22, r1	; 0x16
    1d60:	17 8a       	std	Z+23, r1	; 0x17
	}
	
	LED1_set_level(dev->led0_state.cur_tick < dev->led0_state.on_time);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 85       	ldd	r18, Z+8	; 0x08
    1d6a:	31 85       	ldd	r19, Z+9	; 0x09
    1d6c:	42 85       	ldd	r20, Z+10	; 0x0a
    1d6e:	53 85       	ldd	r21, Z+11	; 0x0b
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	fc 01       	movw	r30, r24
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	a2 81       	ldd	r26, Z+2	; 0x02
    1d7c:	b3 81       	ldd	r27, Z+3	; 0x03
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	28 17       	cp	r18, r24
    1d82:	39 07       	cpc	r19, r25
    1d84:	4a 07       	cpc	r20, r26
    1d86:	5b 07       	cpc	r21, r27
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <leds_tick+0x106>
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	86 2f       	mov	r24, r22
    1d8e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LED1_set_level>
	LED2_set_level(dev->led1_state.cur_tick < dev->led1_state.on_time);
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	fc 01       	movw	r30, r24
    1d98:	24 89       	ldd	r18, Z+20	; 0x14
    1d9a:	35 89       	ldd	r19, Z+21	; 0x15
    1d9c:	46 89       	ldd	r20, Z+22	; 0x16
    1d9e:	57 89       	ldd	r21, Z+23	; 0x17
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	fc 01       	movw	r30, r24
    1da6:	84 85       	ldd	r24, Z+12	; 0x0c
    1da8:	95 85       	ldd	r25, Z+13	; 0x0d
    1daa:	a6 85       	ldd	r26, Z+14	; 0x0e
    1dac:	b7 85       	ldd	r27, Z+15	; 0x0f
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	28 17       	cp	r18, r24
    1db2:	39 07       	cpc	r19, r25
    1db4:	4a 07       	cpc	r20, r26
    1db6:	5b 07       	cpc	r21, r27
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <leds_tick+0x136>
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	86 2f       	mov	r24, r22
    1dbe:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <LED2_set_level>
    1dc2:	00 00       	nop
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <init_system_data>:

#include <atmel_start.h>
#include "sigrow.h"

void init_system_data(uint32_t* mcu_type, uint8_t *uuid)
{
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	28 97       	sbiw	r28, 0x08	; 8
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	6f 83       	std	Y+7, r22	; 0x07
    1de2:	78 87       	std	Y+8, r23	; 0x08
	uint32_t mcu_t = 0;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	1a 82       	std	Y+2, r1	; 0x02
    1de8:	1b 82       	std	Y+3, r1	; 0x03
    1dea:	1c 82       	std	Y+4, r1	; 0x04
	mcu_t = SIGROW.DEVICEID0; mcu_t <<= 8;
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	91 e1       	ldi	r25, 0x11	; 17
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	ab 83       	std	Y+3, r26	; 0x03
    1e02:	bc 83       	std	Y+4, r27	; 0x04
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	ab 81       	ldd	r26, Y+3	; 0x03
    1e0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	a9 2f       	mov	r26, r25
    1e10:	98 2f       	mov	r25, r24
    1e12:	88 27       	eor	r24, r24
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	ab 83       	std	Y+3, r26	; 0x03
    1e1a:	bc 83       	std	Y+4, r27	; 0x04
	mcu_t |= SIGROW.DEVICEID1;  mcu_t <<= 8;
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	91 e1       	ldi	r25, 0x11	; 17
    1e20:	fc 01       	movw	r30, r24
    1e22:	81 81       	ldd	r24, Z+1	; 0x01
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	29 81       	ldd	r18, Y+1	; 0x01
    1e2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e30:	4b 81       	ldd	r20, Y+3	; 0x03
    1e32:	5c 81       	ldd	r21, Y+4	; 0x04
    1e34:	82 2b       	or	r24, r18
    1e36:	93 2b       	or	r25, r19
    1e38:	a4 2b       	or	r26, r20
    1e3a:	b5 2b       	or	r27, r21
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	ab 83       	std	Y+3, r26	; 0x03
    1e42:	bc 83       	std	Y+4, r27	; 0x04
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	ab 81       	ldd	r26, Y+3	; 0x03
    1e4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e4c:	ba 2f       	mov	r27, r26
    1e4e:	a9 2f       	mov	r26, r25
    1e50:	98 2f       	mov	r25, r24
    1e52:	88 27       	eor	r24, r24
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	ab 83       	std	Y+3, r26	; 0x03
    1e5a:	bc 83       	std	Y+4, r27	; 0x04
	mcu_t |= SIGROW.DEVICEID2;
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	91 e1       	ldi	r25, 0x11	; 17
    1e60:	fc 01       	movw	r30, r24
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	29 81       	ldd	r18, Y+1	; 0x01
    1e6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e70:	4b 81       	ldd	r20, Y+3	; 0x03
    1e72:	5c 81       	ldd	r21, Y+4	; 0x04
    1e74:	82 2b       	or	r24, r18
    1e76:	93 2b       	or	r25, r19
    1e78:	a4 2b       	or	r26, r20
    1e7a:	b5 2b       	or	r27, r21
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	ab 83       	std	Y+3, r26	; 0x03
    1e82:	bc 83       	std	Y+4, r27	; 0x04
	if (mcu_type) *mcu_type = mcu_t;
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	89 2b       	or	r24, r25
    1e8a:	59 f0       	breq	.+22     	; 0x1ea2 <init_system_data+0xd4>
    1e8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	ab 81       	ldd	r26, Y+3	; 0x03
    1e96:	bc 81       	ldd	r27, Y+4	; 0x04
    1e98:	f9 01       	movw	r30, r18
    1e9a:	80 83       	st	Z, r24
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	a2 83       	std	Z+2, r26	; 0x02
    1ea0:	b3 83       	std	Z+3, r27	; 0x03
	
	if (uuid)
    1ea2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea4:	98 85       	ldd	r25, Y+8	; 0x08
    1ea6:	89 2b       	or	r24, r25
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <init_system_data+0xde>
    1eaa:	8f c0       	rjmp	.+286    	; 0x1fca <init_system_data+0x1fc>
	{
		uuid[0] = SIGROW.SERNUM0;
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	91 e1       	ldi	r25, 0x11	; 17
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 89       	ldd	r18, Z+16	; 0x10
    1eb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb6:	98 85       	ldd	r25, Y+8	; 0x08
    1eb8:	fc 01       	movw	r30, r24
    1eba:	20 83       	st	Z, r18
		uuid[1] = SIGROW.SERNUM1;
    1ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ebe:	98 85       	ldd	r25, Y+8	; 0x08
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	31 e1       	ldi	r19, 0x11	; 17
    1ec6:	f9 01       	movw	r30, r18
    1ec8:	21 89       	ldd	r18, Z+17	; 0x11
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18
		uuid[2] = SIGROW.SERNUM2;
    1ece:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed0:	98 85       	ldd	r25, Y+8	; 0x08
    1ed2:	02 96       	adiw	r24, 0x02	; 2
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	31 e1       	ldi	r19, 0x11	; 17
    1ed8:	f9 01       	movw	r30, r18
    1eda:	22 89       	ldd	r18, Z+18	; 0x12
    1edc:	fc 01       	movw	r30, r24
    1ede:	20 83       	st	Z, r18
		uuid[3] = SIGROW.SERNUM3;
    1ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee2:	98 85       	ldd	r25, Y+8	; 0x08
    1ee4:	03 96       	adiw	r24, 0x03	; 3
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	31 e1       	ldi	r19, 0x11	; 17
    1eea:	f9 01       	movw	r30, r18
    1eec:	23 89       	ldd	r18, Z+19	; 0x13
    1eee:	fc 01       	movw	r30, r24
    1ef0:	20 83       	st	Z, r18
		uuid[4] = SIGROW.SERNUM4;
    1ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef4:	98 85       	ldd	r25, Y+8	; 0x08
    1ef6:	04 96       	adiw	r24, 0x04	; 4
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	31 e1       	ldi	r19, 0x11	; 17
    1efc:	f9 01       	movw	r30, r18
    1efe:	24 89       	ldd	r18, Z+20	; 0x14
    1f00:	fc 01       	movw	r30, r24
    1f02:	20 83       	st	Z, r18
		uuid[5] = SIGROW.SERNUM5;
    1f04:	8f 81       	ldd	r24, Y+7	; 0x07
    1f06:	98 85       	ldd	r25, Y+8	; 0x08
    1f08:	05 96       	adiw	r24, 0x05	; 5
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	31 e1       	ldi	r19, 0x11	; 17
    1f0e:	f9 01       	movw	r30, r18
    1f10:	25 89       	ldd	r18, Z+21	; 0x15
    1f12:	fc 01       	movw	r30, r24
    1f14:	20 83       	st	Z, r18
		uuid[6] = SIGROW.SERNUM6;
    1f16:	8f 81       	ldd	r24, Y+7	; 0x07
    1f18:	98 85       	ldd	r25, Y+8	; 0x08
    1f1a:	06 96       	adiw	r24, 0x06	; 6
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	31 e1       	ldi	r19, 0x11	; 17
    1f20:	f9 01       	movw	r30, r18
    1f22:	26 89       	ldd	r18, Z+22	; 0x16
    1f24:	fc 01       	movw	r30, r24
    1f26:	20 83       	st	Z, r18
		uuid[7] = SIGROW.SERNUM7;
    1f28:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2a:	98 85       	ldd	r25, Y+8	; 0x08
    1f2c:	07 96       	adiw	r24, 0x07	; 7
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	31 e1       	ldi	r19, 0x11	; 17
    1f32:	f9 01       	movw	r30, r18
    1f34:	27 89       	ldd	r18, Z+23	; 0x17
    1f36:	fc 01       	movw	r30, r24
    1f38:	20 83       	st	Z, r18
		uuid[8] = SIGROW.SERNUM8;
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	08 96       	adiw	r24, 0x08	; 8
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	31 e1       	ldi	r19, 0x11	; 17
    1f44:	f9 01       	movw	r30, r18
    1f46:	20 8d       	ldd	r18, Z+24	; 0x18
    1f48:	fc 01       	movw	r30, r24
    1f4a:	20 83       	st	Z, r18
		uuid[9] = SIGROW.SERNUM9;
    1f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4e:	98 85       	ldd	r25, Y+8	; 0x08
    1f50:	09 96       	adiw	r24, 0x09	; 9
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	31 e1       	ldi	r19, 0x11	; 17
    1f56:	f9 01       	movw	r30, r18
    1f58:	21 8d       	ldd	r18, Z+25	; 0x19
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	20 83       	st	Z, r18
		uuid[10] = SIGROW.SERNUM10;
    1f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f60:	98 85       	ldd	r25, Y+8	; 0x08
    1f62:	0a 96       	adiw	r24, 0x0a	; 10
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	31 e1       	ldi	r19, 0x11	; 17
    1f68:	f9 01       	movw	r30, r18
    1f6a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	20 83       	st	Z, r18
		uuid[11] = SIGROW.SERNUM11;
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
    1f72:	98 85       	ldd	r25, Y+8	; 0x08
    1f74:	0b 96       	adiw	r24, 0x0b	; 11
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	31 e1       	ldi	r19, 0x11	; 17
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1f7e:	fc 01       	movw	r30, r24
    1f80:	20 83       	st	Z, r18
		uuid[12] = SIGROW.SERNUM12;
    1f82:	8f 81       	ldd	r24, Y+7	; 0x07
    1f84:	98 85       	ldd	r25, Y+8	; 0x08
    1f86:	0c 96       	adiw	r24, 0x0c	; 12
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	31 e1       	ldi	r19, 0x11	; 17
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1f90:	fc 01       	movw	r30, r24
    1f92:	20 83       	st	Z, r18
		uuid[13] = SIGROW.SERNUM13;
    1f94:	8f 81       	ldd	r24, Y+7	; 0x07
    1f96:	98 85       	ldd	r25, Y+8	; 0x08
    1f98:	0d 96       	adiw	r24, 0x0d	; 13
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	31 e1       	ldi	r19, 0x11	; 17
    1f9e:	f9 01       	movw	r30, r18
    1fa0:	25 8d       	ldd	r18, Z+29	; 0x1d
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	20 83       	st	Z, r18
		uuid[14] = SIGROW.SERNUM14;
    1fa6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa8:	98 85       	ldd	r25, Y+8	; 0x08
    1faa:	0e 96       	adiw	r24, 0x0e	; 14
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	31 e1       	ldi	r19, 0x11	; 17
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	26 8d       	ldd	r18, Z+30	; 0x1e
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	20 83       	st	Z, r18
		uuid[15] = SIGROW.SERNUM15;
    1fb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fba:	98 85       	ldd	r25, Y+8	; 0x08
    1fbc:	0f 96       	adiw	r24, 0x0f	; 15
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	31 e1       	ldi	r19, 0x11	; 17
    1fc2:	f9 01       	movw	r30, r18
    1fc4:	27 8d       	ldd	r18, Z+31	; 0x1f
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	20 83       	st	Z, r18
	}
}
    1fca:	00 00       	nop
    1fcc:	28 96       	adiw	r28, 0x08	; 8
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret

00001fd8 <timer_init>:
{
	uint64_t v = timer.ovf_val;
	v <<= 16;
	v |= TCB0_CNT;
	return v;
}
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	28 97       	sbiw	r28, 0x08	; 8
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	69 83       	std	Y+1, r22	; 0x01
    1fe8:	7a 83       	std	Y+2, r23	; 0x02
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	4d 83       	std	Y+5, r20	; 0x05
    1ff0:	5e 83       	std	Y+6, r21	; 0x06
    1ff2:	2f 83       	std	Y+7, r18	; 0x07
    1ff4:	38 87       	std	Y+8, r19	; 0x08
    1ff6:	10 92 d1 70 	sts	0x70D1, r1	; 0x8070d1 <timer>
    1ffa:	10 92 d2 70 	sts	0x70D2, r1	; 0x8070d2 <timer+0x1>
    1ffe:	10 92 d3 70 	sts	0x70D3, r1	; 0x8070d3 <timer+0x2>
    2002:	10 92 d4 70 	sts	0x70D4, r1	; 0x8070d4 <timer+0x3>
    2006:	69 81       	ldd	r22, Y+1	; 0x01
    2008:	7a 81       	ldd	r23, Y+2	; 0x02
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__floatunsisf>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3b e1       	ldi	r19, 0x1B	; 27
    201a:	47 eb       	ldi	r20, 0xB7	; 183
    201c:	5b e4       	ldi	r21, 0x4B	; 75
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a e7       	ldi	r20, 0x7A	; 122
    2030:	54 e4       	ldi	r21, 0x44	; 68
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__divsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__divsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	80 93 d5 70 	sts	0x70D5, r24	; 0x8070d5 <timer+0x4>
    2062:	90 93 d6 70 	sts	0x70D6, r25	; 0x8070d6 <timer+0x5>
    2066:	a0 93 d7 70 	sts	0x70D7, r26	; 0x8070d7 <timer+0x6>
    206a:	b0 93 d8 70 	sts	0x70D8, r27	; 0x8070d8 <timer+0x7>
    206e:	80 91 d5 70 	lds	r24, 0x70D5	; 0x8070d5 <timer+0x4>
    2072:	90 91 d6 70 	lds	r25, 0x70D6	; 0x8070d6 <timer+0x5>
    2076:	a0 91 d7 70 	lds	r26, 0x70D7	; 0x8070d7 <timer+0x6>
    207a:	b0 91 d8 70 	lds	r27, 0x70D8	; 0x8070d8 <timer+0x7>
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__floatunsisf>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a e7       	ldi	r20, 0x7A	; 122
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3b e1       	ldi	r19, 0x1B	; 27
    20b6:	47 eb       	ldi	r20, 0xB7	; 183
    20b8:	5b e4       	ldi	r21, 0x4B	; 75
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__divsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	80 93 d9 70 	sts	0x70D9, r24	; 0x8070d9 <timer+0x8>
    20ca:	90 93 da 70 	sts	0x70DA, r25	; 0x8070da <timer+0x9>
    20ce:	a0 93 db 70 	sts	0x70DB, r26	; 0x8070db <timer+0xa>
    20d2:	b0 93 dc 70 	sts	0x70DC, r27	; 0x8070dc <timer+0xb>
    20d6:	80 91 d5 70 	lds	r24, 0x70D5	; 0x8070d5 <timer+0x4>
    20da:	90 91 d6 70 	lds	r25, 0x70D6	; 0x8070d6 <timer+0x5>
    20de:	a0 91 d7 70 	lds	r26, 0x70D7	; 0x8070d7 <timer+0x6>
    20e2:	b0 91 d8 70 	lds	r27, 0x70D8	; 0x8070d8 <timer+0x7>
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	a1 09       	sbc	r26, r1
    20ea:	b1 09       	sbc	r27, r1
    20ec:	80 93 dd 70 	sts	0x70DD, r24	; 0x8070dd <timer+0xc>
    20f0:	90 93 de 70 	sts	0x70DE, r25	; 0x8070de <timer+0xd>
    20f4:	a0 93 df 70 	sts	0x70DF, r26	; 0x8070df <timer+0xe>
    20f8:	b0 93 e0 70 	sts	0x70E0, r27	; 0x8070e0 <timer+0xf>
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	80 93 e1 70 	sts	0x70E1, r24	; 0x8070e1 <timer+0x10>
    2104:	90 93 e2 70 	sts	0x70E2, r25	; 0x8070e2 <timer+0x11>
    2108:	8f 81       	ldd	r24, Y+7	; 0x07
    210a:	98 85       	ldd	r25, Y+8	; 0x08
    210c:	80 93 e3 70 	sts	0x70E3, r24	; 0x8070e3 <timer+0x12>
    2110:	90 93 e4 70 	sts	0x70E4, r25	; 0x8070e4 <timer+0x13>
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	80 93 e5 70 	sts	0x70E5, r24	; 0x8070e5 <timer+0x14>
    211a:	00 00       	nop
    211c:	28 96       	adiw	r28, 0x08	; 8
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <timer_get_ticks_from_millisec>:
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	28 97       	sbiw	r28, 0x08	; 8
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	6d 83       	std	Y+5, r22	; 0x05
    2138:	7e 83       	std	Y+6, r23	; 0x06
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	6d 81       	ldd	r22, Y+5	; 0x05
    2140:	7e 81       	ldd	r23, Y+6	; 0x06
    2142:	8f 81       	ldd	r24, Y+7	; 0x07
    2144:	98 85       	ldd	r25, Y+8	; 0x08
    2146:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__floatunsisf>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	ab 83       	std	Y+3, r26	; 0x03
    2154:	bc 83       	std	Y+4, r27	; 0x04
    2156:	80 91 d9 70 	lds	r24, 0x70D9	; 0x8070d9 <timer+0x8>
    215a:	90 91 da 70 	lds	r25, 0x70DA	; 0x8070da <timer+0x9>
    215e:	a0 91 db 70 	lds	r26, 0x70DB	; 0x8070db <timer+0xa>
    2162:	b0 91 dc 70 	lds	r27, 0x70DC	; 0x8070dc <timer+0xb>
    2166:	9c 01       	movw	r18, r24
    2168:	ad 01       	movw	r20, r26
    216a:	69 81       	ldd	r22, Y+1	; 0x01
    216c:	7a 81       	ldd	r23, Y+2	; 0x02
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__divsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	ab 83       	std	Y+3, r26	; 0x03
    2180:	bc 83       	std	Y+4, r27	; 0x04
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	69 81       	ldd	r22, Y+1	; 0x01
    218c:	7a 81       	ldd	r23, Y+2	; 0x02
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__cmpsf2>
    2196:	88 23       	and	r24, r24
    2198:	44 f4       	brge	.+16     	; 0x21aa <timer_get_ticks_from_millisec+0x82>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e8       	ldi	r26, 0x80	; 128
    21a0:	bf e3       	ldi	r27, 0x3F	; 63
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	ab 83       	std	Y+3, r26	; 0x03
    21a8:	bc 83       	std	Y+4, r27	; 0x04
    21aa:	69 81       	ldd	r22, Y+1	; 0x01
    21ac:	7a 81       	ldd	r23, Y+2	; 0x02
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	28 96       	adiw	r28, 0x08	; 8
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <timer_get_time_short>:

//=========================================================================================
uint32_t timer_get_time_short(void)
{
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <timer_get_time_short+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <timer_get_time_short+0x8>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	uint32_t v = (timer.ovf_val & 0xFFFF) << 16;
    21d6:	80 91 d1 70 	lds	r24, 0x70D1	; 0x8070d1 <timer>
    21da:	90 91 d2 70 	lds	r25, 0x70D2	; 0x8070d2 <timer+0x1>
    21de:	a0 91 d3 70 	lds	r26, 0x70D3	; 0x8070d3 <timer+0x2>
    21e2:	b0 91 d4 70 	lds	r27, 0x70D4	; 0x8070d4 <timer+0x3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	99 27       	eor	r25, r25
    21ea:	88 27       	eor	r24, r24
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	ab 83       	std	Y+3, r26	; 0x03
    21f2:	bc 83       	std	Y+4, r27	; 0x04
	v |= TCB0_CNT;
    21f4:	8a e0       	ldi	r24, 0x0A	; 10
    21f6:	9b e0       	ldi	r25, 0x0B	; 11
    21f8:	fc 01       	movw	r30, r24
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	cc 01       	movw	r24, r24
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	29 81       	ldd	r18, Y+1	; 0x01
    2206:	3a 81       	ldd	r19, Y+2	; 0x02
    2208:	4b 81       	ldd	r20, Y+3	; 0x03
    220a:	5c 81       	ldd	r21, Y+4	; 0x04
    220c:	82 2b       	or	r24, r18
    220e:	93 2b       	or	r25, r19
    2210:	a4 2b       	or	r26, r20
    2212:	b5 2b       	or	r27, r21
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	ab 83       	std	Y+3, r26	; 0x03
    221a:	bc 83       	std	Y+4, r27	; 0x04
	return v;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	ab 81       	ldd	r26, Y+3	; 0x03
    2222:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	24 96       	adiw	r28, 0x04	; 4
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	08 95       	ret

00002234 <timer_event>:

//=========================================================================================
void timer_event(void)
{
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	if (!timer.initialized) return;
    2244:	90 91 e5 70 	lds	r25, 0x70E5	; 0x8070e5 <timer+0x14>
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 27       	eor	r24, r25
    224c:	88 23       	and	r24, r24
    224e:	09 f0       	breq	.+2      	; 0x2252 <timer_event+0x1e>
    2250:	5a c0       	rjmp	.+180    	; 0x2306 <timer_event+0xd2>
	timer.ovf_val ++;
    2252:	80 91 d1 70 	lds	r24, 0x70D1	; 0x8070d1 <timer>
    2256:	90 91 d2 70 	lds	r25, 0x70D2	; 0x8070d2 <timer+0x1>
    225a:	a0 91 d3 70 	lds	r26, 0x70D3	; 0x8070d3 <timer+0x2>
    225e:	b0 91 d4 70 	lds	r27, 0x70D4	; 0x8070d4 <timer+0x3>
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	a1 1d       	adc	r26, r1
    2266:	b1 1d       	adc	r27, r1
    2268:	80 93 d1 70 	sts	0x70D1, r24	; 0x8070d1 <timer>
    226c:	90 93 d2 70 	sts	0x70D2, r25	; 0x8070d2 <timer+0x1>
    2270:	a0 93 d3 70 	sts	0x70D3, r26	; 0x8070d3 <timer+0x2>
    2274:	b0 93 d4 70 	sts	0x70D4, r27	; 0x8070d4 <timer+0x3>
	
	if (timer.timer_current_ovf <= 0)
    2278:	80 91 dd 70 	lds	r24, 0x70DD	; 0x8070dd <timer+0xc>
    227c:	90 91 de 70 	lds	r25, 0x70DE	; 0x8070de <timer+0xd>
    2280:	a0 91 df 70 	lds	r26, 0x70DF	; 0x8070df <timer+0xe>
    2284:	b0 91 e0 70 	lds	r27, 0x70E0	; 0x8070e0 <timer+0xf>
    2288:	89 2b       	or	r24, r25
    228a:	8a 2b       	or	r24, r26
    228c:	8b 2b       	or	r24, r27
    228e:	39 f5       	brne	.+78     	; 0x22de <timer_event+0xaa>
	{
		timer.timer_current_ovf = timer.timer_ovf_till_callback;
    2290:	80 91 d5 70 	lds	r24, 0x70D5	; 0x8070d5 <timer+0x4>
    2294:	90 91 d6 70 	lds	r25, 0x70D6	; 0x8070d6 <timer+0x5>
    2298:	a0 91 d7 70 	lds	r26, 0x70D7	; 0x8070d7 <timer+0x6>
    229c:	b0 91 d8 70 	lds	r27, 0x70D8	; 0x8070d8 <timer+0x7>
    22a0:	80 93 dd 70 	sts	0x70DD, r24	; 0x8070dd <timer+0xc>
    22a4:	90 93 de 70 	sts	0x70DE, r25	; 0x8070de <timer+0xd>
    22a8:	a0 93 df 70 	sts	0x70DF, r26	; 0x8070df <timer+0xe>
    22ac:	b0 93 e0 70 	sts	0x70E0, r27	; 0x8070e0 <timer+0xf>
		if (timer.cb != NULL)
    22b0:	80 91 e1 70 	lds	r24, 0x70E1	; 0x8070e1 <timer+0x10>
    22b4:	90 91 e2 70 	lds	r25, 0x70E2	; 0x8070e2 <timer+0x11>
    22b8:	89 2b       	or	r24, r25
    22ba:	89 f0       	breq	.+34     	; 0x22de <timer_event+0xaa>
		{
			timer.cb(timer_get_time_short(), timer.cb_context);
    22bc:	00 91 e1 70 	lds	r16, 0x70E1	; 0x8070e1 <timer+0x10>
    22c0:	10 91 e2 70 	lds	r17, 0x70E2	; 0x8070e2 <timer+0x11>
    22c4:	e0 90 e3 70 	lds	r14, 0x70E3	; 0x8070e3 <timer+0x12>
    22c8:	f0 90 e4 70 	lds	r15, 0x70E4	; 0x8070e4 <timer+0x13>
    22cc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <timer_get_time_short>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	a7 01       	movw	r20, r14
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	f8 01       	movw	r30, r16
    22dc:	09 95       	icall
		}
	}
	
	timer.timer_current_ovf --;
    22de:	80 91 dd 70 	lds	r24, 0x70DD	; 0x8070dd <timer+0xc>
    22e2:	90 91 de 70 	lds	r25, 0x70DE	; 0x8070de <timer+0xd>
    22e6:	a0 91 df 70 	lds	r26, 0x70DF	; 0x8070df <timer+0xe>
    22ea:	b0 91 e0 70 	lds	r27, 0x70E0	; 0x8070e0 <timer+0xf>
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	a1 09       	sbc	r26, r1
    22f2:	b1 09       	sbc	r27, r1
    22f4:	80 93 dd 70 	sts	0x70DD, r24	; 0x8070dd <timer+0xc>
    22f8:	90 93 de 70 	sts	0x70DE, r25	; 0x8070de <timer+0xd>
    22fc:	a0 93 df 70 	sts	0x70DF, r26	; 0x8070df <timer+0xe>
    2300:	b0 93 e0 70 	sts	0x70E0, r27	; 0x8070e0 <timer+0xf>
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <timer_event+0xd4>
}

//=========================================================================================
void timer_event(void)
{
	if (!timer.initialized) return;
    2306:	00 00       	nop
			timer.cb(timer_get_time_short(), timer.cb_context);
		}
	}
	
	timer.timer_current_ovf --;
}
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	ef 90       	pop	r14
    2314:	08 95       	ret

00002316 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	system_init();
    231e:	0e 94 1a 18 	call	0x3034	; 0x3034 <system_init>
}
    2322:	00 00       	nop
    2324:	df 91       	pop	r29
    2326:	cf 91       	pop	r28
    2328:	08 95       	ret

0000232a <__vector_12>:

#include <app/timer.h>
#include <app/extint_events.h>

ISR(TCB0_INT_vect)
{
    232a:	1f 92       	push	r1
    232c:	0f 92       	push	r0
    232e:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    2332:	0f 92       	push	r0
    2334:	11 24       	eor	r1, r1
    2336:	2f 93       	push	r18
    2338:	3f 93       	push	r19
    233a:	4f 93       	push	r20
    233c:	5f 93       	push	r21
    233e:	6f 93       	push	r22
    2340:	7f 93       	push	r23
    2342:	8f 93       	push	r24
    2344:	9f 93       	push	r25
    2346:	af 93       	push	r26
    2348:	bf 93       	push	r27
    234a:	ef 93       	push	r30
    234c:	ff 93       	push	r31
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	timer_event();
    2356:	0e 94 1a 11 	call	0x2234	; 0x2234 <timer_event>
	TCB0.INTFLAGS = TCB_CAPT_bm;
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	9b e0       	ldi	r25, 0x0B	; 11
    235e:	21 e0       	ldi	r18, 0x01	; 1
    2360:	fc 01       	movw	r30, r24
    2362:	26 83       	std	Z+6, r18	; 0x06

	TCB0.INTFLAGS = TCB_OVF_bm;
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	9b e0       	ldi	r25, 0x0B	; 11
    2368:	22 e0       	ldi	r18, 0x02	; 2
    236a:	fc 01       	movw	r30, r24
    236c:	26 83       	std	Z+6, r18	; 0x06
}
    236e:	00 00       	nop
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	ff 91       	pop	r31
    2376:	ef 91       	pop	r30
    2378:	bf 91       	pop	r27
    237a:	af 91       	pop	r26
    237c:	9f 91       	pop	r25
    237e:	8f 91       	pop	r24
    2380:	7f 91       	pop	r23
    2382:	6f 91       	pop	r22
    2384:	5f 91       	pop	r21
    2386:	4f 91       	pop	r20
    2388:	3f 91       	pop	r19
    238a:	2f 91       	pop	r18
    238c:	0f 90       	pop	r0
    238e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    2392:	0f 90       	pop	r0
    2394:	1f 90       	pop	r1
    2396:	18 95       	reti

00002398 <__vector_29>:

ISR(PORTC_PORT_vect)
{
    2398:	1f 92       	push	r1
    239a:	0f 92       	push	r0
    239c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
    23a4:	2f 93       	push	r18
    23a6:	3f 93       	push	r19
    23a8:	4f 93       	push	r20
    23aa:	5f 93       	push	r21
    23ac:	6f 93       	push	r22
    23ae:	7f 93       	push	r23
    23b0:	8f 93       	push	r24
    23b2:	9f 93       	push	r25
    23b4:	af 93       	push	r26
    23b6:	bf 93       	push	r27
    23b8:	ef 93       	push	r30
    23ba:	ff 93       	push	r31
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	/* Insert your PORTC interrupt handling code here */
	extint_event_port_c();
    23c4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <extint_event_port_c>

	/* Clear interrupt flags */
	VPORTC_INTFLAGS = (1 << 0) | (1 << 1);
    23c8:	8b e0       	ldi	r24, 0x0B	; 11
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	23 e0       	ldi	r18, 0x03	; 3
    23ce:	fc 01       	movw	r30, r24
    23d0:	20 83       	st	Z, r18
}
    23d2:	00 00       	nop
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	ff 91       	pop	r31
    23da:	ef 91       	pop	r30
    23dc:	bf 91       	pop	r27
    23de:	af 91       	pop	r26
    23e0:	9f 91       	pop	r25
    23e2:	8f 91       	pop	r24
    23e4:	7f 91       	pop	r23
    23e6:	6f 91       	pop	r22
    23e8:	5f 91       	pop	r21
    23ea:	4f 91       	pop	r20
    23ec:	3f 91       	pop	r19
    23ee:	2f 91       	pop	r18
    23f0:	0f 90       	pop	r0
    23f2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    23f6:	0f 90       	pop	r0
    23f8:	1f 90       	pop	r1
    23fa:	18 95       	reti

000023fc <main>:
#include <atmel_start.h>
#include <app/app.h>

int main(void)
{
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2404:	0e 94 8b 11 	call	0x2316	; 0x2316 <atmel_start_init>

	/* Replace with your application code */
	app();
    2408:	0e 94 a9 06 	call	0xd52	; 0xd52 <app>
	while (1) 
	{
	}
    240c:	ff cf       	rjmp	.-2      	; 0x240c <main+0x10>

0000240e <ADC_0_init>:
   * \return The number of bits in the ADC conversion result
   */
uint8_t ADC_0_get_resolution()
{
	return (ADC0.CTRLA & ADC_RESSEL0_bm) ? 10 : 12;
}
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	96 e0       	ldi	r25, 0x06	; 6
    241a:	22 e0       	ldi	r18, 0x02	; 2
    241c:	fc 01       	movw	r30, r24
    241e:	21 83       	std	Z+1, r18	; 0x01
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	96 e0       	ldi	r25, 0x06	; 6
    2424:	21 ea       	ldi	r18, 0xA1	; 161
    2426:	fc 01       	movw	r30, r24
    2428:	23 83       	std	Z+3, r18	; 0x03
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	96 e0       	ldi	r25, 0x06	; 6
    242e:	21 e0       	ldi	r18, 0x01	; 1
    2430:	fc 01       	movw	r30, r24
    2432:	24 87       	std	Z+12, r18	; 0x0c
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	96 e0       	ldi	r25, 0x06	; 6
    2438:	2f ef       	ldi	r18, 0xFF	; 255
    243a:	fc 01       	movw	r30, r24
    243c:	25 83       	std	Z+5, r18	; 0x05
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	96 e0       	ldi	r25, 0x06	; 6
    2442:	21 e8       	ldi	r18, 0x81	; 129
    2444:	fc 01       	movw	r30, r24
    2446:	20 83       	st	Z, r18
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	08 95       	ret

00002450 <ADC_0_start_conversion>:
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	1f 92       	push	r1
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	96 e0       	ldi	r25, 0x06	; 6
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	36 e0       	ldi	r19, 0x06	; 6
    2464:	f9 01       	movw	r30, r18
    2466:	20 81       	ld	r18, Z
    2468:	2f 7d       	andi	r18, 0xDF	; 223
    246a:	fc 01       	movw	r30, r24
    246c:	20 83       	st	Z, r18
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	96 e0       	ldi	r25, 0x06	; 6
    2472:	29 81       	ldd	r18, Y+1	; 0x01
    2474:	fc 01       	movw	r30, r24
    2476:	20 87       	std	Z+8, r18	; 0x08
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	96 e0       	ldi	r25, 0x06	; 6
    247c:	21 e0       	ldi	r18, 0x01	; 1
    247e:	fc 01       	movw	r30, r24
    2480:	22 87       	std	Z+10, r18	; 0x0a
    2482:	00 00       	nop
    2484:	0f 90       	pop	r0
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <ADC_0_get_conversion_result>:
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	96 e0       	ldi	r25, 0x06	; 6
    2498:	fc 01       	movw	r30, r24
    249a:	80 89       	ldd	r24, Z+16	; 0x10
    249c:	91 89       	ldd	r25, Z+17	; 0x11
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <ADC_0_register_callback>:
 * \param[in] f Pointer to function to be called
 *
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <ADC_0_register_callback+0x6>
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	9a 83       	std	Y+2, r25	; 0x02
	ADC_0_cb = f;
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	80 93 2a 71 	sts	0x712A, r24	; 0x80712a <ADC_0_cb>
    24ba:	90 93 2b 71 	sts	0x712B, r25	; 0x80712b <ADC_0_cb+0x1>
}
    24be:	00 00       	nop
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	08 95       	ret

000024ca <__vector_24>:

ISR(ADC0_RESRDY_vect)
{
    24ca:	1f 92       	push	r1
    24cc:	0f 92       	push	r0
    24ce:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    24d2:	0f 92       	push	r0
    24d4:	11 24       	eor	r1, r1
    24d6:	2f 93       	push	r18
    24d8:	3f 93       	push	r19
    24da:	4f 93       	push	r20
    24dc:	5f 93       	push	r21
    24de:	6f 93       	push	r22
    24e0:	7f 93       	push	r23
    24e2:	8f 93       	push	r24
    24e4:	9f 93       	push	r25
    24e6:	af 93       	push	r26
    24e8:	bf 93       	push	r27
    24ea:	ef 93       	push	r30
    24ec:	ff 93       	push	r31
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	96 e0       	ldi	r25, 0x06	; 6
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	36 e0       	ldi	r19, 0x06	; 6
    24fe:	f9 01       	movw	r30, r18
    2500:	25 85       	ldd	r18, Z+13	; 0x0d
    2502:	21 60       	ori	r18, 0x01	; 1
    2504:	fc 01       	movw	r30, r24
    2506:	25 87       	std	Z+13, r18	; 0x0d

	if (ADC_0_cb != NULL) {
    2508:	80 91 2a 71 	lds	r24, 0x712A	; 0x80712a <ADC_0_cb>
    250c:	90 91 2b 71 	lds	r25, 0x712B	; 0x80712b <ADC_0_cb+0x1>
    2510:	89 2b       	or	r24, r25
    2512:	31 f0       	breq	.+12     	; 0x2520 <__vector_24+0x56>
		ADC_0_cb();
    2514:	80 91 2a 71 	lds	r24, 0x712A	; 0x80712a <ADC_0_cb>
    2518:	90 91 2b 71 	lds	r25, 0x712B	; 0x80712b <ADC_0_cb+0x1>
    251c:	fc 01       	movw	r30, r24
    251e:	09 95       	icall
	}
}
    2520:	00 00       	nop
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    2544:	0f 90       	pop	r0
    2546:	1f 90       	pop	r1
    2548:	18 95       	reti

0000254a <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    2552:	80 e8       	ldi	r24, 0x80	; 128
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	fc 01       	movw	r30, r24
    2558:	11 86       	std	Z+9, r1	; 0x09
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
    255a:	80 e0       	ldi	r24, 0x00	; 0
}
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	08 95       	ret

00002562 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	00 d0       	rcall	.+0      	; 0x2568 <ccp_write_io+0x6>
    2568:	1f 92       	push	r1
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	4b 81       	ldd	r20, Y+3	; 0x03
    257a:	68 ed       	ldi	r22, 0xD8	; 216
    257c:	0e 94 87 1a 	call	0x350e	; 0x350e <protected_write_io>
}
    2580:	00 00       	nop
    2582:	23 96       	adiw	r28, 0x03	; 3
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	08 95       	ret

0000258e <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(CLKCTRL.PLLCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run Standby: disabled */
	//		 | CLKCTRL_MULFAC_DISABLE_gc /* 1 */
	//		 | 0 << CLKCTRL_SOURCE_bp /* Select Source for PLL: disabled */);

	ccp_write_io((void *)&(CLKCTRL.OSCHFCTRLA),
    2596:	64 e2       	ldi	r22, 0x24	; 36
    2598:	88 e6       	ldi	r24, 0x68	; 104
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 b1 12 	call	0x2562	; 0x2562 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
    25a0:	80 e0       	ldi	r24, 0x00	; 0
}
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	08 95       	ret

000025a8 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    25b0:	78 94       	sei

	return 0;
    25b2:	80 e0       	ldi	r24, 0x00	; 0
}
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <PORTA_set_pin_pull_mode>:

/* Initialize registers */
void FLASH_0_initialization(void)
{
	FLASH_0_init();
}
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <PORTA_set_pin_pull_mode+0x6>
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <PORTA_set_pin_pull_mode+0x8>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	8b 83       	std	Y+3, r24	; 0x03
    25c8:	6c 83       	std	Y+4, r22	; 0x04
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	80 5f       	subi	r24, 0xF0	; 240
    25d2:	9b 4f       	sbci	r25, 0xFB	; 251
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	59 f4       	brne	.+22     	; 0x25f4 <PORTA_set_pin_pull_mode+0x3a>
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	fc 01       	movw	r30, r24
    25e4:	80 81       	ld	r24, Z
    25e6:	28 2f       	mov	r18, r24
    25e8:	28 60       	ori	r18, 0x08	; 8
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	fc 01       	movw	r30, r24
    25f0:	20 83       	st	Z, r18
    25f2:	0d c0       	rjmp	.+26     	; 0x260e <PORTA_set_pin_pull_mode+0x54>
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	88 23       	and	r24, r24
    25f8:	51 f4       	brne	.+20     	; 0x260e <PORTA_set_pin_pull_mode+0x54>
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	fc 01       	movw	r30, r24
    2600:	80 81       	ld	r24, Z
    2602:	28 2f       	mov	r18, r24
    2604:	27 7f       	andi	r18, 0xF7	; 247
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	fc 01       	movw	r30, r24
    260c:	20 83       	st	Z, r18
    260e:	00 00       	nop
    2610:	24 96       	adiw	r28, 0x04	; 4
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <PORTA_set_pin_dir>:
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	00 d0       	rcall	.+0      	; 0x2622 <PORTA_set_pin_dir+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	6a 83       	std	Y+2, r22	; 0x02
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	91 05       	cpc	r25, r1
    2634:	e1 f0       	breq	.+56     	; 0x266e <PORTA_set_pin_dir+0x52>
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	91 05       	cpc	r25, r1
    263a:	71 f1       	breq	.+92     	; 0x2698 <PORTA_set_pin_dir+0x7c>
    263c:	89 2b       	or	r24, r25
    263e:	09 f0       	breq	.+2      	; 0x2642 <PORTA_set_pin_dir+0x26>
    2640:	3b c0       	rjmp	.+118    	; 0x26b8 <PORTA_set_pin_dir+0x9c>
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	fc 01       	movw	r30, r24
    264c:	80 81       	ld	r24, Z
    264e:	68 2f       	mov	r22, r24
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	48 2f       	mov	r20, r24
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <PORTA_set_pin_dir+0x44>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	4a 95       	dec	r20
    2662:	e2 f7       	brpl	.-8      	; 0x265c <PORTA_set_pin_dir+0x40>
    2664:	80 95       	com	r24
    2666:	86 23       	and	r24, r22
    2668:	f9 01       	movw	r30, r18
    266a:	80 83       	st	Z, r24
    266c:	25 c0       	rjmp	.+74     	; 0x26b8 <PORTA_set_pin_dir+0x9c>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	fc 01       	movw	r30, r24
    2678:	80 81       	ld	r24, Z
    267a:	68 2f       	mov	r22, r24
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	48 2f       	mov	r20, r24
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	02 c0       	rjmp	.+4      	; 0x268c <PORTA_set_pin_dir+0x70>
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	4a 95       	dec	r20
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <PORTA_set_pin_dir+0x6c>
    2690:	86 2b       	or	r24, r22
    2692:	f9 01       	movw	r30, r18
    2694:	80 83       	st	Z, r24
    2696:	10 c0       	rjmp	.+32     	; 0x26b8 <PORTA_set_pin_dir+0x9c>
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	80 5f       	subi	r24, 0xF0	; 240
    26a0:	9b 4f       	sbci	r25, 0xFB	; 251
    26a2:	29 81       	ldd	r18, Y+1	; 0x01
    26a4:	22 2f       	mov	r18, r18
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	20 5f       	subi	r18, 0xF0	; 240
    26aa:	3b 4f       	sbci	r19, 0xFB	; 251
    26ac:	f9 01       	movw	r30, r18
    26ae:	20 81       	ld	r18, Z
    26b0:	28 60       	ori	r18, 0x08	; 8
    26b2:	fc 01       	movw	r30, r24
    26b4:	20 83       	st	Z, r18
    26b6:	00 00       	nop
    26b8:	00 00       	nop
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <PORTA_set_pin_level>:
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <PORTA_set_pin_level+0x6>
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	6a 83       	std	Y+2, r22	; 0x02
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	88 23       	and	r24, r24
    26d6:	a9 f0       	breq	.+42     	; 0x2702 <PORTA_set_pin_level+0x3e>
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	fc 01       	movw	r30, r24
    26e2:	81 81       	ldd	r24, Z+1	; 0x01
    26e4:	68 2f       	mov	r22, r24
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	48 2f       	mov	r20, r24
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <PORTA_set_pin_level+0x32>
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	4a 95       	dec	r20
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <PORTA_set_pin_level+0x2e>
    26fa:	86 2b       	or	r24, r22
    26fc:	f9 01       	movw	r30, r18
    26fe:	81 83       	std	Z+1, r24	; 0x01
    2700:	15 c0       	rjmp	.+42     	; 0x272c <PORTA_set_pin_level+0x68>
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	fc 01       	movw	r30, r24
    270c:	81 81       	ldd	r24, Z+1	; 0x01
    270e:	68 2f       	mov	r22, r24
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	48 2f       	mov	r20, r24
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <PORTA_set_pin_level+0x5c>
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	4a 95       	dec	r20
    2722:	e2 f7       	brpl	.-8      	; 0x271c <PORTA_set_pin_level+0x58>
    2724:	80 95       	com	r24
    2726:	86 23       	and	r24, r22
    2728:	f9 01       	movw	r30, r18
    272a:	81 83       	std	Z+1, r24	; 0x01
    272c:	00 00       	nop
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <PORTC_set_pin_pull_mode>:
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	00 d0       	rcall	.+0      	; 0x273e <PORTC_set_pin_pull_mode+0x6>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <PORTC_set_pin_pull_mode+0x8>
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	8b 83       	std	Y+3, r24	; 0x03
    2746:	6c 83       	std	Y+4, r22	; 0x04
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	80 5b       	subi	r24, 0xB0	; 176
    2750:	9b 4f       	sbci	r25, 0xFB	; 251
    2752:	89 83       	std	Y+1, r24	; 0x01
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	8c 81       	ldd	r24, Y+4	; 0x04
    2758:	81 30       	cpi	r24, 0x01	; 1
    275a:	59 f4       	brne	.+22     	; 0x2772 <PORTC_set_pin_pull_mode+0x3a>
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	fc 01       	movw	r30, r24
    2762:	80 81       	ld	r24, Z
    2764:	28 2f       	mov	r18, r24
    2766:	28 60       	ori	r18, 0x08	; 8
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	fc 01       	movw	r30, r24
    276e:	20 83       	st	Z, r18
    2770:	0d c0       	rjmp	.+26     	; 0x278c <PORTC_set_pin_pull_mode+0x54>
    2772:	8c 81       	ldd	r24, Y+4	; 0x04
    2774:	88 23       	and	r24, r24
    2776:	51 f4       	brne	.+20     	; 0x278c <PORTC_set_pin_pull_mode+0x54>
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	fc 01       	movw	r30, r24
    277e:	80 81       	ld	r24, Z
    2780:	28 2f       	mov	r18, r24
    2782:	27 7f       	andi	r18, 0xF7	; 247
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	fc 01       	movw	r30, r24
    278a:	20 83       	st	Z, r18
    278c:	00 00       	nop
    278e:	24 96       	adiw	r28, 0x04	; 4
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <PORTC_pin_set_inverted>:
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <PORTC_pin_set_inverted+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <PORTC_pin_set_inverted+0x8>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	8b 83       	std	Y+3, r24	; 0x03
    27a8:	6c 83       	std	Y+4, r22	; 0x04
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	88 2f       	mov	r24, r24
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	80 5b       	subi	r24, 0xB0	; 176
    27b2:	9b 4f       	sbci	r25, 0xFB	; 251
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	88 23       	and	r24, r24
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <PORTC_pin_set_inverted+0x3a>
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	fc 01       	movw	r30, r24
    27c4:	80 81       	ld	r24, Z
    27c6:	28 2f       	mov	r18, r24
    27c8:	20 68       	ori	r18, 0x80	; 128
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	fc 01       	movw	r30, r24
    27d0:	20 83       	st	Z, r18
    27d2:	0a c0       	rjmp	.+20     	; 0x27e8 <PORTC_pin_set_inverted+0x4e>
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	fc 01       	movw	r30, r24
    27da:	80 81       	ld	r24, Z
    27dc:	28 2f       	mov	r18, r24
    27de:	2f 77       	andi	r18, 0x7F	; 127
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	fc 01       	movw	r30, r24
    27e6:	20 83       	st	Z, r18
    27e8:	00 00       	nop
    27ea:	24 96       	adiw	r28, 0x04	; 4
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <PORTC_pin_set_isc>:
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <PORTC_pin_set_isc+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <PORTC_pin_set_isc+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	6c 83       	std	Y+4, r22	; 0x04
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	80 5b       	subi	r24, 0xB0	; 176
    280e:	9b 4f       	sbci	r25, 0xFB	; 251
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	9a 83       	std	Y+2, r25	; 0x02
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	fc 01       	movw	r30, r24
    281a:	80 81       	ld	r24, Z
    281c:	98 2f       	mov	r25, r24
    281e:	98 7f       	andi	r25, 0xF8	; 248
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	89 2b       	or	r24, r25
    2824:	28 2f       	mov	r18, r24
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	9a 81       	ldd	r25, Y+2	; 0x02
    282a:	fc 01       	movw	r30, r24
    282c:	20 83       	st	Z, r18
    282e:	00 00       	nop
    2830:	24 96       	adiw	r28, 0x04	; 4
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	08 95       	ret

0000283c <PORTC_set_pin_dir>:
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	00 d0       	rcall	.+0      	; 0x2842 <PORTC_set_pin_dir+0x6>
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	6a 83       	std	Y+2, r22	; 0x02
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	91 05       	cpc	r25, r1
    2854:	e1 f0       	breq	.+56     	; 0x288e <PORTC_set_pin_dir+0x52>
    2856:	82 30       	cpi	r24, 0x02	; 2
    2858:	91 05       	cpc	r25, r1
    285a:	71 f1       	breq	.+92     	; 0x28b8 <PORTC_set_pin_dir+0x7c>
    285c:	89 2b       	or	r24, r25
    285e:	09 f0       	breq	.+2      	; 0x2862 <PORTC_set_pin_dir+0x26>
    2860:	3b c0       	rjmp	.+118    	; 0x28d8 <PORTC_set_pin_dir+0x9c>
    2862:	88 e0       	ldi	r24, 0x08	; 8
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	28 e0       	ldi	r18, 0x08	; 8
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	f9 01       	movw	r30, r18
    286c:	20 81       	ld	r18, Z
    286e:	62 2f       	mov	r22, r18
    2870:	29 81       	ldd	r18, Y+1	; 0x01
    2872:	42 2f       	mov	r20, r18
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	21 e0       	ldi	r18, 0x01	; 1
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <PORTC_set_pin_dir+0x44>
    287c:	22 0f       	add	r18, r18
    287e:	33 1f       	adc	r19, r19
    2880:	4a 95       	dec	r20
    2882:	e2 f7       	brpl	.-8      	; 0x287c <PORTC_set_pin_dir+0x40>
    2884:	20 95       	com	r18
    2886:	26 23       	and	r18, r22
    2888:	fc 01       	movw	r30, r24
    288a:	20 83       	st	Z, r18
    288c:	25 c0       	rjmp	.+74     	; 0x28d8 <PORTC_set_pin_dir+0x9c>
    288e:	88 e0       	ldi	r24, 0x08	; 8
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	28 e0       	ldi	r18, 0x08	; 8
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	f9 01       	movw	r30, r18
    2898:	20 81       	ld	r18, Z
    289a:	62 2f       	mov	r22, r18
    289c:	29 81       	ldd	r18, Y+1	; 0x01
    289e:	42 2f       	mov	r20, r18
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	21 e0       	ldi	r18, 0x01	; 1
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <PORTC_set_pin_dir+0x70>
    28a8:	22 0f       	add	r18, r18
    28aa:	33 1f       	adc	r19, r19
    28ac:	4a 95       	dec	r20
    28ae:	e2 f7       	brpl	.-8      	; 0x28a8 <PORTC_set_pin_dir+0x6c>
    28b0:	26 2b       	or	r18, r22
    28b2:	fc 01       	movw	r30, r24
    28b4:	20 83       	st	Z, r18
    28b6:	10 c0       	rjmp	.+32     	; 0x28d8 <PORTC_set_pin_dir+0x9c>
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	80 5b       	subi	r24, 0xB0	; 176
    28c0:	9b 4f       	sbci	r25, 0xFB	; 251
    28c2:	29 81       	ldd	r18, Y+1	; 0x01
    28c4:	22 2f       	mov	r18, r18
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	20 5b       	subi	r18, 0xB0	; 176
    28ca:	3b 4f       	sbci	r19, 0xFB	; 251
    28cc:	f9 01       	movw	r30, r18
    28ce:	20 81       	ld	r18, Z
    28d0:	28 60       	ori	r18, 0x08	; 8
    28d2:	fc 01       	movw	r30, r24
    28d4:	20 83       	st	Z, r18
    28d6:	00 00       	nop
    28d8:	00 00       	nop
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	08 95       	ret

000028e4 <PORTC_set_pin_level>:
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <PORTC_set_pin_level+0x6>
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	6a 83       	std	Y+2, r22	; 0x02
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	88 23       	and	r24, r24
    28f6:	a9 f0       	breq	.+42     	; 0x2922 <PORTC_set_pin_level+0x3e>
    28f8:	88 e0       	ldi	r24, 0x08	; 8
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	28 e0       	ldi	r18, 0x08	; 8
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	f9 01       	movw	r30, r18
    2902:	21 81       	ldd	r18, Z+1	; 0x01
    2904:	62 2f       	mov	r22, r18
    2906:	29 81       	ldd	r18, Y+1	; 0x01
    2908:	42 2f       	mov	r20, r18
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	21 e0       	ldi	r18, 0x01	; 1
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <PORTC_set_pin_level+0x32>
    2912:	22 0f       	add	r18, r18
    2914:	33 1f       	adc	r19, r19
    2916:	4a 95       	dec	r20
    2918:	e2 f7       	brpl	.-8      	; 0x2912 <PORTC_set_pin_level+0x2e>
    291a:	26 2b       	or	r18, r22
    291c:	fc 01       	movw	r30, r24
    291e:	21 83       	std	Z+1, r18	; 0x01
    2920:	15 c0       	rjmp	.+42     	; 0x294c <PORTC_set_pin_level+0x68>
    2922:	88 e0       	ldi	r24, 0x08	; 8
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	28 e0       	ldi	r18, 0x08	; 8
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	f9 01       	movw	r30, r18
    292c:	21 81       	ldd	r18, Z+1	; 0x01
    292e:	62 2f       	mov	r22, r18
    2930:	29 81       	ldd	r18, Y+1	; 0x01
    2932:	42 2f       	mov	r20, r18
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	21 e0       	ldi	r18, 0x01	; 1
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <PORTC_set_pin_level+0x5c>
    293c:	22 0f       	add	r18, r18
    293e:	33 1f       	adc	r19, r19
    2940:	4a 95       	dec	r20
    2942:	e2 f7       	brpl	.-8      	; 0x293c <PORTC_set_pin_level+0x58>
    2944:	20 95       	com	r18
    2946:	26 23       	and	r18, r22
    2948:	fc 01       	movw	r30, r24
    294a:	21 83       	std	Z+1, r18	; 0x01
    294c:	00 00       	nop
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	08 95       	ret

00002958 <PORTD_set_pin_pull_mode>:
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	00 d0       	rcall	.+0      	; 0x295e <PORTD_set_pin_pull_mode+0x6>
    295e:	00 d0       	rcall	.+0      	; 0x2960 <PORTD_set_pin_pull_mode+0x8>
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	8b 83       	std	Y+3, r24	; 0x03
    2966:	6c 83       	std	Y+4, r22	; 0x04
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	88 2f       	mov	r24, r24
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	80 59       	subi	r24, 0x90	; 144
    2970:	9b 4f       	sbci	r25, 0xFB	; 251
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	9a 83       	std	Y+2, r25	; 0x02
    2976:	8c 81       	ldd	r24, Y+4	; 0x04
    2978:	81 30       	cpi	r24, 0x01	; 1
    297a:	59 f4       	brne	.+22     	; 0x2992 <PORTD_set_pin_pull_mode+0x3a>
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	fc 01       	movw	r30, r24
    2982:	80 81       	ld	r24, Z
    2984:	28 2f       	mov	r18, r24
    2986:	28 60       	ori	r18, 0x08	; 8
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	fc 01       	movw	r30, r24
    298e:	20 83       	st	Z, r18
    2990:	0d c0       	rjmp	.+26     	; 0x29ac <PORTD_set_pin_pull_mode+0x54>
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	88 23       	and	r24, r24
    2996:	51 f4       	brne	.+20     	; 0x29ac <PORTD_set_pin_pull_mode+0x54>
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	fc 01       	movw	r30, r24
    299e:	80 81       	ld	r24, Z
    29a0:	28 2f       	mov	r18, r24
    29a2:	27 7f       	andi	r18, 0xF7	; 247
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	9a 81       	ldd	r25, Y+2	; 0x02
    29a8:	fc 01       	movw	r30, r24
    29aa:	20 83       	st	Z, r18
    29ac:	00 00       	nop
    29ae:	24 96       	adiw	r28, 0x04	; 4
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	08 95       	ret

000029ba <PORTD_pin_set_isc>:
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <PORTD_pin_set_isc+0x6>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <PORTD_pin_set_isc+0x8>
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	8b 83       	std	Y+3, r24	; 0x03
    29c8:	6c 83       	std	Y+4, r22	; 0x04
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	88 2f       	mov	r24, r24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	80 59       	subi	r24, 0x90	; 144
    29d2:	9b 4f       	sbci	r25, 0xFB	; 251
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	9a 81       	ldd	r25, Y+2	; 0x02
    29dc:	fc 01       	movw	r30, r24
    29de:	80 81       	ld	r24, Z
    29e0:	98 2f       	mov	r25, r24
    29e2:	98 7f       	andi	r25, 0xF8	; 248
    29e4:	8c 81       	ldd	r24, Y+4	; 0x04
    29e6:	89 2b       	or	r24, r25
    29e8:	28 2f       	mov	r18, r24
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	9a 81       	ldd	r25, Y+2	; 0x02
    29ee:	fc 01       	movw	r30, r24
    29f0:	20 83       	st	Z, r18
    29f2:	00 00       	nop
    29f4:	24 96       	adiw	r28, 0x04	; 4
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	08 95       	ret

00002a00 <PORTD_set_pin_dir>:
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <PORTD_set_pin_dir+0x6>
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	6a 83       	std	Y+2, r22	; 0x02
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	91 05       	cpc	r25, r1
    2a18:	e1 f0       	breq	.+56     	; 0x2a52 <PORTD_set_pin_dir+0x52>
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	71 f1       	breq	.+92     	; 0x2a7c <PORTD_set_pin_dir+0x7c>
    2a20:	89 2b       	or	r24, r25
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <PORTD_set_pin_dir+0x26>
    2a24:	3b c0       	rjmp	.+118    	; 0x2a9c <PORTD_set_pin_dir+0x9c>
    2a26:	8c e0       	ldi	r24, 0x0C	; 12
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	2c e0       	ldi	r18, 0x0C	; 12
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	f9 01       	movw	r30, r18
    2a30:	20 81       	ld	r18, Z
    2a32:	62 2f       	mov	r22, r18
    2a34:	29 81       	ldd	r18, Y+1	; 0x01
    2a36:	42 2f       	mov	r20, r18
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	21 e0       	ldi	r18, 0x01	; 1
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <PORTD_set_pin_dir+0x44>
    2a40:	22 0f       	add	r18, r18
    2a42:	33 1f       	adc	r19, r19
    2a44:	4a 95       	dec	r20
    2a46:	e2 f7       	brpl	.-8      	; 0x2a40 <PORTD_set_pin_dir+0x40>
    2a48:	20 95       	com	r18
    2a4a:	26 23       	and	r18, r22
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	20 83       	st	Z, r18
    2a50:	25 c0       	rjmp	.+74     	; 0x2a9c <PORTD_set_pin_dir+0x9c>
    2a52:	8c e0       	ldi	r24, 0x0C	; 12
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	2c e0       	ldi	r18, 0x0C	; 12
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	f9 01       	movw	r30, r18
    2a5c:	20 81       	ld	r18, Z
    2a5e:	62 2f       	mov	r22, r18
    2a60:	29 81       	ldd	r18, Y+1	; 0x01
    2a62:	42 2f       	mov	r20, r18
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	21 e0       	ldi	r18, 0x01	; 1
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <PORTD_set_pin_dir+0x70>
    2a6c:	22 0f       	add	r18, r18
    2a6e:	33 1f       	adc	r19, r19
    2a70:	4a 95       	dec	r20
    2a72:	e2 f7       	brpl	.-8      	; 0x2a6c <PORTD_set_pin_dir+0x6c>
    2a74:	26 2b       	or	r18, r22
    2a76:	fc 01       	movw	r30, r24
    2a78:	20 83       	st	Z, r18
    2a7a:	10 c0       	rjmp	.+32     	; 0x2a9c <PORTD_set_pin_dir+0x9c>
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	88 2f       	mov	r24, r24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	80 59       	subi	r24, 0x90	; 144
    2a84:	9b 4f       	sbci	r25, 0xFB	; 251
    2a86:	29 81       	ldd	r18, Y+1	; 0x01
    2a88:	22 2f       	mov	r18, r18
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	20 59       	subi	r18, 0x90	; 144
    2a8e:	3b 4f       	sbci	r19, 0xFB	; 251
    2a90:	f9 01       	movw	r30, r18
    2a92:	20 81       	ld	r18, Z
    2a94:	28 60       	ori	r18, 0x08	; 8
    2a96:	fc 01       	movw	r30, r24
    2a98:	20 83       	st	Z, r18
    2a9a:	00 00       	nop
    2a9c:	00 00       	nop
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <PORTD_set_pin_level>:
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <PORTD_set_pin_level+0x6>
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	6a 83       	std	Y+2, r22	; 0x02
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	88 23       	and	r24, r24
    2aba:	a9 f0       	breq	.+42     	; 0x2ae6 <PORTD_set_pin_level+0x3e>
    2abc:	8c e0       	ldi	r24, 0x0C	; 12
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	2c e0       	ldi	r18, 0x0C	; 12
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	21 81       	ldd	r18, Z+1	; 0x01
    2ac8:	62 2f       	mov	r22, r18
    2aca:	29 81       	ldd	r18, Y+1	; 0x01
    2acc:	42 2f       	mov	r20, r18
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	21 e0       	ldi	r18, 0x01	; 1
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <PORTD_set_pin_level+0x32>
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	4a 95       	dec	r20
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <PORTD_set_pin_level+0x2e>
    2ade:	26 2b       	or	r18, r22
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	21 83       	std	Z+1, r18	; 0x01
    2ae4:	15 c0       	rjmp	.+42     	; 0x2b10 <PORTD_set_pin_level+0x68>
    2ae6:	8c e0       	ldi	r24, 0x0C	; 12
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	2c e0       	ldi	r18, 0x0C	; 12
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	f9 01       	movw	r30, r18
    2af0:	21 81       	ldd	r18, Z+1	; 0x01
    2af2:	62 2f       	mov	r22, r18
    2af4:	29 81       	ldd	r18, Y+1	; 0x01
    2af6:	42 2f       	mov	r20, r18
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	21 e0       	ldi	r18, 0x01	; 1
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <PORTD_set_pin_level+0x5c>
    2b00:	22 0f       	add	r18, r18
    2b02:	33 1f       	adc	r19, r19
    2b04:	4a 95       	dec	r20
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <PORTD_set_pin_level+0x58>
    2b08:	20 95       	com	r18
    2b0a:	26 23       	and	r18, r22
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	21 83       	std	Z+1, r18	; 0x01
    2b10:	00 00       	nop
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <PA0_set_dir>:
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	1f 92       	push	r1
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	69 81       	ldd	r22, Y+1	; 0x01
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	0e 94 0e 13 	call	0x261c	; 0x261c <PORTA_set_pin_dir>
    2b30:	00 00       	nop
    2b32:	0f 90       	pop	r0
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	08 95       	ret

00002b3a <PA0_set_level>:
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	1f 92       	push	r1
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	69 81       	ldd	r22, Y+1	; 0x01
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <PORTA_set_pin_level>
    2b4e:	00 00       	nop
    2b50:	0f 90       	pop	r0
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

00002b58 <PA1_set_pull_mode>:
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	1f 92       	push	r1
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	69 81       	ldd	r22, Y+1	; 0x01
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	0e 94 dd 12 	call	0x25ba	; 0x25ba <PORTA_set_pin_pull_mode>
    2b6c:	00 00       	nop
    2b6e:	0f 90       	pop	r0
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	08 95       	ret

00002b76 <PA1_set_dir>:
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	1f 92       	push	r1
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	69 81       	ldd	r22, Y+1	; 0x01
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	0e 94 0e 13 	call	0x261c	; 0x261c <PORTA_set_pin_dir>
    2b8a:	00 00       	nop
    2b8c:	0f 90       	pop	r0
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	08 95       	ret

00002b94 <LOAD_SWITCH_EN_set_dir>:
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	1f 92       	push	r1
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	69 81       	ldd	r22, Y+1	; 0x01
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	0e 94 1e 14 	call	0x283c	; 0x283c <PORTC_set_pin_dir>
    2ba8:	00 00       	nop
    2baa:	0f 90       	pop	r0
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	08 95       	ret

00002bb2 <LOAD_SWITCH_EN_set_level>:
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	1f 92       	push	r1
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	69 81       	ldd	r22, Y+1	; 0x01
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <PORTC_set_pin_level>
    2bc6:	00 00       	nop
    2bc8:	0f 90       	pop	r0
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

00002bd0 <LOAD_SWITCH_FAULT_set_pull_mode>:
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	1f 92       	push	r1
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	69 81       	ldd	r22, Y+1	; 0x01
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	0e 94 9c 13 	call	0x2738	; 0x2738 <PORTC_set_pin_pull_mode>
    2be4:	00 00       	nop
    2be6:	0f 90       	pop	r0
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	08 95       	ret

00002bee <LOAD_SWITCH_FAULT_set_dir>:
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	1f 92       	push	r1
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	69 81       	ldd	r22, Y+1	; 0x01
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	0e 94 1e 14 	call	0x283c	; 0x283c <PORTC_set_pin_dir>
    2c02:	00 00       	nop
    2c04:	0f 90       	pop	r0
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	08 95       	ret

00002c0c <LOAD_SWITCH_FAULT_set_isc>:
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	1f 92       	push	r1
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	69 81       	ldd	r22, Y+1	; 0x01
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <PORTC_pin_set_isc>
    2c20:	00 00       	nop
    2c22:	0f 90       	pop	r0
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	08 95       	ret

00002c2a <LOAD_SWITCH_FAULT_set_inverted>:
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	1f 92       	push	r1
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	69 81       	ldd	r22, Y+1	; 0x01
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	0e 94 cd 13 	call	0x279a	; 0x279a <PORTC_pin_set_inverted>
    2c3e:	00 00       	nop
    2c40:	0f 90       	pop	r0
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	08 95       	ret

00002c48 <LOAD_SWITCH_FAULT_set_level>:
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	1f 92       	push	r1
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	69 81       	ldd	r22, Y+1	; 0x01
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	0e 94 72 14 	call	0x28e4	; 0x28e4 <PORTC_set_pin_level>
    2c5c:	00 00       	nop
    2c5e:	0f 90       	pop	r0
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <I2C_SL_SDA_set_pull_mode>:
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	1f 92       	push	r1
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	69 81       	ldd	r22, Y+1	; 0x01
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	0e 94 9c 13 	call	0x2738	; 0x2738 <PORTC_set_pin_pull_mode>
    2c7a:	00 00       	nop
    2c7c:	0f 90       	pop	r0
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	08 95       	ret

00002c84 <I2C_SL_SDA_set_dir>:
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	1f 92       	push	r1
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	69 81       	ldd	r22, Y+1	; 0x01
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	0e 94 1e 14 	call	0x283c	; 0x283c <PORTC_set_pin_dir>
    2c98:	00 00       	nop
    2c9a:	0f 90       	pop	r0
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	08 95       	ret

00002ca2 <I2C_SL_SDA_set_isc>:
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	1f 92       	push	r1
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	69 81       	ldd	r22, Y+1	; 0x01
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <PORTC_pin_set_isc>
    2cb6:	00 00       	nop
    2cb8:	0f 90       	pop	r0
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	08 95       	ret

00002cc0 <I2C_SL_SDA_set_inverted>:
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	1f 92       	push	r1
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	69 81       	ldd	r22, Y+1	; 0x01
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	0e 94 cd 13 	call	0x279a	; 0x279a <PORTC_pin_set_inverted>
    2cd4:	00 00       	nop
    2cd6:	0f 90       	pop	r0
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <I2C_SL_SDA_set_level>:
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	1f 92       	push	r1
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	69 81       	ldd	r22, Y+1	; 0x01
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	0e 94 72 14 	call	0x28e4	; 0x28e4 <PORTC_set_pin_level>
    2cf2:	00 00       	nop
    2cf4:	0f 90       	pop	r0
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	08 95       	ret

00002cfc <I2C_SL_SCL_set_pull_mode>:
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	1f 92       	push	r1
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	69 81       	ldd	r22, Y+1	; 0x01
    2d0a:	83 e0       	ldi	r24, 0x03	; 3
    2d0c:	0e 94 9c 13 	call	0x2738	; 0x2738 <PORTC_set_pin_pull_mode>
    2d10:	00 00       	nop
    2d12:	0f 90       	pop	r0
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	08 95       	ret

00002d1a <I2C_SL_SCL_set_dir>:
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	1f 92       	push	r1
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	69 81       	ldd	r22, Y+1	; 0x01
    2d28:	83 e0       	ldi	r24, 0x03	; 3
    2d2a:	0e 94 1e 14 	call	0x283c	; 0x283c <PORTC_set_pin_dir>
    2d2e:	00 00       	nop
    2d30:	0f 90       	pop	r0
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	08 95       	ret

00002d38 <I2C_SL_SCL_set_isc>:
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	1f 92       	push	r1
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	69 81       	ldd	r22, Y+1	; 0x01
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <PORTC_pin_set_isc>
    2d4c:	00 00       	nop
    2d4e:	0f 90       	pop	r0
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	08 95       	ret

00002d56 <I2C_SL_SCL_set_inverted>:
    2d56:	cf 93       	push	r28
    2d58:	df 93       	push	r29
    2d5a:	1f 92       	push	r1
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	69 81       	ldd	r22, Y+1	; 0x01
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	0e 94 cd 13 	call	0x279a	; 0x279a <PORTC_pin_set_inverted>
    2d6a:	00 00       	nop
    2d6c:	0f 90       	pop	r0
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	08 95       	ret

00002d74 <I2C_SL_SCL_set_level>:
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	1f 92       	push	r1
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	69 81       	ldd	r22, Y+1	; 0x01
    2d82:	83 e0       	ldi	r24, 0x03	; 3
    2d84:	0e 94 72 14 	call	0x28e4	; 0x28e4 <PORTC_set_pin_level>
    2d88:	00 00       	nop
    2d8a:	0f 90       	pop	r0
    2d8c:	df 91       	pop	r29
    2d8e:	cf 91       	pop	r28
    2d90:	08 95       	ret

00002d92 <V_MEAS_ADC_set_pull_mode>:
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	1f 92       	push	r1
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	69 81       	ldd	r22, Y+1	; 0x01
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	0e 94 ac 14 	call	0x2958	; 0x2958 <PORTD_set_pin_pull_mode>
    2da6:	00 00       	nop
    2da8:	0f 90       	pop	r0
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	08 95       	ret

00002db0 <V_MEAS_ADC_set_isc>:
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	1f 92       	push	r1
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	69 81       	ldd	r22, Y+1	; 0x01
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	0e 94 dd 14 	call	0x29ba	; 0x29ba <PORTD_pin_set_isc>
    2dc4:	00 00       	nop
    2dc6:	0f 90       	pop	r0
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	08 95       	ret

00002dce <I_MEAS_ADC_set_pull_mode>:
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	1f 92       	push	r1
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	69 81       	ldd	r22, Y+1	; 0x01
    2ddc:	84 e0       	ldi	r24, 0x04	; 4
    2dde:	0e 94 ac 14 	call	0x2958	; 0x2958 <PORTD_set_pin_pull_mode>
    2de2:	00 00       	nop
    2de4:	0f 90       	pop	r0
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	08 95       	ret

00002dec <I_MEAS_ADC_set_isc>:
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	1f 92       	push	r1
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	69 81       	ldd	r22, Y+1	; 0x01
    2dfa:	84 e0       	ldi	r24, 0x04	; 4
    2dfc:	0e 94 dd 14 	call	0x29ba	; 0x29ba <PORTD_pin_set_isc>
    2e00:	00 00       	nop
    2e02:	0f 90       	pop	r0
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	08 95       	ret

00002e0a <LED1_set_dir>:
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	1f 92       	push	r1
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	69 81       	ldd	r22, Y+1	; 0x01
    2e18:	85 e0       	ldi	r24, 0x05	; 5
    2e1a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <PORTD_set_pin_dir>
    2e1e:	00 00       	nop
    2e20:	0f 90       	pop	r0
    2e22:	df 91       	pop	r29
    2e24:	cf 91       	pop	r28
    2e26:	08 95       	ret

00002e28 <LED1_set_level>:
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	1f 92       	push	r1
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	89 83       	std	Y+1, r24	; 0x01
    2e34:	69 81       	ldd	r22, Y+1	; 0x01
    2e36:	85 e0       	ldi	r24, 0x05	; 5
    2e38:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <PORTD_set_pin_level>
    2e3c:	00 00       	nop
    2e3e:	0f 90       	pop	r0
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <LED2_set_dir>:
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	1f 92       	push	r1
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	69 81       	ldd	r22, Y+1	; 0x01
    2e54:	86 e0       	ldi	r24, 0x06	; 6
    2e56:	0e 94 00 15 	call	0x2a00	; 0x2a00 <PORTD_set_pin_dir>
    2e5a:	00 00       	nop
    2e5c:	0f 90       	pop	r0
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	08 95       	ret

00002e64 <LED2_set_level>:
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	1f 92       	push	r1
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	69 81       	ldd	r22, Y+1	; 0x01
    2e72:	86 e0       	ldi	r24, 0x06	; 6
    2e74:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <PORTD_set_pin_level>
    2e78:	00 00       	nop
    2e7a:	0f 90       	pop	r0
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <mcu_init>:
    2e82:	cf 93       	push	r28
    2e84:	df 93       	push	r29
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <mcu_init+0x6>
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <mcu_init+0x8>
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	19 82       	std	Y+1, r1	; 0x01
    2e90:	12 c0       	rjmp	.+36     	; 0x2eb6 <mcu_init+0x34>
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	80 5f       	subi	r24, 0xF0	; 240
    2e9a:	9b 4f       	sbci	r25, 0xFB	; 251
    2e9c:	29 81       	ldd	r18, Y+1	; 0x01
    2e9e:	22 2f       	mov	r18, r18
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	20 5f       	subi	r18, 0xF0	; 240
    2ea4:	3b 4f       	sbci	r19, 0xFB	; 251
    2ea6:	f9 01       	movw	r30, r18
    2ea8:	20 81       	ld	r18, Z
    2eaa:	28 60       	ori	r18, 0x08	; 8
    2eac:	fc 01       	movw	r30, r24
    2eae:	20 83       	st	Z, r18
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	88 30       	cpi	r24, 0x08	; 8
    2eba:	58 f3       	brcs	.-42     	; 0x2e92 <mcu_init+0x10>
    2ebc:	1a 82       	std	Y+2, r1	; 0x02
    2ebe:	12 c0       	rjmp	.+36     	; 0x2ee4 <mcu_init+0x62>
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	88 2f       	mov	r24, r24
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	80 5b       	subi	r24, 0xB0	; 176
    2ec8:	9b 4f       	sbci	r25, 0xFB	; 251
    2eca:	2a 81       	ldd	r18, Y+2	; 0x02
    2ecc:	22 2f       	mov	r18, r18
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	20 5b       	subi	r18, 0xB0	; 176
    2ed2:	3b 4f       	sbci	r19, 0xFB	; 251
    2ed4:	f9 01       	movw	r30, r18
    2ed6:	20 81       	ld	r18, Z
    2ed8:	28 60       	ori	r18, 0x08	; 8
    2eda:	fc 01       	movw	r30, r24
    2edc:	20 83       	st	Z, r18
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	8f 5f       	subi	r24, 0xFF	; 255
    2ee2:	8a 83       	std	Y+2, r24	; 0x02
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	88 30       	cpi	r24, 0x08	; 8
    2ee8:	58 f3       	brcs	.-42     	; 0x2ec0 <mcu_init+0x3e>
    2eea:	1b 82       	std	Y+3, r1	; 0x03
    2eec:	12 c0       	rjmp	.+36     	; 0x2f12 <mcu_init+0x90>
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	88 2f       	mov	r24, r24
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	80 59       	subi	r24, 0x90	; 144
    2ef6:	9b 4f       	sbci	r25, 0xFB	; 251
    2ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    2efa:	22 2f       	mov	r18, r18
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	20 59       	subi	r18, 0x90	; 144
    2f00:	3b 4f       	sbci	r19, 0xFB	; 251
    2f02:	f9 01       	movw	r30, r18
    2f04:	20 81       	ld	r18, Z
    2f06:	28 60       	ori	r18, 0x08	; 8
    2f08:	fc 01       	movw	r30, r24
    2f0a:	20 83       	st	Z, r18
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	8b 83       	std	Y+3, r24	; 0x03
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	88 30       	cpi	r24, 0x08	; 8
    2f16:	58 f3       	brcs	.-42     	; 0x2eee <mcu_init+0x6c>
    2f18:	1c 82       	std	Y+4, r1	; 0x04
    2f1a:	12 c0       	rjmp	.+36     	; 0x2f40 <mcu_init+0xbe>
    2f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	80 55       	subi	r24, 0x50	; 80
    2f24:	9b 4f       	sbci	r25, 0xFB	; 251
    2f26:	2c 81       	ldd	r18, Y+4	; 0x04
    2f28:	22 2f       	mov	r18, r18
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	20 55       	subi	r18, 0x50	; 80
    2f2e:	3b 4f       	sbci	r19, 0xFB	; 251
    2f30:	f9 01       	movw	r30, r18
    2f32:	20 81       	ld	r18, Z
    2f34:	28 60       	ori	r18, 0x08	; 8
    2f36:	fc 01       	movw	r30, r24
    2f38:	20 83       	st	Z, r18
    2f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	8c 83       	std	Y+4, r24	; 0x04
    2f40:	8c 81       	ldd	r24, Y+4	; 0x04
    2f42:	88 30       	cpi	r24, 0x08	; 8
    2f44:	58 f3       	brcs	.-42     	; 0x2f1c <mcu_init+0x9a>
    2f46:	00 00       	nop
    2f48:	24 96       	adiw	r28, 0x04	; 4
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	08 95       	ret

00002f54 <USART_0_initialization>:
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <PA1_set_dir>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <PA1_set_pull_mode>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <PA0_set_level>
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <PA0_set_dir>
    2f74:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <USART_0_init>
    2f78:	00 00       	nop
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	08 95       	ret

00002f80 <I2C_0_initialization>:
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <I2C_SL_SCL_set_level>
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <I2C_SL_SCL_set_dir>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <I2C_SL_SCL_set_pull_mode>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <I2C_SL_SCL_set_inverted>
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <I2C_SL_SCL_set_isc>
    2fa6:	80 ee       	ldi	r24, 0xE0	; 224
    2fa8:	95 e0       	ldi	r25, 0x05	; 5
    2faa:	20 ee       	ldi	r18, 0xE0	; 224
    2fac:	35 e0       	ldi	r19, 0x05	; 5
    2fae:	f9 01       	movw	r30, r18
    2fb0:	25 81       	ldd	r18, Z+5	; 0x05
    2fb2:	22 60       	ori	r18, 0x02	; 2
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	25 83       	std	Z+5, r18	; 0x05
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	0e 94 6f 16 	call	0x2cde	; 0x2cde <I2C_SL_SDA_set_level>
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <I2C_SL_SDA_set_dir>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	0e 94 33 16 	call	0x2c66	; 0x2c66 <I2C_SL_SDA_set_pull_mode>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <I2C_SL_SDA_set_inverted>
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <I2C_SL_SDA_set_isc>
    2fd6:	80 ee       	ldi	r24, 0xE0	; 224
    2fd8:	95 e0       	ldi	r25, 0x05	; 5
    2fda:	20 ee       	ldi	r18, 0xE0	; 224
    2fdc:	35 e0       	ldi	r19, 0x05	; 5
    2fde:	f9 01       	movw	r30, r18
    2fe0:	25 81       	ldd	r18, Z+5	; 0x05
    2fe2:	22 60       	ori	r18, 0x02	; 2
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	25 83       	std	Z+5, r18	; 0x05
    2fe8:	0e 94 57 18 	call	0x30ae	; 0x30ae <I2C_0_init>
    2fec:	00 00       	nop
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	08 95       	ret

00002ff4 <ADC_0_initialization>:
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	84 e0       	ldi	r24, 0x04	; 4
    2ffe:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <V_MEAS_ADC_set_isc>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <V_MEAS_ADC_set_pull_mode>
    3008:	84 e0       	ldi	r24, 0x04	; 4
    300a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <I_MEAS_ADC_set_isc>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	0e 94 e7 16 	call	0x2dce	; 0x2dce <I_MEAS_ADC_set_pull_mode>
    3014:	0e 94 07 12 	call	0x240e	; 0x240e <ADC_0_init>
    3018:	00 00       	nop
    301a:	df 91       	pop	r29
    301c:	cf 91       	pop	r28
    301e:	08 95       	ret

00003020 <TIMER_0_initialization>:

void TIMER_0_initialization(void)
{
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62

	TIMER_0_init();
    3028:	0e 94 93 1a 	call	0x3526	; 0x3526 <TIMER_0_init>
}
    302c:	00 00       	nop
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	08 95       	ret

00003034 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    303c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <mcu_init>

	/* PORT setting on PC0 */

	// Set pin direction to output

	LOAD_SWITCH_EN_set_level(
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LOAD_SWITCH_EN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	LOAD_SWITCH_EN_set_dir(PORT_DIR_OUT);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <LOAD_SWITCH_EN_set_dir>

	/* PORT setting on PC1 */

	LOAD_SWITCH_FAULT_set_level(
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <LOAD_SWITCH_FAULT_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	LOAD_SWITCH_FAULT_set_dir(
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	0e 94 f7 15 	call	0x2bee	; 0x2bee <LOAD_SWITCH_FAULT_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_IN);

	LOAD_SWITCH_FAULT_set_pull_mode(
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LOAD_SWITCH_FAULT_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	LOAD_SWITCH_FAULT_set_inverted(
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LOAD_SWITCH_FAULT_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	LOAD_SWITCH_FAULT_set_isc(
    3064:	83 e0       	ldi	r24, 0x03	; 3
    3066:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LOAD_SWITCH_FAULT_set_isc>

	/* PORT setting on PD5 */

	// Set pin direction to output

	LED1_set_level(
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LED1_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED1_set_dir(PORT_DIR_OUT);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <LED1_set_dir>

	/* PORT setting on PD6 */

	// Set pin direction to output

	LED2_set_level(
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	0e 94 32 17 	call	0x2e64	; 0x2e64 <LED2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED2_set_dir(PORT_DIR_OUT);
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <LED2_set_dir>

	CLKCTRL_init();
    3082:	0e 94 c7 12 	call	0x258e	; 0x258e <CLKCTRL_init>

	USART_0_initialization();
    3086:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <USART_0_initialization>

	SLPCTRL_init();
    308a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <SLPCTRL_init>

	CPUINT_init();
    308e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <CPUINT_init>

	I2C_0_initialization();
    3092:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <I2C_0_initialization>

	ADC_0_initialization();
    3096:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <ADC_0_initialization>

	//RTC_0_init();

	//FLASH_0_initialization();

	TIMER_0_initialization();
    309a:	0e 94 10 18 	call	0x3020	; 0x3020 <TIMER_0_initialization>

	BOD_init();
    309e:	0e 94 a5 12 	call	0x254a	; 0x254a <BOD_init>
	WDT_0_init();
    30a2:	0e 94 39 1c 	call	0x3872	; 0x3872 <WDT_0_init>
}
    30a6:	00 00       	nop
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	08 95       	ret

000030ae <I2C_0_init>:
 * \return Nothing
 */
void I2C_0_enable(void)
{
	TWI0.SCTRLA |= TWI_ENABLE_bm;
}
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	99 e0       	ldi	r25, 0x09	; 9
    30ba:	21 e0       	ldi	r18, 0x01	; 1
    30bc:	fc 01       	movw	r30, r24
    30be:	22 83       	std	Z+2, r18	; 0x02
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	99 e0       	ldi	r25, 0x09	; 9
    30c4:	2b e4       	ldi	r18, 0x4B	; 75
    30c6:	fc 01       	movw	r30, r24
    30c8:	24 87       	std	Z+12, r18	; 0x0c
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	99 e0       	ldi	r25, 0x09	; 9
    30ce:	21 ee       	ldi	r18, 0xE1	; 225
    30d0:	fc 01       	movw	r30, r24
    30d2:	21 87       	std	Z+9, r18	; 0x09
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <I2C_0_set_write_callback>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 b1 19 	call	0x3362	; 0x3362 <I2C_0_set_read_callback>
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 ff 19 	call	0x33fe	; 0x33fe <I2C_0_set_address_callback>
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 94 26 1a 	call	0x344c	; 0x344c <I2C_0_set_stop_callback>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 4d 1a 	call	0x349a	; 0x349a <I2C_0_set_collision_callback>
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <I2C_0_set_bus_error_callback>
    3104:	00 00       	nop
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	08 95       	ret

0000310c <I2C_0_open>:
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	99 e0       	ldi	r25, 0x09	; 9
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	39 e0       	ldi	r19, 0x09	; 9
    311c:	f9 01       	movw	r30, r18
    311e:	21 85       	ldd	r18, Z+9	; 0x09
    3120:	21 60       	ori	r18, 0x01	; 1
    3122:	fc 01       	movw	r30, r24
    3124:	21 87       	std	Z+9, r18	; 0x09
    3126:	00 00       	nop
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	08 95       	ret

0000312e <I2C_0_isr>:
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	99 e0       	ldi	r25, 0x09	; 9
    313a:	fc 01       	movw	r30, r24
    313c:	83 85       	ldd	r24, Z+11	; 0x0b
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	88 70       	andi	r24, 0x08	; 8
    3144:	99 27       	eor	r25, r25
    3146:	89 2b       	or	r24, r25
    3148:	19 f0       	breq	.+6      	; 0x3150 <I2C_0_isr+0x22>
    314a:	0e 94 39 1a 	call	0x3472	; 0x3472 <I2C_0_collision_callback>
    314e:	71 c0       	rjmp	.+226    	; 0x3232 <I2C_0_isr+0x104>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	99 e0       	ldi	r25, 0x09	; 9
    3154:	fc 01       	movw	r30, r24
    3156:	83 85       	ldd	r24, Z+11	; 0x0b
    3158:	88 2f       	mov	r24, r24
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	84 70       	andi	r24, 0x04	; 4
    315e:	99 27       	eor	r25, r25
    3160:	89 2b       	or	r24, r25
    3162:	19 f0       	breq	.+6      	; 0x316a <I2C_0_isr+0x3c>
    3164:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2C_0_bus_error_callback>
    3168:	64 c0       	rjmp	.+200    	; 0x3232 <I2C_0_isr+0x104>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	99 e0       	ldi	r25, 0x09	; 9
    316e:	fc 01       	movw	r30, r24
    3170:	83 85       	ldd	r24, Z+11	; 0x0b
    3172:	88 2f       	mov	r24, r24
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	80 74       	andi	r24, 0x40	; 64
    3178:	99 27       	eor	r25, r25
    317a:	89 2b       	or	r24, r25
    317c:	81 f0       	breq	.+32     	; 0x319e <I2C_0_isr+0x70>
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	99 e0       	ldi	r25, 0x09	; 9
    3182:	fc 01       	movw	r30, r24
    3184:	83 85       	ldd	r24, Z+11	; 0x0b
    3186:	88 2f       	mov	r24, r24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	81 70       	andi	r24, 0x01	; 1
    318c:	99 27       	eor	r25, r25
    318e:	89 2b       	or	r24, r25
    3190:	31 f0       	breq	.+12     	; 0x319e <I2C_0_isr+0x70>
    3192:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <I2C_0_address_callback>
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	80 93 e6 70 	sts	0x70E6, r24	; 0x8070e6 <isFirstByte.4355>
    319c:	4a c0       	rjmp	.+148    	; 0x3232 <I2C_0_isr+0x104>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	99 e0       	ldi	r25, 0x09	; 9
    31a2:	fc 01       	movw	r30, r24
    31a4:	83 85       	ldd	r24, Z+11	; 0x0b
    31a6:	88 23       	and	r24, r24
    31a8:	44 f5       	brge	.+80     	; 0x31fa <I2C_0_isr+0xcc>
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	99 e0       	ldi	r25, 0x09	; 9
    31ae:	fc 01       	movw	r30, r24
    31b0:	83 85       	ldd	r24, Z+11	; 0x0b
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	82 70       	andi	r24, 0x02	; 2
    31b8:	99 27       	eor	r25, r25
    31ba:	89 2b       	or	r24, r25
    31bc:	d9 f0       	breq	.+54     	; 0x31f4 <I2C_0_isr+0xc6>
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	99 e0       	ldi	r25, 0x09	; 9
    31c2:	fc 01       	movw	r30, r24
    31c4:	83 85       	ldd	r24, Z+11	; 0x0b
    31c6:	88 2f       	mov	r24, r24
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	80 71       	andi	r24, 0x10	; 16
    31cc:	99 27       	eor	r25, r25
    31ce:	89 2b       	or	r24, r25
    31d0:	21 f0       	breq	.+8      	; 0x31da <I2C_0_isr+0xac>
    31d2:	80 91 e6 70 	lds	r24, 0x70E6	; 0x8070e6 <isFirstByte.4355>
    31d6:	88 23       	and	r24, r24
    31d8:	51 f0       	breq	.+20     	; 0x31ee <I2C_0_isr+0xc0>
    31da:	10 92 e6 70 	sts	0x70E6, r1	; 0x8070e6 <isFirstByte.4355>
    31de:	0e 94 9d 19 	call	0x333a	; 0x333a <I2C_0_read_callback>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	99 e0       	ldi	r25, 0x09	; 9
    31e6:	23 e0       	ldi	r18, 0x03	; 3
    31e8:	fc 01       	movw	r30, r24
    31ea:	22 87       	std	Z+10, r18	; 0x0a
    31ec:	22 c0       	rjmp	.+68     	; 0x3232 <I2C_0_isr+0x104>
    31ee:	0e 94 87 19 	call	0x330e	; 0x330e <I2C_0_goto_unaddressed>
    31f2:	1f c0       	rjmp	.+62     	; 0x3232 <I2C_0_isr+0x104>
    31f4:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2C_0_write_callback>
    31f8:	1c c0       	rjmp	.+56     	; 0x3232 <I2C_0_isr+0x104>
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	99 e0       	ldi	r25, 0x09	; 9
    31fe:	fc 01       	movw	r30, r24
    3200:	83 85       	ldd	r24, Z+11	; 0x0b
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	80 74       	andi	r24, 0x40	; 64
    3208:	99 27       	eor	r25, r25
    320a:	89 2b       	or	r24, r25
    320c:	91 f0       	breq	.+36     	; 0x3232 <I2C_0_isr+0x104>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	99 e0       	ldi	r25, 0x09	; 9
    3212:	fc 01       	movw	r30, r24
    3214:	83 85       	ldd	r24, Z+11	; 0x0b
    3216:	88 2f       	mov	r24, r24
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	81 70       	andi	r24, 0x01	; 1
    321c:	99 27       	eor	r25, r25
    321e:	89 2b       	or	r24, r25
    3220:	41 f4       	brne	.+16     	; 0x3232 <I2C_0_isr+0x104>
    3222:	0e 94 12 1a 	call	0x3424	; 0x3424 <I2C_0_stop_callback>
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	99 e0       	ldi	r25, 0x09	; 9
    322a:	22 e0       	ldi	r18, 0x02	; 2
    322c:	fc 01       	movw	r30, r24
    322e:	22 87       	std	Z+10, r18	; 0x0a
    3230:	00 00       	nop
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	08 95       	ret

00003238 <__vector_16>:
    3238:	1f 92       	push	r1
    323a:	0f 92       	push	r0
    323c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    3240:	0f 92       	push	r0
    3242:	11 24       	eor	r1, r1
    3244:	2f 93       	push	r18
    3246:	3f 93       	push	r19
    3248:	4f 93       	push	r20
    324a:	5f 93       	push	r21
    324c:	6f 93       	push	r22
    324e:	7f 93       	push	r23
    3250:	8f 93       	push	r24
    3252:	9f 93       	push	r25
    3254:	af 93       	push	r26
    3256:	bf 93       	push	r27
    3258:	ef 93       	push	r30
    325a:	ff 93       	push	r31
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	0e 94 97 18 	call	0x312e	; 0x312e <I2C_0_isr>
    3268:	00 00       	nop
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	ff 91       	pop	r31
    3270:	ef 91       	pop	r30
    3272:	bf 91       	pop	r27
    3274:	af 91       	pop	r26
    3276:	9f 91       	pop	r25
    3278:	8f 91       	pop	r24
    327a:	7f 91       	pop	r23
    327c:	6f 91       	pop	r22
    327e:	5f 91       	pop	r21
    3280:	4f 91       	pop	r20
    3282:	3f 91       	pop	r19
    3284:	2f 91       	pop	r18
    3286:	0f 90       	pop	r0
    3288:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    328c:	0f 90       	pop	r0
    328e:	1f 90       	pop	r1
    3290:	18 95       	reti

00003292 <I2C_0_read>:
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	99 e0       	ldi	r25, 0x09	; 9
    329e:	fc 01       	movw	r30, r24
    32a0:	85 85       	ldd	r24, Z+13	; 0x0d
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	08 95       	ret

000032a8 <I2C_0_write>:
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	1f 92       	push	r1
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	99 e0       	ldi	r25, 0x09	; 9
    32b8:	29 81       	ldd	r18, Y+1	; 0x01
    32ba:	fc 01       	movw	r30, r24
    32bc:	25 87       	std	Z+13, r18	; 0x0d
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	99 e0       	ldi	r25, 0x09	; 9
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	39 e0       	ldi	r19, 0x09	; 9
    32c6:	f9 01       	movw	r30, r18
    32c8:	22 85       	ldd	r18, Z+10	; 0x0a
    32ca:	23 60       	ori	r18, 0x03	; 3
    32cc:	fc 01       	movw	r30, r24
    32ce:	22 87       	std	Z+10, r18	; 0x0a
    32d0:	00 00       	nop
    32d2:	0f 90       	pop	r0
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	08 95       	ret

000032da <I2C_0_send_ack>:
 * only be called when appropriate, i.e. in the callback handlers.
 *
 * \return Nothing
 */
void I2C_0_send_ack(void)
{
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
	TWI0.SCTRLB = TWI_ACKACT_ACK_gc | TWI_SCMD_RESPONSE_gc;
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	99 e0       	ldi	r25, 0x09	; 9
    32e6:	23 e0       	ldi	r18, 0x03	; 3
    32e8:	fc 01       	movw	r30, r24
    32ea:	22 87       	std	Z+10, r18	; 0x0a
}
    32ec:	00 00       	nop
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <I2C_0_send_nack>:
 * only be called when appropriate, i.e. in the callback handlers.
 *
 * \return Nothing
 */
void I2C_0_send_nack(void)
{
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
	TWI0.SCTRLB = TWI_ACKACT_NACK_gc | TWI_SCMD_COMPTRANS_gc;
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	99 e0       	ldi	r25, 0x09	; 9
    3300:	26 e0       	ldi	r18, 0x06	; 6
    3302:	fc 01       	movw	r30, r24
    3304:	22 87       	std	Z+10, r18	; 0x0a
}
    3306:	00 00       	nop
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	08 95       	ret

0000330e <I2C_0_goto_unaddressed>:
 * of bus state to an unaddressed state.
 *
 * \return Nothing
 */
void I2C_0_goto_unaddressed(void)
{
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
	// Reset module
	TWI0.SSTATUS |= (TWI_DIF_bm | TWI_APIF_bm);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	99 e0       	ldi	r25, 0x09	; 9
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	39 e0       	ldi	r19, 0x09	; 9
    331e:	f9 01       	movw	r30, r18
    3320:	23 85       	ldd	r18, Z+11	; 0x0b
    3322:	20 6c       	ori	r18, 0xC0	; 192
    3324:	fc 01       	movw	r30, r24
    3326:	23 87       	std	Z+11, r18	; 0x0b
	TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	99 e0       	ldi	r25, 0x09	; 9
    332c:	22 e0       	ldi	r18, 0x02	; 2
    332e:	fc 01       	movw	r30, r24
    3330:	22 87       	std	Z+10, r18	; 0x0a
}
    3332:	00 00       	nop
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	08 95       	ret

0000333a <I2C_0_read_callback>:

// Read Event Interrupt Handlers
void I2C_0_read_callback(void)
{
    333a:	cf 93       	push	r28
    333c:	df 93       	push	r29
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
	if (I2C_0_read_interrupt_handler) {
    3342:	80 91 b6 71 	lds	r24, 0x71B6	; 0x8071b6 <I2C_0_read_interrupt_handler>
    3346:	90 91 b7 71 	lds	r25, 0x71B7	; 0x8071b7 <I2C_0_read_interrupt_handler+0x1>
    334a:	89 2b       	or	r24, r25
    334c:	31 f0       	breq	.+12     	; 0x335a <I2C_0_read_callback+0x20>
		I2C_0_read_interrupt_handler();
    334e:	80 91 b6 71 	lds	r24, 0x71B6	; 0x8071b6 <I2C_0_read_interrupt_handler>
    3352:	90 91 b7 71 	lds	r25, 0x71B7	; 0x8071b7 <I2C_0_read_interrupt_handler+0x1>
    3356:	fc 01       	movw	r30, r24
    3358:	09 95       	icall
	}
}
    335a:	00 00       	nop
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <I2C_0_set_read_callback>:
 * \brief Callback handler for event where master wishes to read a byte from slave.
 *
 * \return Nothing
 */
void I2C_0_set_read_callback(I2C_0_callback handler)
{
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	00 d0       	rcall	.+0      	; 0x3368 <I2C_0_set_read_callback+0x6>
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	9a 83       	std	Y+2, r25	; 0x02
	I2C_0_read_interrupt_handler = handler;
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	80 93 b6 71 	sts	0x71B6, r24	; 0x8071b6 <I2C_0_read_interrupt_handler>
    3378:	90 93 b7 71 	sts	0x71B7, r25	; 0x8071b7 <I2C_0_read_interrupt_handler+0x1>
}
    337c:	00 00       	nop
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <I2C_0_write_callback>:

// Write Event Interrupt Handlers
void I2C_0_write_callback(void)
{
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
	if (I2C_0_write_interrupt_handler) {
    3390:	80 91 b4 71 	lds	r24, 0x71B4	; 0x8071b4 <I2C_0_write_interrupt_handler>
    3394:	90 91 b5 71 	lds	r25, 0x71B5	; 0x8071b5 <I2C_0_write_interrupt_handler+0x1>
    3398:	89 2b       	or	r24, r25
    339a:	31 f0       	breq	.+12     	; 0x33a8 <I2C_0_write_callback+0x20>
		I2C_0_write_interrupt_handler();
    339c:	80 91 b4 71 	lds	r24, 0x71B4	; 0x8071b4 <I2C_0_write_interrupt_handler>
    33a0:	90 91 b5 71 	lds	r25, 0x71B5	; 0x8071b5 <I2C_0_write_interrupt_handler+0x1>
    33a4:	fc 01       	movw	r30, r24
    33a6:	09 95       	icall
	}
}
    33a8:	00 00       	nop
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	08 95       	ret

000033b0 <I2C_0_set_write_callback>:
 * \brief Callback handler for event where master wishes to write a byte to slave.
 *
 * \return Nothing
 */
void I2C_0_set_write_callback(I2C_0_callback handler)
{
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <I2C_0_set_write_callback+0x6>
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	9a 83       	std	Y+2, r25	; 0x02
	I2C_0_write_interrupt_handler = handler;
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	80 93 b4 71 	sts	0x71B4, r24	; 0x8071b4 <I2C_0_write_interrupt_handler>
    33c6:	90 93 b5 71 	sts	0x71B5, r25	; 0x8071b5 <I2C_0_write_interrupt_handler+0x1>
}
    33ca:	00 00       	nop
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

000033d6 <I2C_0_address_callback>:

// Address Event Interrupt Handlers
void I2C_0_address_callback(void)
{
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
	if (I2C_0_address_interrupt_handler) {
    33de:	80 91 b8 71 	lds	r24, 0x71B8	; 0x8071b8 <I2C_0_address_interrupt_handler>
    33e2:	90 91 b9 71 	lds	r25, 0x71B9	; 0x8071b9 <I2C_0_address_interrupt_handler+0x1>
    33e6:	89 2b       	or	r24, r25
    33e8:	31 f0       	breq	.+12     	; 0x33f6 <I2C_0_address_callback+0x20>
		I2C_0_address_interrupt_handler();
    33ea:	80 91 b8 71 	lds	r24, 0x71B8	; 0x8071b8 <I2C_0_address_interrupt_handler>
    33ee:	90 91 b9 71 	lds	r25, 0x71B9	; 0x8071b9 <I2C_0_address_interrupt_handler+0x1>
    33f2:	fc 01       	movw	r30, r24
    33f4:	09 95       	icall
	}
}
    33f6:	00 00       	nop
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	08 95       	ret

000033fe <I2C_0_set_address_callback>:
 * \brief Callback handler for event where slave has received its address.
 *
 * \return Nothing
 */
void I2C_0_set_address_callback(I2C_0_callback handler)
{
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	00 d0       	rcall	.+0      	; 0x3404 <I2C_0_set_address_callback+0x6>
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	9a 83       	std	Y+2, r25	; 0x02
	I2C_0_address_interrupt_handler = handler;
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	80 93 b8 71 	sts	0x71B8, r24	; 0x8071b8 <I2C_0_address_interrupt_handler>
    3414:	90 93 b9 71 	sts	0x71B9, r25	; 0x8071b9 <I2C_0_address_interrupt_handler+0x1>
}
    3418:	00 00       	nop
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	08 95       	ret

00003424 <I2C_0_stop_callback>:

// Stop Event Interrupt Handlers
void I2C_0_stop_callback(void)
{
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
	if (I2C_0_stop_interrupt_handler) {
    342c:	80 91 b2 71 	lds	r24, 0x71B2	; 0x8071b2 <I2C_0_stop_interrupt_handler>
    3430:	90 91 b3 71 	lds	r25, 0x71B3	; 0x8071b3 <I2C_0_stop_interrupt_handler+0x1>
    3434:	89 2b       	or	r24, r25
    3436:	31 f0       	breq	.+12     	; 0x3444 <I2C_0_stop_callback+0x20>
		I2C_0_stop_interrupt_handler();
    3438:	80 91 b2 71 	lds	r24, 0x71B2	; 0x8071b2 <I2C_0_stop_interrupt_handler>
    343c:	90 91 b3 71 	lds	r25, 0x71B3	; 0x8071b3 <I2C_0_stop_interrupt_handler+0x1>
    3440:	fc 01       	movw	r30, r24
    3442:	09 95       	icall
	}
}
    3444:	00 00       	nop
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	08 95       	ret

0000344c <I2C_0_set_stop_callback>:
 * \brief Callback handler for event where slave has received a STOP condition after being addressed.
 *
 * \return Nothing
 */
void I2C_0_set_stop_callback(I2C_0_callback handler)
{
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	00 d0       	rcall	.+0      	; 0x3452 <I2C_0_set_stop_callback+0x6>
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	9a 83       	std	Y+2, r25	; 0x02
	I2C_0_stop_interrupt_handler = handler;
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	9a 81       	ldd	r25, Y+2	; 0x02
    345e:	80 93 b2 71 	sts	0x71B2, r24	; 0x8071b2 <I2C_0_stop_interrupt_handler>
    3462:	90 93 b3 71 	sts	0x71B3, r25	; 0x8071b3 <I2C_0_stop_interrupt_handler+0x1>
}
    3466:	00 00       	nop
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	08 95       	ret

00003472 <I2C_0_collision_callback>:

// Bus Collision Event Interrupt Handlers
void I2C_0_collision_callback(void)
{
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
	if (I2C_0_collision_interrupt_handler) {
    347a:	80 91 bc 71 	lds	r24, 0x71BC	; 0x8071bc <I2C_0_collision_interrupt_handler>
    347e:	90 91 bd 71 	lds	r25, 0x71BD	; 0x8071bd <I2C_0_collision_interrupt_handler+0x1>
    3482:	89 2b       	or	r24, r25
    3484:	31 f0       	breq	.+12     	; 0x3492 <I2C_0_collision_callback+0x20>
		I2C_0_collision_interrupt_handler();
    3486:	80 91 bc 71 	lds	r24, 0x71BC	; 0x8071bc <I2C_0_collision_interrupt_handler>
    348a:	90 91 bd 71 	lds	r25, 0x71BD	; 0x8071bd <I2C_0_collision_interrupt_handler+0x1>
    348e:	fc 01       	movw	r30, r24
    3490:	09 95       	icall
	}
}
    3492:	00 00       	nop
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	08 95       	ret

0000349a <I2C_0_set_collision_callback>:
 * \brief Callback handler for event where slave detects a bus collision.
 *
 * \return Nothing
 */
void I2C_0_set_collision_callback(I2C_0_callback handler)
{
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <I2C_0_set_collision_callback+0x6>
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	9a 83       	std	Y+2, r25	; 0x02
	I2C_0_collision_interrupt_handler = handler;
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	80 93 bc 71 	sts	0x71BC, r24	; 0x8071bc <I2C_0_collision_interrupt_handler>
    34b0:	90 93 bd 71 	sts	0x71BD, r25	; 0x8071bd <I2C_0_collision_interrupt_handler+0x1>
}
    34b4:	00 00       	nop
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	08 95       	ret

000034c0 <I2C_0_bus_error_callback>:

// Bus Error Event Interrupt Handlers
void I2C_0_bus_error_callback(void)
{
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
	if (I2C_0_bus_error_interrupt_handler) {
    34c8:	80 91 ba 71 	lds	r24, 0x71BA	; 0x8071ba <I2C_0_bus_error_interrupt_handler>
    34cc:	90 91 bb 71 	lds	r25, 0x71BB	; 0x8071bb <I2C_0_bus_error_interrupt_handler+0x1>
    34d0:	89 2b       	or	r24, r25
    34d2:	31 f0       	breq	.+12     	; 0x34e0 <I2C_0_bus_error_callback+0x20>
		I2C_0_bus_error_interrupt_handler();
    34d4:	80 91 ba 71 	lds	r24, 0x71BA	; 0x8071ba <I2C_0_bus_error_interrupt_handler>
    34d8:	90 91 bb 71 	lds	r25, 0x71BB	; 0x8071bb <I2C_0_bus_error_interrupt_handler+0x1>
    34dc:	fc 01       	movw	r30, r24
    34de:	09 95       	icall
	}
}
    34e0:	00 00       	nop
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	08 95       	ret

000034e8 <I2C_0_set_bus_error_callback>:
 * \brief Callback handler for event where slave detects a bus error.
 *
 * \return Nothing
 */
void I2C_0_set_bus_error_callback(I2C_0_callback handler)
{
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <I2C_0_set_bus_error_callback+0x6>
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	89 83       	std	Y+1, r24	; 0x01
    34f4:	9a 83       	std	Y+2, r25	; 0x02
	I2C_0_bus_error_interrupt_handler = handler;
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	80 93 ba 71 	sts	0x71BA, r24	; 0x8071ba <I2C_0_bus_error_interrupt_handler>
    34fe:	90 93 bb 71 	sts	0x71BB, r25	; 0x8071bb <I2C_0_bus_error_interrupt_handler+0x1>
}
    3502:	00 00       	nop
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	08 95       	ret

0000350e <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    350e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    3510:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    3512:	40 83       	st	Z, r20
	ret                             // Return to caller
    3514:	08 95       	ret

00003516 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    351e:	80 e0       	ldi	r24, 0x00	; 0
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	08 95       	ret

00003526 <TIMER_0_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 1 << TCB_ASYNC_bp      /* Asynchronous Enable: enabled */
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	9b e0       	ldi	r25, 0x0B	; 11
    3532:	20 e4       	ldi	r18, 0x40	; 64
    3534:	fc 01       	movw	r30, r24
    3536:	21 83       	std	Z+1, r18	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 0 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	9b e0       	ldi	r25, 0x0B	; 11
    353c:	22 e0       	ldi	r18, 0x02	; 2
    353e:	fc 01       	movw	r30, r24
    3540:	25 83       	std	Z+5, r18	; 0x05
	               | 1 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	9b e0       	ldi	r25, 0x0B	; 11
    3546:	21 e4       	ldi	r18, 0x41	; 65
    3548:	fc 01       	movw	r30, r24
    354a:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    354c:	80 e0       	ldi	r24, 0x00	; 0
}
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	08 95       	ret

00003554 <USART_0_printCHAR>:
 * \return Nothing
 */
void USART_0_disable()
{
	USART0.CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
}
    3554:	cf 93       	push	r28
    3556:	df 93       	push	r29
    3558:	00 d0       	rcall	.+0      	; 0x355a <USART_0_printCHAR+0x6>
    355a:	1f 92       	push	r1
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	89 83       	std	Y+1, r24	; 0x01
    3562:	6a 83       	std	Y+2, r22	; 0x02
    3564:	7b 83       	std	Y+3, r23	; 0x03
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	0e 94 b0 1b 	call	0x3760	; 0x3760 <USART_0_write>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	23 96       	adiw	r28, 0x03	; 3
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	08 95       	ret

0000357c <USART_0_default_rx_isr_cb>:
    357c:	cf 93       	push	r28
    357e:	df 93       	push	r29
    3580:	00 d0       	rcall	.+0      	; 0x3582 <USART_0_default_rx_isr_cb+0x6>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	98 e0       	ldi	r25, 0x08	; 8
    358a:	fc 01       	movw	r30, r24
    358c:	80 81       	ld	r24, Z
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	80 91 6c 71 	lds	r24, 0x716C	; 0x80716c <USART_0_rx_head>
    3594:	8f 5f       	subi	r24, 0xFF	; 255
    3596:	8f 73       	andi	r24, 0x3F	; 63
    3598:	8a 83       	std	Y+2, r24	; 0x02
    359a:	80 91 6d 71 	lds	r24, 0x716D	; 0x80716d <USART_0_rx_tail>
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	98 17       	cp	r25, r24
    35a2:	81 f0       	breq	.+32     	; 0x35c4 <USART_0_default_rx_isr_cb+0x48>
    35a4:	8a 81       	ldd	r24, Y+2	; 0x02
    35a6:	80 93 6c 71 	sts	0x716C, r24	; 0x80716c <USART_0_rx_head>
    35aa:	8a 81       	ldd	r24, Y+2	; 0x02
    35ac:	88 2f       	mov	r24, r24
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	84 5d       	subi	r24, 0xD4	; 212
    35b2:	9e 48       	sbci	r25, 0x8E	; 142
    35b4:	29 81       	ldd	r18, Y+1	; 0x01
    35b6:	fc 01       	movw	r30, r24
    35b8:	20 83       	st	Z, r18
    35ba:	80 91 6e 71 	lds	r24, 0x716E	; 0x80716e <USART_0_rx_elements>
    35be:	8f 5f       	subi	r24, 0xFF	; 255
    35c0:	80 93 6e 71 	sts	0x716E, r24	; 0x80716e <USART_0_rx_elements>
    35c4:	00 00       	nop
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    35ce:	08 95       	ret

000035d0 <USART_0_default_udre_isr_cb>:
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	1f 92       	push	r1
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	80 91 b1 71 	lds	r24, 0x71B1	; 0x8071b1 <USART_0_tx_elements>
    35de:	88 23       	and	r24, r24
    35e0:	c1 f0       	breq	.+48     	; 0x3612 <USART_0_default_udre_isr_cb+0x42>
    35e2:	80 91 b0 71 	lds	r24, 0x71B0	; 0x8071b0 <USART_0_tx_tail>
    35e6:	8f 5f       	subi	r24, 0xFF	; 255
    35e8:	8f 73       	andi	r24, 0x3F	; 63
    35ea:	89 83       	std	Y+1, r24	; 0x01
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	80 93 b0 71 	sts	0x71B0, r24	; 0x8071b0 <USART_0_tx_tail>
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	98 e0       	ldi	r25, 0x08	; 8
    35f6:	29 81       	ldd	r18, Y+1	; 0x01
    35f8:	22 2f       	mov	r18, r18
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	21 59       	subi	r18, 0x91	; 145
    35fe:	3e 48       	sbci	r19, 0x8E	; 142
    3600:	f9 01       	movw	r30, r18
    3602:	20 81       	ld	r18, Z
    3604:	fc 01       	movw	r30, r24
    3606:	22 83       	std	Z+2, r18	; 0x02
    3608:	80 91 b1 71 	lds	r24, 0x71B1	; 0x8071b1 <USART_0_tx_elements>
    360c:	81 50       	subi	r24, 0x01	; 1
    360e:	80 93 b1 71 	sts	0x71B1, r24	; 0x8071b1 <USART_0_tx_elements>
    3612:	80 91 b1 71 	lds	r24, 0x71B1	; 0x8071b1 <USART_0_tx_elements>
    3616:	88 23       	and	r24, r24
    3618:	49 f4       	brne	.+18     	; 0x362c <USART_0_default_udre_isr_cb+0x5c>
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	98 e0       	ldi	r25, 0x08	; 8
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	38 e0       	ldi	r19, 0x08	; 8
    3622:	f9 01       	movw	r30, r18
    3624:	25 81       	ldd	r18, Z+5	; 0x05
    3626:	2f 7d       	andi	r18, 0xDF	; 223
    3628:	fc 01       	movw	r30, r24
    362a:	25 83       	std	Z+5, r18	; 0x05
    362c:	00 00       	nop
    362e:	0f 90       	pop	r0
    3630:	df 91       	pop	r29
    3632:	cf 91       	pop	r28
    3634:	08 95       	ret

00003636 <USART_0_set_ISR_cb>:
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	00 d0       	rcall	.+0      	; 0x363c <USART_0_set_ISR_cb+0x6>
    363c:	1f 92       	push	r1
    363e:	cd b7       	in	r28, 0x3d	; 61
    3640:	de b7       	in	r29, 0x3e	; 62
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	6b 83       	std	Y+3, r22	; 0x03
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	88 2f       	mov	r24, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	81 30       	cpi	r24, 0x01	; 1
    3650:	91 05       	cpc	r25, r1
    3652:	19 f0       	breq	.+6      	; 0x365a <USART_0_set_ISR_cb+0x24>
    3654:	02 97       	sbiw	r24, 0x02	; 2
    3656:	41 f0       	breq	.+16     	; 0x3668 <USART_0_set_ISR_cb+0x32>
    3658:	0e c0       	rjmp	.+28     	; 0x3676 <USART_0_set_ISR_cb+0x40>
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	80 93 f5 70 	sts	0x70F5, r24	; 0x8070f5 <USART_0_rx_isr_cb>
    3662:	90 93 f6 70 	sts	0x70F6, r25	; 0x8070f6 <USART_0_rx_isr_cb+0x1>
    3666:	07 c0       	rjmp	.+14     	; 0x3676 <USART_0_set_ISR_cb+0x40>
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	9a 81       	ldd	r25, Y+2	; 0x02
    366c:	80 93 f7 70 	sts	0x70F7, r24	; 0x8070f7 <USART_0_udre_isr_cb>
    3670:	90 93 f8 70 	sts	0x70F8, r25	; 0x8070f8 <USART_0_udre_isr_cb+0x1>
    3674:	00 00       	nop
    3676:	00 00       	nop
    3678:	23 96       	adiw	r28, 0x03	; 3
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	df 91       	pop	r29
    3680:	cf 91       	pop	r28
    3682:	08 95       	ret

00003684 <__vector_19>:
    3684:	1f 92       	push	r1
    3686:	0f 92       	push	r0
    3688:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    368c:	0f 92       	push	r0
    368e:	11 24       	eor	r1, r1
    3690:	2f 93       	push	r18
    3692:	3f 93       	push	r19
    3694:	4f 93       	push	r20
    3696:	5f 93       	push	r21
    3698:	6f 93       	push	r22
    369a:	7f 93       	push	r23
    369c:	8f 93       	push	r24
    369e:	9f 93       	push	r25
    36a0:	af 93       	push	r26
    36a2:	bf 93       	push	r27
    36a4:	ef 93       	push	r30
    36a6:	ff 93       	push	r31
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	80 91 f5 70 	lds	r24, 0x70F5	; 0x8070f5 <USART_0_rx_isr_cb>
    36b4:	90 91 f6 70 	lds	r25, 0x70F6	; 0x8070f6 <USART_0_rx_isr_cb+0x1>
    36b8:	89 2b       	or	r24, r25
    36ba:	31 f0       	breq	.+12     	; 0x36c8 <__vector_19+0x44>
    36bc:	80 91 f5 70 	lds	r24, 0x70F5	; 0x8070f5 <USART_0_rx_isr_cb>
    36c0:	90 91 f6 70 	lds	r25, 0x70F6	; 0x8070f6 <USART_0_rx_isr_cb+0x1>
    36c4:	fc 01       	movw	r30, r24
    36c6:	09 95       	icall
    36c8:	00 00       	nop
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	ff 91       	pop	r31
    36d0:	ef 91       	pop	r30
    36d2:	bf 91       	pop	r27
    36d4:	af 91       	pop	r26
    36d6:	9f 91       	pop	r25
    36d8:	8f 91       	pop	r24
    36da:	7f 91       	pop	r23
    36dc:	6f 91       	pop	r22
    36de:	5f 91       	pop	r21
    36e0:	4f 91       	pop	r20
    36e2:	3f 91       	pop	r19
    36e4:	2f 91       	pop	r18
    36e6:	0f 90       	pop	r0
    36e8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    36ec:	0f 90       	pop	r0
    36ee:	1f 90       	pop	r1
    36f0:	18 95       	reti

000036f2 <__vector_20>:
    36f2:	1f 92       	push	r1
    36f4:	0f 92       	push	r0
    36f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    36fa:	0f 92       	push	r0
    36fc:	11 24       	eor	r1, r1
    36fe:	2f 93       	push	r18
    3700:	3f 93       	push	r19
    3702:	4f 93       	push	r20
    3704:	5f 93       	push	r21
    3706:	6f 93       	push	r22
    3708:	7f 93       	push	r23
    370a:	8f 93       	push	r24
    370c:	9f 93       	push	r25
    370e:	af 93       	push	r26
    3710:	bf 93       	push	r27
    3712:	ef 93       	push	r30
    3714:	ff 93       	push	r31
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
    371e:	80 91 f7 70 	lds	r24, 0x70F7	; 0x8070f7 <USART_0_udre_isr_cb>
    3722:	90 91 f8 70 	lds	r25, 0x70F8	; 0x8070f8 <USART_0_udre_isr_cb+0x1>
    3726:	89 2b       	or	r24, r25
    3728:	31 f0       	breq	.+12     	; 0x3736 <__vector_20+0x44>
    372a:	80 91 f7 70 	lds	r24, 0x70F7	; 0x8070f7 <USART_0_udre_isr_cb>
    372e:	90 91 f8 70 	lds	r25, 0x70F8	; 0x8070f8 <USART_0_udre_isr_cb+0x1>
    3732:	fc 01       	movw	r30, r24
    3734:	09 95       	icall
    3736:	00 00       	nop
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	ff 91       	pop	r31
    373e:	ef 91       	pop	r30
    3740:	bf 91       	pop	r27
    3742:	af 91       	pop	r26
    3744:	9f 91       	pop	r25
    3746:	8f 91       	pop	r24
    3748:	7f 91       	pop	r23
    374a:	6f 91       	pop	r22
    374c:	5f 91       	pop	r21
    374e:	4f 91       	pop	r20
    3750:	3f 91       	pop	r19
    3752:	2f 91       	pop	r18
    3754:	0f 90       	pop	r0
    3756:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    375a:	0f 90       	pop	r0
    375c:	1f 90       	pop	r1
    375e:	18 95       	reti

00003760 <USART_0_write>:
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    3764:	00 d0       	rcall	.+0      	; 0x3766 <USART_0_write+0x6>
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	8a 83       	std	Y+2, r24	; 0x02
    376c:	80 91 af 71 	lds	r24, 0x71AF	; 0x8071af <USART_0_tx_head>
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	8f 73       	andi	r24, 0x3F	; 63
    3774:	89 83       	std	Y+1, r24	; 0x01
    3776:	00 00       	nop
    3778:	80 91 b1 71 	lds	r24, 0x71B1	; 0x8071b1 <USART_0_tx_elements>
    377c:	80 34       	cpi	r24, 0x40	; 64
    377e:	e1 f3       	breq	.-8      	; 0x3778 <USART_0_write+0x18>
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	88 2f       	mov	r24, r24
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	81 59       	subi	r24, 0x91	; 145
    3788:	9e 48       	sbci	r25, 0x8E	; 142
    378a:	2a 81       	ldd	r18, Y+2	; 0x02
    378c:	fc 01       	movw	r30, r24
    378e:	20 83       	st	Z, r18
    3790:	89 81       	ldd	r24, Y+1	; 0x01
    3792:	80 93 af 71 	sts	0x71AF, r24	; 0x8071af <USART_0_tx_head>
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	f8 94       	cli
    379a:	0f 92       	push	r0
    379c:	80 91 b1 71 	lds	r24, 0x71B1	; 0x8071b1 <USART_0_tx_elements>
    37a0:	8f 5f       	subi	r24, 0xFF	; 255
    37a2:	80 93 b1 71 	sts	0x71B1, r24	; 0x8071b1 <USART_0_tx_elements>
    37a6:	0f 90       	pop	r0
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	98 e0       	ldi	r25, 0x08	; 8
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	38 e0       	ldi	r19, 0x08	; 8
    37b2:	f9 01       	movw	r30, r18
    37b4:	25 81       	ldd	r18, Z+5	; 0x05
    37b6:	20 62       	ori	r18, 0x20	; 32
    37b8:	fc 01       	movw	r30, r24
    37ba:	25 83       	std	Z+5, r18	; 0x05
    37bc:	00 00       	nop
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	08 95       	ret

000037c8 <USART_0_init>:
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	1f 92       	push	r1
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	98 e0       	ldi	r25, 0x08	; 8
    37d6:	20 e1       	ldi	r18, 0x10	; 16
    37d8:	37 e2       	ldi	r19, 0x27	; 39
    37da:	fc 01       	movw	r30, r24
    37dc:	20 87       	std	Z+8, r18	; 0x08
    37de:	31 87       	std	Z+9, r19	; 0x09
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	98 e0       	ldi	r25, 0x08	; 8
    37e4:	20 e8       	ldi	r18, 0x80	; 128
    37e6:	fc 01       	movw	r30, r24
    37e8:	25 83       	std	Z+5, r18	; 0x05
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	98 e0       	ldi	r25, 0x08	; 8
    37ee:	20 ec       	ldi	r18, 0xC0	; 192
    37f0:	fc 01       	movw	r30, r24
    37f2:	26 83       	std	Z+6, r18	; 0x06
    37f4:	19 82       	std	Y+1, r1	; 0x01
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	80 93 6d 71 	sts	0x716D, r24	; 0x80716d <USART_0_rx_tail>
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	80 93 6c 71 	sts	0x716C, r24	; 0x80716c <USART_0_rx_head>
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	80 93 6e 71 	sts	0x716E, r24	; 0x80716e <USART_0_rx_elements>
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	80 93 b0 71 	sts	0x71B0, r24	; 0x8071b0 <USART_0_tx_tail>
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	80 93 af 71 	sts	0x71AF, r24	; 0x8071af <USART_0_tx_head>
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	80 93 b1 71 	sts	0x71B1, r24	; 0x8071b1 <USART_0_tx_elements>
    381a:	87 ee       	ldi	r24, 0xE7	; 231
    381c:	90 e7       	ldi	r25, 0x70	; 112
    381e:	80 93 c0 71 	sts	0x71C0, r24	; 0x8071c0 <__iob+0x2>
    3822:	90 93 c1 71 	sts	0x71C1, r25	; 0x8071c1 <__iob+0x3>
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	0f 90       	pop	r0
    382a:	df 91       	pop	r29
    382c:	cf 91       	pop	r28
    382e:	08 95       	ret

00003830 <USART_0_get_data>:
 * \brief Get recieved data from USART_0
 *
 * \return Data register from USART_0 module
 */
uint8_t USART_0_get_data()
{
    3830:	cf 93       	push	r28
    3832:	df 93       	push	r29
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
	return USART0.RXDATAL;
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	98 e0       	ldi	r25, 0x08	; 8
    383c:	fc 01       	movw	r30, r24
    383e:	80 81       	ld	r24, Z
}
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	00 d0       	rcall	.+0      	; 0x384c <ccp_write_io+0x6>
    384c:	1f 92       	push	r1
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	9a 83       	std	Y+2, r25	; 0x02
    3856:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	9a 81       	ldd	r25, Y+2	; 0x02
    385c:	4b 81       	ldd	r20, Y+3	; 0x03
    385e:	68 ed       	ldi	r22, 0xD8	; 216
    3860:	0e 94 87 1a 	call	0x350e	; 0x350e <protected_write_io>
}
    3864:	00 00       	nop
    3866:	23 96       	adiw	r28, 0x03	; 3
    3868:	cd bf       	out	0x3d, r28	; 61
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	08 95       	ret

00003872 <WDT_0_init>:
 * \brief Initialize Watchdog Timer
 *
 * \return 0
 */
int8_t WDT_0_init()
{
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62

	ccp_write_io((void *)&(WDT.CTRLA),
    387a:	68 e0       	ldi	r22, 0x08	; 8
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	91 e0       	ldi	r25, 0x01	; 1
    3880:	0e 94 23 1c 	call	0x3846	; 0x3846 <ccp_write_io>
	             WDT_PERIOD_1KCLK_gc /* 1K cycles (1.0s) */
	                 | WDT_WINDOW_OFF_gc /* Off */);

	return 0;
    3884:	80 e0       	ldi	r24, 0x00	; 0
}
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	08 95       	ret

0000388c <__subsf3>:
    388c:	50 58       	subi	r21, 0x80	; 128

0000388e <__addsf3>:
    388e:	bb 27       	eor	r27, r27
    3890:	aa 27       	eor	r26, r26
    3892:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__addsf3x>
    3896:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__fp_round>
    389a:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__fp_pscA>
    389e:	38 f0       	brcs	.+14     	; 0x38ae <__addsf3+0x20>
    38a0:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__fp_pscB>
    38a4:	20 f0       	brcs	.+8      	; 0x38ae <__addsf3+0x20>
    38a6:	39 f4       	brne	.+14     	; 0x38b6 <__addsf3+0x28>
    38a8:	9f 3f       	cpi	r25, 0xFF	; 255
    38aa:	19 f4       	brne	.+6      	; 0x38b2 <__addsf3+0x24>
    38ac:	26 f4       	brtc	.+8      	; 0x38b6 <__addsf3+0x28>
    38ae:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__fp_nan>
    38b2:	0e f4       	brtc	.+2      	; 0x38b6 <__addsf3+0x28>
    38b4:	e0 95       	com	r30
    38b6:	e7 fb       	bst	r30, 7
    38b8:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_inf>

000038bc <__addsf3x>:
    38bc:	e9 2f       	mov	r30, r25
    38be:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fp_split3>
    38c2:	58 f3       	brcs	.-42     	; 0x389a <__addsf3+0xc>
    38c4:	ba 17       	cp	r27, r26
    38c6:	62 07       	cpc	r22, r18
    38c8:	73 07       	cpc	r23, r19
    38ca:	84 07       	cpc	r24, r20
    38cc:	95 07       	cpc	r25, r21
    38ce:	20 f0       	brcs	.+8      	; 0x38d8 <__addsf3x+0x1c>
    38d0:	79 f4       	brne	.+30     	; 0x38f0 <__addsf3x+0x34>
    38d2:	a6 f5       	brtc	.+104    	; 0x393c <__addsf3x+0x80>
    38d4:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__fp_zero>
    38d8:	0e f4       	brtc	.+2      	; 0x38dc <__addsf3x+0x20>
    38da:	e0 95       	com	r30
    38dc:	0b 2e       	mov	r0, r27
    38de:	ba 2f       	mov	r27, r26
    38e0:	a0 2d       	mov	r26, r0
    38e2:	0b 01       	movw	r0, r22
    38e4:	b9 01       	movw	r22, r18
    38e6:	90 01       	movw	r18, r0
    38e8:	0c 01       	movw	r0, r24
    38ea:	ca 01       	movw	r24, r20
    38ec:	a0 01       	movw	r20, r0
    38ee:	11 24       	eor	r1, r1
    38f0:	ff 27       	eor	r31, r31
    38f2:	59 1b       	sub	r21, r25
    38f4:	99 f0       	breq	.+38     	; 0x391c <__addsf3x+0x60>
    38f6:	59 3f       	cpi	r21, 0xF9	; 249
    38f8:	50 f4       	brcc	.+20     	; 0x390e <__addsf3x+0x52>
    38fa:	50 3e       	cpi	r21, 0xE0	; 224
    38fc:	68 f1       	brcs	.+90     	; 0x3958 <__addsf3x+0x9c>
    38fe:	1a 16       	cp	r1, r26
    3900:	f0 40       	sbci	r31, 0x00	; 0
    3902:	a2 2f       	mov	r26, r18
    3904:	23 2f       	mov	r18, r19
    3906:	34 2f       	mov	r19, r20
    3908:	44 27       	eor	r20, r20
    390a:	58 5f       	subi	r21, 0xF8	; 248
    390c:	f3 cf       	rjmp	.-26     	; 0x38f4 <__addsf3x+0x38>
    390e:	46 95       	lsr	r20
    3910:	37 95       	ror	r19
    3912:	27 95       	ror	r18
    3914:	a7 95       	ror	r26
    3916:	f0 40       	sbci	r31, 0x00	; 0
    3918:	53 95       	inc	r21
    391a:	c9 f7       	brne	.-14     	; 0x390e <__addsf3x+0x52>
    391c:	7e f4       	brtc	.+30     	; 0x393c <__addsf3x+0x80>
    391e:	1f 16       	cp	r1, r31
    3920:	ba 0b       	sbc	r27, r26
    3922:	62 0b       	sbc	r22, r18
    3924:	73 0b       	sbc	r23, r19
    3926:	84 0b       	sbc	r24, r20
    3928:	ba f0       	brmi	.+46     	; 0x3958 <__addsf3x+0x9c>
    392a:	91 50       	subi	r25, 0x01	; 1
    392c:	a1 f0       	breq	.+40     	; 0x3956 <__addsf3x+0x9a>
    392e:	ff 0f       	add	r31, r31
    3930:	bb 1f       	adc	r27, r27
    3932:	66 1f       	adc	r22, r22
    3934:	77 1f       	adc	r23, r23
    3936:	88 1f       	adc	r24, r24
    3938:	c2 f7       	brpl	.-16     	; 0x392a <__addsf3x+0x6e>
    393a:	0e c0       	rjmp	.+28     	; 0x3958 <__addsf3x+0x9c>
    393c:	ba 0f       	add	r27, r26
    393e:	62 1f       	adc	r22, r18
    3940:	73 1f       	adc	r23, r19
    3942:	84 1f       	adc	r24, r20
    3944:	48 f4       	brcc	.+18     	; 0x3958 <__addsf3x+0x9c>
    3946:	87 95       	ror	r24
    3948:	77 95       	ror	r23
    394a:	67 95       	ror	r22
    394c:	b7 95       	ror	r27
    394e:	f7 95       	ror	r31
    3950:	9e 3f       	cpi	r25, 0xFE	; 254
    3952:	08 f0       	brcs	.+2      	; 0x3956 <__addsf3x+0x9a>
    3954:	b0 cf       	rjmp	.-160    	; 0x38b6 <__addsf3+0x28>
    3956:	93 95       	inc	r25
    3958:	88 0f       	add	r24, r24
    395a:	08 f0       	brcs	.+2      	; 0x395e <__addsf3x+0xa2>
    395c:	99 27       	eor	r25, r25
    395e:	ee 0f       	add	r30, r30
    3960:	97 95       	ror	r25
    3962:	87 95       	ror	r24
    3964:	08 95       	ret

00003966 <__cmpsf2>:
    3966:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__fp_cmp>
    396a:	08 f4       	brcc	.+2      	; 0x396e <__cmpsf2+0x8>
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	08 95       	ret

00003970 <__divsf3>:
    3970:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__divsf3x>
    3974:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__fp_round>
    3978:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__fp_pscB>
    397c:	58 f0       	brcs	.+22     	; 0x3994 <__divsf3+0x24>
    397e:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__fp_pscA>
    3982:	40 f0       	brcs	.+16     	; 0x3994 <__divsf3+0x24>
    3984:	29 f4       	brne	.+10     	; 0x3990 <__divsf3+0x20>
    3986:	5f 3f       	cpi	r21, 0xFF	; 255
    3988:	29 f0       	breq	.+10     	; 0x3994 <__divsf3+0x24>
    398a:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_inf>
    398e:	51 11       	cpse	r21, r1
    3990:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__fp_szero>
    3994:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__fp_nan>

00003998 <__divsf3x>:
    3998:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fp_split3>
    399c:	68 f3       	brcs	.-38     	; 0x3978 <__divsf3+0x8>

0000399e <__divsf3_pse>:
    399e:	99 23       	and	r25, r25
    39a0:	b1 f3       	breq	.-20     	; 0x398e <__divsf3+0x1e>
    39a2:	55 23       	and	r21, r21
    39a4:	91 f3       	breq	.-28     	; 0x398a <__divsf3+0x1a>
    39a6:	95 1b       	sub	r25, r21
    39a8:	55 0b       	sbc	r21, r21
    39aa:	bb 27       	eor	r27, r27
    39ac:	aa 27       	eor	r26, r26
    39ae:	62 17       	cp	r22, r18
    39b0:	73 07       	cpc	r23, r19
    39b2:	84 07       	cpc	r24, r20
    39b4:	38 f0       	brcs	.+14     	; 0x39c4 <__divsf3_pse+0x26>
    39b6:	9f 5f       	subi	r25, 0xFF	; 255
    39b8:	5f 4f       	sbci	r21, 0xFF	; 255
    39ba:	22 0f       	add	r18, r18
    39bc:	33 1f       	adc	r19, r19
    39be:	44 1f       	adc	r20, r20
    39c0:	aa 1f       	adc	r26, r26
    39c2:	a9 f3       	breq	.-22     	; 0x39ae <__divsf3_pse+0x10>
    39c4:	35 d0       	rcall	.+106    	; 0x3a30 <__divsf3_pse+0x92>
    39c6:	0e 2e       	mov	r0, r30
    39c8:	3a f0       	brmi	.+14     	; 0x39d8 <__divsf3_pse+0x3a>
    39ca:	e0 e8       	ldi	r30, 0x80	; 128
    39cc:	32 d0       	rcall	.+100    	; 0x3a32 <__divsf3_pse+0x94>
    39ce:	91 50       	subi	r25, 0x01	; 1
    39d0:	50 40       	sbci	r21, 0x00	; 0
    39d2:	e6 95       	lsr	r30
    39d4:	00 1c       	adc	r0, r0
    39d6:	ca f7       	brpl	.-14     	; 0x39ca <__divsf3_pse+0x2c>
    39d8:	2b d0       	rcall	.+86     	; 0x3a30 <__divsf3_pse+0x92>
    39da:	fe 2f       	mov	r31, r30
    39dc:	29 d0       	rcall	.+82     	; 0x3a30 <__divsf3_pse+0x92>
    39de:	66 0f       	add	r22, r22
    39e0:	77 1f       	adc	r23, r23
    39e2:	88 1f       	adc	r24, r24
    39e4:	bb 1f       	adc	r27, r27
    39e6:	26 17       	cp	r18, r22
    39e8:	37 07       	cpc	r19, r23
    39ea:	48 07       	cpc	r20, r24
    39ec:	ab 07       	cpc	r26, r27
    39ee:	b0 e8       	ldi	r27, 0x80	; 128
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <__divsf3_pse+0x56>
    39f2:	bb 0b       	sbc	r27, r27
    39f4:	80 2d       	mov	r24, r0
    39f6:	bf 01       	movw	r22, r30
    39f8:	ff 27       	eor	r31, r31
    39fa:	93 58       	subi	r25, 0x83	; 131
    39fc:	5f 4f       	sbci	r21, 0xFF	; 255
    39fe:	3a f0       	brmi	.+14     	; 0x3a0e <__divsf3_pse+0x70>
    3a00:	9e 3f       	cpi	r25, 0xFE	; 254
    3a02:	51 05       	cpc	r21, r1
    3a04:	78 f0       	brcs	.+30     	; 0x3a24 <__divsf3_pse+0x86>
    3a06:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_inf>
    3a0a:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__fp_szero>
    3a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a10:	e4 f3       	brlt	.-8      	; 0x3a0a <__divsf3_pse+0x6c>
    3a12:	98 3e       	cpi	r25, 0xE8	; 232
    3a14:	d4 f3       	brlt	.-12     	; 0x3a0a <__divsf3_pse+0x6c>
    3a16:	86 95       	lsr	r24
    3a18:	77 95       	ror	r23
    3a1a:	67 95       	ror	r22
    3a1c:	b7 95       	ror	r27
    3a1e:	f7 95       	ror	r31
    3a20:	9f 5f       	subi	r25, 0xFF	; 255
    3a22:	c9 f7       	brne	.-14     	; 0x3a16 <__divsf3_pse+0x78>
    3a24:	88 0f       	add	r24, r24
    3a26:	91 1d       	adc	r25, r1
    3a28:	96 95       	lsr	r25
    3a2a:	87 95       	ror	r24
    3a2c:	97 f9       	bld	r25, 7
    3a2e:	08 95       	ret
    3a30:	e1 e0       	ldi	r30, 0x01	; 1
    3a32:	66 0f       	add	r22, r22
    3a34:	77 1f       	adc	r23, r23
    3a36:	88 1f       	adc	r24, r24
    3a38:	bb 1f       	adc	r27, r27
    3a3a:	62 17       	cp	r22, r18
    3a3c:	73 07       	cpc	r23, r19
    3a3e:	84 07       	cpc	r24, r20
    3a40:	ba 07       	cpc	r27, r26
    3a42:	20 f0       	brcs	.+8      	; 0x3a4c <__divsf3_pse+0xae>
    3a44:	62 1b       	sub	r22, r18
    3a46:	73 0b       	sbc	r23, r19
    3a48:	84 0b       	sbc	r24, r20
    3a4a:	ba 0b       	sbc	r27, r26
    3a4c:	ee 1f       	adc	r30, r30
    3a4e:	88 f7       	brcc	.-30     	; 0x3a32 <__divsf3_pse+0x94>
    3a50:	e0 95       	com	r30
    3a52:	08 95       	ret

00003a54 <__fixsfsi>:
    3a54:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__fixunssfsi>
    3a58:	68 94       	set
    3a5a:	b1 11       	cpse	r27, r1
    3a5c:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__fp_szero>
    3a60:	08 95       	ret

00003a62 <__fixunssfsi>:
    3a62:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__fp_splitA>
    3a66:	88 f0       	brcs	.+34     	; 0x3a8a <__fixunssfsi+0x28>
    3a68:	9f 57       	subi	r25, 0x7F	; 127
    3a6a:	98 f0       	brcs	.+38     	; 0x3a92 <__fixunssfsi+0x30>
    3a6c:	b9 2f       	mov	r27, r25
    3a6e:	99 27       	eor	r25, r25
    3a70:	b7 51       	subi	r27, 0x17	; 23
    3a72:	b0 f0       	brcs	.+44     	; 0x3aa0 <__fixunssfsi+0x3e>
    3a74:	e1 f0       	breq	.+56     	; 0x3aae <__fixunssfsi+0x4c>
    3a76:	66 0f       	add	r22, r22
    3a78:	77 1f       	adc	r23, r23
    3a7a:	88 1f       	adc	r24, r24
    3a7c:	99 1f       	adc	r25, r25
    3a7e:	1a f0       	brmi	.+6      	; 0x3a86 <__fixunssfsi+0x24>
    3a80:	ba 95       	dec	r27
    3a82:	c9 f7       	brne	.-14     	; 0x3a76 <__fixunssfsi+0x14>
    3a84:	14 c0       	rjmp	.+40     	; 0x3aae <__fixunssfsi+0x4c>
    3a86:	b1 30       	cpi	r27, 0x01	; 1
    3a88:	91 f0       	breq	.+36     	; 0x3aae <__fixunssfsi+0x4c>
    3a8a:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <__fp_zero>
    3a8e:	b1 e0       	ldi	r27, 0x01	; 1
    3a90:	08 95       	ret
    3a92:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__fp_zero>
    3a96:	67 2f       	mov	r22, r23
    3a98:	78 2f       	mov	r23, r24
    3a9a:	88 27       	eor	r24, r24
    3a9c:	b8 5f       	subi	r27, 0xF8	; 248
    3a9e:	39 f0       	breq	.+14     	; 0x3aae <__fixunssfsi+0x4c>
    3aa0:	b9 3f       	cpi	r27, 0xF9	; 249
    3aa2:	cc f3       	brlt	.-14     	; 0x3a96 <__fixunssfsi+0x34>
    3aa4:	86 95       	lsr	r24
    3aa6:	77 95       	ror	r23
    3aa8:	67 95       	ror	r22
    3aaa:	b3 95       	inc	r27
    3aac:	d9 f7       	brne	.-10     	; 0x3aa4 <__fixunssfsi+0x42>
    3aae:	3e f4       	brtc	.+14     	; 0x3abe <__fixunssfsi+0x5c>
    3ab0:	90 95       	com	r25
    3ab2:	80 95       	com	r24
    3ab4:	70 95       	com	r23
    3ab6:	61 95       	neg	r22
    3ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    3aba:	8f 4f       	sbci	r24, 0xFF	; 255
    3abc:	9f 4f       	sbci	r25, 0xFF	; 255
    3abe:	08 95       	ret

00003ac0 <__floatunsisf>:
    3ac0:	e8 94       	clt
    3ac2:	09 c0       	rjmp	.+18     	; 0x3ad6 <__floatsisf+0x12>

00003ac4 <__floatsisf>:
    3ac4:	97 fb       	bst	r25, 7
    3ac6:	3e f4       	brtc	.+14     	; 0x3ad6 <__floatsisf+0x12>
    3ac8:	90 95       	com	r25
    3aca:	80 95       	com	r24
    3acc:	70 95       	com	r23
    3ace:	61 95       	neg	r22
    3ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad6:	99 23       	and	r25, r25
    3ad8:	a9 f0       	breq	.+42     	; 0x3b04 <__floatsisf+0x40>
    3ada:	f9 2f       	mov	r31, r25
    3adc:	96 e9       	ldi	r25, 0x96	; 150
    3ade:	bb 27       	eor	r27, r27
    3ae0:	93 95       	inc	r25
    3ae2:	f6 95       	lsr	r31
    3ae4:	87 95       	ror	r24
    3ae6:	77 95       	ror	r23
    3ae8:	67 95       	ror	r22
    3aea:	b7 95       	ror	r27
    3aec:	f1 11       	cpse	r31, r1
    3aee:	f8 cf       	rjmp	.-16     	; 0x3ae0 <__floatsisf+0x1c>
    3af0:	fa f4       	brpl	.+62     	; 0x3b30 <__floatsisf+0x6c>
    3af2:	bb 0f       	add	r27, r27
    3af4:	11 f4       	brne	.+4      	; 0x3afa <__floatsisf+0x36>
    3af6:	60 ff       	sbrs	r22, 0
    3af8:	1b c0       	rjmp	.+54     	; 0x3b30 <__floatsisf+0x6c>
    3afa:	6f 5f       	subi	r22, 0xFF	; 255
    3afc:	7f 4f       	sbci	r23, 0xFF	; 255
    3afe:	8f 4f       	sbci	r24, 0xFF	; 255
    3b00:	9f 4f       	sbci	r25, 0xFF	; 255
    3b02:	16 c0       	rjmp	.+44     	; 0x3b30 <__floatsisf+0x6c>
    3b04:	88 23       	and	r24, r24
    3b06:	11 f0       	breq	.+4      	; 0x3b0c <__floatsisf+0x48>
    3b08:	96 e9       	ldi	r25, 0x96	; 150
    3b0a:	11 c0       	rjmp	.+34     	; 0x3b2e <__floatsisf+0x6a>
    3b0c:	77 23       	and	r23, r23
    3b0e:	21 f0       	breq	.+8      	; 0x3b18 <__floatsisf+0x54>
    3b10:	9e e8       	ldi	r25, 0x8E	; 142
    3b12:	87 2f       	mov	r24, r23
    3b14:	76 2f       	mov	r23, r22
    3b16:	05 c0       	rjmp	.+10     	; 0x3b22 <__floatsisf+0x5e>
    3b18:	66 23       	and	r22, r22
    3b1a:	71 f0       	breq	.+28     	; 0x3b38 <__floatsisf+0x74>
    3b1c:	96 e8       	ldi	r25, 0x86	; 134
    3b1e:	86 2f       	mov	r24, r22
    3b20:	70 e0       	ldi	r23, 0x00	; 0
    3b22:	60 e0       	ldi	r22, 0x00	; 0
    3b24:	2a f0       	brmi	.+10     	; 0x3b30 <__floatsisf+0x6c>
    3b26:	9a 95       	dec	r25
    3b28:	66 0f       	add	r22, r22
    3b2a:	77 1f       	adc	r23, r23
    3b2c:	88 1f       	adc	r24, r24
    3b2e:	da f7       	brpl	.-10     	; 0x3b26 <__floatsisf+0x62>
    3b30:	88 0f       	add	r24, r24
    3b32:	96 95       	lsr	r25
    3b34:	87 95       	ror	r24
    3b36:	97 f9       	bld	r25, 7
    3b38:	08 95       	ret

00003b3a <__fp_cmp>:
    3b3a:	99 0f       	add	r25, r25
    3b3c:	00 08       	sbc	r0, r0
    3b3e:	55 0f       	add	r21, r21
    3b40:	aa 0b       	sbc	r26, r26
    3b42:	e0 e8       	ldi	r30, 0x80	; 128
    3b44:	fe ef       	ldi	r31, 0xFE	; 254
    3b46:	16 16       	cp	r1, r22
    3b48:	17 06       	cpc	r1, r23
    3b4a:	e8 07       	cpc	r30, r24
    3b4c:	f9 07       	cpc	r31, r25
    3b4e:	c0 f0       	brcs	.+48     	; 0x3b80 <__fp_cmp+0x46>
    3b50:	12 16       	cp	r1, r18
    3b52:	13 06       	cpc	r1, r19
    3b54:	e4 07       	cpc	r30, r20
    3b56:	f5 07       	cpc	r31, r21
    3b58:	98 f0       	brcs	.+38     	; 0x3b80 <__fp_cmp+0x46>
    3b5a:	62 1b       	sub	r22, r18
    3b5c:	73 0b       	sbc	r23, r19
    3b5e:	84 0b       	sbc	r24, r20
    3b60:	95 0b       	sbc	r25, r21
    3b62:	39 f4       	brne	.+14     	; 0x3b72 <__fp_cmp+0x38>
    3b64:	0a 26       	eor	r0, r26
    3b66:	61 f0       	breq	.+24     	; 0x3b80 <__fp_cmp+0x46>
    3b68:	23 2b       	or	r18, r19
    3b6a:	24 2b       	or	r18, r20
    3b6c:	25 2b       	or	r18, r21
    3b6e:	21 f4       	brne	.+8      	; 0x3b78 <__fp_cmp+0x3e>
    3b70:	08 95       	ret
    3b72:	0a 26       	eor	r0, r26
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <__fp_cmp+0x3e>
    3b76:	a1 40       	sbci	r26, 0x01	; 1
    3b78:	a6 95       	lsr	r26
    3b7a:	8f ef       	ldi	r24, 0xFF	; 255
    3b7c:	81 1d       	adc	r24, r1
    3b7e:	81 1d       	adc	r24, r1
    3b80:	08 95       	ret

00003b82 <__fp_inf>:
    3b82:	97 f9       	bld	r25, 7
    3b84:	9f 67       	ori	r25, 0x7F	; 127
    3b86:	80 e8       	ldi	r24, 0x80	; 128
    3b88:	70 e0       	ldi	r23, 0x00	; 0
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	08 95       	ret

00003b8e <__fp_nan>:
    3b8e:	9f ef       	ldi	r25, 0xFF	; 255
    3b90:	80 ec       	ldi	r24, 0xC0	; 192
    3b92:	08 95       	ret

00003b94 <__fp_pscA>:
    3b94:	00 24       	eor	r0, r0
    3b96:	0a 94       	dec	r0
    3b98:	16 16       	cp	r1, r22
    3b9a:	17 06       	cpc	r1, r23
    3b9c:	18 06       	cpc	r1, r24
    3b9e:	09 06       	cpc	r0, r25
    3ba0:	08 95       	ret

00003ba2 <__fp_pscB>:
    3ba2:	00 24       	eor	r0, r0
    3ba4:	0a 94       	dec	r0
    3ba6:	12 16       	cp	r1, r18
    3ba8:	13 06       	cpc	r1, r19
    3baa:	14 06       	cpc	r1, r20
    3bac:	05 06       	cpc	r0, r21
    3bae:	08 95       	ret

00003bb0 <__fp_round>:
    3bb0:	09 2e       	mov	r0, r25
    3bb2:	03 94       	inc	r0
    3bb4:	00 0c       	add	r0, r0
    3bb6:	11 f4       	brne	.+4      	; 0x3bbc <__fp_round+0xc>
    3bb8:	88 23       	and	r24, r24
    3bba:	52 f0       	brmi	.+20     	; 0x3bd0 <__fp_round+0x20>
    3bbc:	bb 0f       	add	r27, r27
    3bbe:	40 f4       	brcc	.+16     	; 0x3bd0 <__fp_round+0x20>
    3bc0:	bf 2b       	or	r27, r31
    3bc2:	11 f4       	brne	.+4      	; 0x3bc8 <__fp_round+0x18>
    3bc4:	60 ff       	sbrs	r22, 0
    3bc6:	04 c0       	rjmp	.+8      	; 0x3bd0 <__fp_round+0x20>
    3bc8:	6f 5f       	subi	r22, 0xFF	; 255
    3bca:	7f 4f       	sbci	r23, 0xFF	; 255
    3bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bce:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd0:	08 95       	ret

00003bd2 <__fp_split3>:
    3bd2:	57 fd       	sbrc	r21, 7
    3bd4:	90 58       	subi	r25, 0x80	; 128
    3bd6:	44 0f       	add	r20, r20
    3bd8:	55 1f       	adc	r21, r21
    3bda:	59 f0       	breq	.+22     	; 0x3bf2 <__fp_splitA+0x10>
    3bdc:	5f 3f       	cpi	r21, 0xFF	; 255
    3bde:	71 f0       	breq	.+28     	; 0x3bfc <__fp_splitA+0x1a>
    3be0:	47 95       	ror	r20

00003be2 <__fp_splitA>:
    3be2:	88 0f       	add	r24, r24
    3be4:	97 fb       	bst	r25, 7
    3be6:	99 1f       	adc	r25, r25
    3be8:	61 f0       	breq	.+24     	; 0x3c02 <__fp_splitA+0x20>
    3bea:	9f 3f       	cpi	r25, 0xFF	; 255
    3bec:	79 f0       	breq	.+30     	; 0x3c0c <__fp_splitA+0x2a>
    3bee:	87 95       	ror	r24
    3bf0:	08 95       	ret
    3bf2:	12 16       	cp	r1, r18
    3bf4:	13 06       	cpc	r1, r19
    3bf6:	14 06       	cpc	r1, r20
    3bf8:	55 1f       	adc	r21, r21
    3bfa:	f2 cf       	rjmp	.-28     	; 0x3be0 <__fp_split3+0xe>
    3bfc:	46 95       	lsr	r20
    3bfe:	f1 df       	rcall	.-30     	; 0x3be2 <__fp_splitA>
    3c00:	08 c0       	rjmp	.+16     	; 0x3c12 <__fp_splitA+0x30>
    3c02:	16 16       	cp	r1, r22
    3c04:	17 06       	cpc	r1, r23
    3c06:	18 06       	cpc	r1, r24
    3c08:	99 1f       	adc	r25, r25
    3c0a:	f1 cf       	rjmp	.-30     	; 0x3bee <__fp_splitA+0xc>
    3c0c:	86 95       	lsr	r24
    3c0e:	71 05       	cpc	r23, r1
    3c10:	61 05       	cpc	r22, r1
    3c12:	08 94       	sec
    3c14:	08 95       	ret

00003c16 <__fp_zero>:
    3c16:	e8 94       	clt

00003c18 <__fp_szero>:
    3c18:	bb 27       	eor	r27, r27
    3c1a:	66 27       	eor	r22, r22
    3c1c:	77 27       	eor	r23, r23
    3c1e:	cb 01       	movw	r24, r22
    3c20:	97 f9       	bld	r25, 7
    3c22:	08 95       	ret

00003c24 <__gesf2>:
    3c24:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__fp_cmp>
    3c28:	08 f4       	brcc	.+2      	; 0x3c2c <__gesf2+0x8>
    3c2a:	8f ef       	ldi	r24, 0xFF	; 255
    3c2c:	08 95       	ret

00003c2e <__mulsf3>:
    3c2e:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__mulsf3x>
    3c32:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__fp_round>
    3c36:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__fp_pscA>
    3c3a:	38 f0       	brcs	.+14     	; 0x3c4a <__mulsf3+0x1c>
    3c3c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__fp_pscB>
    3c40:	20 f0       	brcs	.+8      	; 0x3c4a <__mulsf3+0x1c>
    3c42:	95 23       	and	r25, r21
    3c44:	11 f0       	breq	.+4      	; 0x3c4a <__mulsf3+0x1c>
    3c46:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_inf>
    3c4a:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__fp_nan>
    3c4e:	11 24       	eor	r1, r1
    3c50:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__fp_szero>

00003c54 <__mulsf3x>:
    3c54:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fp_split3>
    3c58:	70 f3       	brcs	.-36     	; 0x3c36 <__mulsf3+0x8>

00003c5a <__mulsf3_pse>:
    3c5a:	95 9f       	mul	r25, r21
    3c5c:	c1 f3       	breq	.-16     	; 0x3c4e <__mulsf3+0x20>
    3c5e:	95 0f       	add	r25, r21
    3c60:	50 e0       	ldi	r21, 0x00	; 0
    3c62:	55 1f       	adc	r21, r21
    3c64:	62 9f       	mul	r22, r18
    3c66:	f0 01       	movw	r30, r0
    3c68:	72 9f       	mul	r23, r18
    3c6a:	bb 27       	eor	r27, r27
    3c6c:	f0 0d       	add	r31, r0
    3c6e:	b1 1d       	adc	r27, r1
    3c70:	63 9f       	mul	r22, r19
    3c72:	aa 27       	eor	r26, r26
    3c74:	f0 0d       	add	r31, r0
    3c76:	b1 1d       	adc	r27, r1
    3c78:	aa 1f       	adc	r26, r26
    3c7a:	64 9f       	mul	r22, r20
    3c7c:	66 27       	eor	r22, r22
    3c7e:	b0 0d       	add	r27, r0
    3c80:	a1 1d       	adc	r26, r1
    3c82:	66 1f       	adc	r22, r22
    3c84:	82 9f       	mul	r24, r18
    3c86:	22 27       	eor	r18, r18
    3c88:	b0 0d       	add	r27, r0
    3c8a:	a1 1d       	adc	r26, r1
    3c8c:	62 1f       	adc	r22, r18
    3c8e:	73 9f       	mul	r23, r19
    3c90:	b0 0d       	add	r27, r0
    3c92:	a1 1d       	adc	r26, r1
    3c94:	62 1f       	adc	r22, r18
    3c96:	83 9f       	mul	r24, r19
    3c98:	a0 0d       	add	r26, r0
    3c9a:	61 1d       	adc	r22, r1
    3c9c:	22 1f       	adc	r18, r18
    3c9e:	74 9f       	mul	r23, r20
    3ca0:	33 27       	eor	r19, r19
    3ca2:	a0 0d       	add	r26, r0
    3ca4:	61 1d       	adc	r22, r1
    3ca6:	23 1f       	adc	r18, r19
    3ca8:	84 9f       	mul	r24, r20
    3caa:	60 0d       	add	r22, r0
    3cac:	21 1d       	adc	r18, r1
    3cae:	82 2f       	mov	r24, r18
    3cb0:	76 2f       	mov	r23, r22
    3cb2:	6a 2f       	mov	r22, r26
    3cb4:	11 24       	eor	r1, r1
    3cb6:	9f 57       	subi	r25, 0x7F	; 127
    3cb8:	50 40       	sbci	r21, 0x00	; 0
    3cba:	9a f0       	brmi	.+38     	; 0x3ce2 <__mulsf3_pse+0x88>
    3cbc:	f1 f0       	breq	.+60     	; 0x3cfa <__mulsf3_pse+0xa0>
    3cbe:	88 23       	and	r24, r24
    3cc0:	4a f0       	brmi	.+18     	; 0x3cd4 <__mulsf3_pse+0x7a>
    3cc2:	ee 0f       	add	r30, r30
    3cc4:	ff 1f       	adc	r31, r31
    3cc6:	bb 1f       	adc	r27, r27
    3cc8:	66 1f       	adc	r22, r22
    3cca:	77 1f       	adc	r23, r23
    3ccc:	88 1f       	adc	r24, r24
    3cce:	91 50       	subi	r25, 0x01	; 1
    3cd0:	50 40       	sbci	r21, 0x00	; 0
    3cd2:	a9 f7       	brne	.-22     	; 0x3cbe <__mulsf3_pse+0x64>
    3cd4:	9e 3f       	cpi	r25, 0xFE	; 254
    3cd6:	51 05       	cpc	r21, r1
    3cd8:	80 f0       	brcs	.+32     	; 0x3cfa <__mulsf3_pse+0xa0>
    3cda:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <__fp_inf>
    3cde:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__fp_szero>
    3ce2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce4:	e4 f3       	brlt	.-8      	; 0x3cde <__mulsf3_pse+0x84>
    3ce6:	98 3e       	cpi	r25, 0xE8	; 232
    3ce8:	d4 f3       	brlt	.-12     	; 0x3cde <__mulsf3_pse+0x84>
    3cea:	86 95       	lsr	r24
    3cec:	77 95       	ror	r23
    3cee:	67 95       	ror	r22
    3cf0:	b7 95       	ror	r27
    3cf2:	f7 95       	ror	r31
    3cf4:	e7 95       	ror	r30
    3cf6:	9f 5f       	subi	r25, 0xFF	; 255
    3cf8:	c1 f7       	brne	.-16     	; 0x3cea <__mulsf3_pse+0x90>
    3cfa:	fe 2b       	or	r31, r30
    3cfc:	88 0f       	add	r24, r24
    3cfe:	91 1d       	adc	r25, r1
    3d00:	96 95       	lsr	r25
    3d02:	87 95       	ror	r24
    3d04:	97 f9       	bld	r25, 7
    3d06:	08 95       	ret

00003d08 <__mulsi3>:
    3d08:	db 01       	movw	r26, r22
    3d0a:	8f 93       	push	r24
    3d0c:	9f 93       	push	r25
    3d0e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__muluhisi3>
    3d12:	bf 91       	pop	r27
    3d14:	af 91       	pop	r26
    3d16:	a2 9f       	mul	r26, r18
    3d18:	80 0d       	add	r24, r0
    3d1a:	91 1d       	adc	r25, r1
    3d1c:	a3 9f       	mul	r26, r19
    3d1e:	90 0d       	add	r25, r0
    3d20:	b2 9f       	mul	r27, r18
    3d22:	90 0d       	add	r25, r0
    3d24:	11 24       	eor	r1, r1
    3d26:	08 95       	ret

00003d28 <__divmodsi4>:
    3d28:	05 2e       	mov	r0, r21
    3d2a:	97 fb       	bst	r25, 7
    3d2c:	1e f4       	brtc	.+6      	; 0x3d34 <__divmodsi4+0xc>
    3d2e:	00 94       	com	r0
    3d30:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__negsi2>
    3d34:	57 fd       	sbrc	r21, 7
    3d36:	07 d0       	rcall	.+14     	; 0x3d46 <__divmodsi4_neg2>
    3d38:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__udivmodsi4>
    3d3c:	07 fc       	sbrc	r0, 7
    3d3e:	03 d0       	rcall	.+6      	; 0x3d46 <__divmodsi4_neg2>
    3d40:	4e f4       	brtc	.+18     	; 0x3d54 <__divmodsi4_exit>
    3d42:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__negsi2>

00003d46 <__divmodsi4_neg2>:
    3d46:	50 95       	com	r21
    3d48:	40 95       	com	r20
    3d4a:	30 95       	com	r19
    3d4c:	21 95       	neg	r18
    3d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d50:	4f 4f       	sbci	r20, 0xFF	; 255
    3d52:	5f 4f       	sbci	r21, 0xFF	; 255

00003d54 <__divmodsi4_exit>:
    3d54:	08 95       	ret

00003d56 <__negsi2>:
    3d56:	90 95       	com	r25
    3d58:	80 95       	com	r24
    3d5a:	70 95       	com	r23
    3d5c:	61 95       	neg	r22
    3d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d60:	8f 4f       	sbci	r24, 0xFF	; 255
    3d62:	9f 4f       	sbci	r25, 0xFF	; 255
    3d64:	08 95       	ret

00003d66 <__tablejump2__>:
    3d66:	ee 0f       	add	r30, r30
    3d68:	ff 1f       	adc	r31, r31
    3d6a:	05 90       	lpm	r0, Z+
    3d6c:	f4 91       	lpm	r31, Z
    3d6e:	e0 2d       	mov	r30, r0
    3d70:	09 94       	ijmp

00003d72 <__muluhisi3>:
    3d72:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <__umulhisi3>
    3d76:	a5 9f       	mul	r26, r21
    3d78:	90 0d       	add	r25, r0
    3d7a:	b4 9f       	mul	r27, r20
    3d7c:	90 0d       	add	r25, r0
    3d7e:	a4 9f       	mul	r26, r20
    3d80:	80 0d       	add	r24, r0
    3d82:	91 1d       	adc	r25, r1
    3d84:	11 24       	eor	r1, r1
    3d86:	08 95       	ret

00003d88 <__udivmodsi4>:
    3d88:	a1 e2       	ldi	r26, 0x21	; 33
    3d8a:	1a 2e       	mov	r1, r26
    3d8c:	aa 1b       	sub	r26, r26
    3d8e:	bb 1b       	sub	r27, r27
    3d90:	fd 01       	movw	r30, r26
    3d92:	0d c0       	rjmp	.+26     	; 0x3dae <__udivmodsi4_ep>

00003d94 <__udivmodsi4_loop>:
    3d94:	aa 1f       	adc	r26, r26
    3d96:	bb 1f       	adc	r27, r27
    3d98:	ee 1f       	adc	r30, r30
    3d9a:	ff 1f       	adc	r31, r31
    3d9c:	a2 17       	cp	r26, r18
    3d9e:	b3 07       	cpc	r27, r19
    3da0:	e4 07       	cpc	r30, r20
    3da2:	f5 07       	cpc	r31, r21
    3da4:	20 f0       	brcs	.+8      	; 0x3dae <__udivmodsi4_ep>
    3da6:	a2 1b       	sub	r26, r18
    3da8:	b3 0b       	sbc	r27, r19
    3daa:	e4 0b       	sbc	r30, r20
    3dac:	f5 0b       	sbc	r31, r21

00003dae <__udivmodsi4_ep>:
    3dae:	66 1f       	adc	r22, r22
    3db0:	77 1f       	adc	r23, r23
    3db2:	88 1f       	adc	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	1a 94       	dec	r1
    3db8:	69 f7       	brne	.-38     	; 0x3d94 <__udivmodsi4_loop>
    3dba:	60 95       	com	r22
    3dbc:	70 95       	com	r23
    3dbe:	80 95       	com	r24
    3dc0:	90 95       	com	r25
    3dc2:	9b 01       	movw	r18, r22
    3dc4:	ac 01       	movw	r20, r24
    3dc6:	bd 01       	movw	r22, r26
    3dc8:	cf 01       	movw	r24, r30
    3dca:	08 95       	ret

00003dcc <__umulhisi3>:
    3dcc:	a2 9f       	mul	r26, r18
    3dce:	b0 01       	movw	r22, r0
    3dd0:	b3 9f       	mul	r27, r19
    3dd2:	c0 01       	movw	r24, r0
    3dd4:	a3 9f       	mul	r26, r19
    3dd6:	70 0d       	add	r23, r0
    3dd8:	81 1d       	adc	r24, r1
    3dda:	11 24       	eor	r1, r1
    3ddc:	91 1d       	adc	r25, r1
    3dde:	b2 9f       	mul	r27, r18
    3de0:	70 0d       	add	r23, r0
    3de2:	81 1d       	adc	r24, r1
    3de4:	11 24       	eor	r1, r1
    3de6:	91 1d       	adc	r25, r1
    3de8:	08 95       	ret

00003dea <_exit>:
    3dea:	f8 94       	cli

00003dec <__stop_program>:
    3dec:	ff cf       	rjmp	.-2      	; 0x3dec <__stop_program>
